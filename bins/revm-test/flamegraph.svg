<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="869.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="2985"><g><title>perf-exec (6 samples, 0.20%)</title><rect x="0.0000%" y="821" width="0.2010%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="831.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="805" width="0.2010%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="815.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="789" width="0.2010%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="799.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="773" width="0.2010%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="783.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="757" width="0.2010%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="741" width="0.2010%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="725" width="0.2010%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="709" width="0.2010%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="693" width="0.2010%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="677" width="0.2010%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="661" width="0.2010%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="645" width="0.2010%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="629" width="0.2010%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="613" width="0.2010%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="0.0000%" y="597" width="0.2010%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="6"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1675%" y="581" width="0.0335%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.4175%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1675%" y="565" width="0.0335%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.4175%" y="575.50"></text></g><g><title>[[heap]] (2 samples, 0.07%)</title><rect x="0.2010%" y="805" width="0.0670%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="2"/><text x="0.4510%" y="815.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (2 samples, 0.07%)</title><rect x="0.2010%" y="789" width="0.0670%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="2"/><text x="0.4510%" y="799.50"></text></g><g><title>revm::instructions::i256::i256_div (3 samples, 0.10%)</title><rect x="0.4355%" y="773" width="0.1005%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="3"/><text x="0.6855%" y="783.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (13 samples, 0.44%)</title><rect x="0.2680%" y="789" width="0.4355%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="13"/><text x="0.5180%" y="799.50"></text></g><g><title>revm::interpreter::stack::Stack::len (5 samples, 0.17%)</title><rect x="0.5360%" y="773" width="0.1675%" height="15" fill="rgb(235,183,28)" fg:x="16" fg:w="5"/><text x="0.7860%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5 samples, 0.17%)</title><rect x="0.5360%" y="757" width="0.1675%" height="15" fill="rgb(221,5,38)" fg:x="16" fg:w="5"/><text x="0.7860%" y="767.50"></text></g><g><title>revm::instructions::arithmetic::wrapping_mul (9 samples, 0.30%)</title><rect x="0.7035%" y="789" width="0.3015%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="9"/><text x="0.9535%" y="799.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.03%)</title><rect x="0.9715%" y="773" width="0.0335%" height="15" fill="rgb(241,131,45)" fg:x="29" fg:w="1"/><text x="1.2215%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="0.9715%" y="757" width="0.0335%" height="15" fill="rgb(249,31,29)" fg:x="29" fg:w="1"/><text x="1.2215%" y="767.50"></text></g><g><title>revm::instructions::control::jumpi (10 samples, 0.34%)</title><rect x="1.0050%" y="789" width="0.3350%" height="15" fill="rgb(225,111,53)" fg:x="30" fg:w="10"/><text x="1.2550%" y="799.50"></text></g><g><title>revm::instructions::memory::mload (14 samples, 0.47%)</title><rect x="1.3400%" y="789" width="0.4690%" height="15" fill="rgb(238,160,17)" fg:x="40" fg:w="14"/><text x="1.5900%" y="799.50"></text></g><g><title>revm::instructions::memory::mstore (20 samples, 0.67%)</title><rect x="1.8090%" y="789" width="0.6700%" height="15" fill="rgb(214,148,48)" fg:x="54" fg:w="20"/><text x="2.0590%" y="799.50"></text></g><g><title>revm::interpreter::Interpreter::run (40 samples, 1.34%)</title><rect x="2.4791%" y="789" width="1.3400%" height="15" fill="rgb(232,36,49)" fg:x="74" fg:w="40"/><text x="2.7291%" y="799.50"></text></g><g><title>revm::instructions::eval (40 samples, 1.34%)</title><rect x="2.4791%" y="773" width="1.3400%" height="15" fill="rgb(209,103,24)" fg:x="74" fg:w="40"/><text x="2.7291%" y="783.50"></text></g><g><title>[[stack]] (109 samples, 3.65%)</title><rect x="0.2680%" y="805" width="3.6516%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="109"/><text x="0.5180%" y="815.50">[[st..</text></g><g><title>revm::journaled_state::JournaledState::sload (3 samples, 0.10%)</title><rect x="3.8191%" y="789" width="0.1005%" height="15" fill="rgb(213,181,19)" fg:x="114" fg:w="3"/><text x="4.0691%" y="799.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.03%)</title><rect x="3.9196%" y="789" width="0.0335%" height="15" fill="rgb(254,191,54)" fg:x="117" fg:w="1"/><text x="4.1696%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.9531%" y="789" width="0.0335%" height="15" fill="rgb(241,83,37)" fg:x="118" fg:w="1"/><text x="4.2031%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.9531%" y="773" width="0.0335%" height="15" fill="rgb(233,36,39)" fg:x="118" fg:w="1"/><text x="4.2031%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.9531%" y="757" width="0.0335%" height="15" fill="rgb(226,3,54)" fg:x="118" fg:w="1"/><text x="4.2031%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.9531%" y="741" width="0.0335%" height="15" fill="rgb(245,192,40)" fg:x="118" fg:w="1"/><text x="4.2031%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.9531%" y="725" width="0.0335%" height="15" fill="rgb(238,167,29)" fg:x="118" fg:w="1"/><text x="4.2031%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.9531%" y="709" width="0.0335%" height="15" fill="rgb(232,182,51)" fg:x="118" fg:w="1"/><text x="4.2031%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.9531%" y="693" width="0.0335%" height="15" fill="rgb(231,60,39)" fg:x="118" fg:w="1"/><text x="4.2031%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.9531%" y="677" width="0.0335%" height="15" fill="rgb(208,69,12)" fg:x="118" fg:w="1"/><text x="4.2031%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.9531%" y="661" width="0.0335%" height="15" fill="rgb(235,93,37)" fg:x="118" fg:w="1"/><text x="4.2031%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="3.9531%" y="645" width="0.0335%" height="15" fill="rgb(213,116,39)" fg:x="118" fg:w="1"/><text x="4.2031%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3 samples, 0.10%)</title><rect x="3.9866%" y="789" width="0.1005%" height="15" fill="rgb(222,207,29)" fg:x="119" fg:w="3"/><text x="4.2366%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.07%)</title><rect x="4.0201%" y="773" width="0.0670%" height="15" fill="rgb(206,96,30)" fg:x="120" fg:w="2"/><text x="4.2701%" y="783.50"></text></g><g><title>revm::instructions::arithmetic::wrapping_mul (8 samples, 0.27%)</title><rect x="4.0871%" y="789" width="0.2680%" height="15" fill="rgb(218,138,4)" fg:x="122" fg:w="8"/><text x="4.3371%" y="799.50"></text></g><g><title>revm::interpreter::stack::Stack::len (8 samples, 0.27%)</title><rect x="4.0871%" y="773" width="0.2680%" height="15" fill="rgb(250,191,14)" fg:x="122" fg:w="8"/><text x="4.3371%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (8 samples, 0.27%)</title><rect x="4.0871%" y="757" width="0.2680%" height="15" fill="rgb(239,60,40)" fg:x="122" fg:w="8"/><text x="4.3371%" y="767.50"></text></g><g><title>revm::instructions::bitwise::slt (1 samples, 0.03%)</title><rect x="4.3551%" y="789" width="0.0335%" height="15" fill="rgb(206,27,48)" fg:x="130" fg:w="1"/><text x="4.6051%" y="799.50"></text></g><g><title>revm::instructions::control::jumpi (1 samples, 0.03%)</title><rect x="4.3886%" y="789" width="0.0335%" height="15" fill="rgb(225,35,8)" fg:x="131" fg:w="1"/><text x="4.6386%" y="799.50"></text></g><g><title>revm::instructions::memory::mload (8 samples, 0.27%)</title><rect x="4.4221%" y="789" width="0.2680%" height="15" fill="rgb(250,213,24)" fg:x="132" fg:w="8"/><text x="4.6721%" y="799.50"></text></g><g><title>revm::instructions::memory::mstore (15 samples, 0.50%)</title><rect x="4.6901%" y="789" width="0.5025%" height="15" fill="rgb(247,123,22)" fg:x="140" fg:w="15"/><text x="4.9401%" y="799.50"></text></g><g><title>revm::interpreter::memory::Memory::resize (5 samples, 0.17%)</title><rect x="5.0251%" y="773" width="0.1675%" height="15" fill="rgb(231,138,38)" fg:x="150" fg:w="5"/><text x="5.2751%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (5 samples, 0.17%)</title><rect x="5.0251%" y="757" width="0.1675%" height="15" fill="rgb(231,145,46)" fg:x="150" fg:w="5"/><text x="5.2751%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (5 samples, 0.17%)</title><rect x="5.0251%" y="741" width="0.1675%" height="15" fill="rgb(251,118,11)" fg:x="150" fg:w="5"/><text x="5.2751%" y="751.50"></text></g><g><title>core::ptr::write (5 samples, 0.17%)</title><rect x="5.0251%" y="725" width="0.1675%" height="15" fill="rgb(217,147,25)" fg:x="150" fg:w="5"/><text x="5.2751%" y="735.50"></text></g><g><title>revm::journaled_state::JournaledState::sload (4 samples, 0.13%)</title><rect x="5.1926%" y="789" width="0.1340%" height="15" fill="rgb(247,81,37)" fg:x="155" fg:w="4"/><text x="5.4426%" y="799.50"></text></g><g><title>[unknown] (60 samples, 2.01%)</title><rect x="3.9196%" y="805" width="2.0101%" height="15" fill="rgb(209,12,38)" fg:x="117" fg:w="60"/><text x="4.1696%" y="815.50">[..</text></g><g><title>ruint::div::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::div_rem (18 samples, 0.60%)</title><rect x="5.3266%" y="789" width="0.6030%" height="15" fill="rgb(227,1,9)" fg:x="159" fg:w="18"/><text x="5.5766%" y="799.50"></text></g><g><title>&lt;revm::instructions::Return as core::cmp::PartialEq&gt;::eq (58 samples, 1.94%)</title><rect x="10.0168%" y="293" width="1.9430%" height="15" fill="rgb(248,47,43)" fg:x="299" fg:w="58"/><text x="10.2668%" y="303.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (26 samples, 0.87%)</title><rect x="11.9598%" y="293" width="0.8710%" height="15" fill="rgb(221,10,30)" fg:x="357" fg:w="26"/><text x="12.2098%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="33.9028%" y="277" width="0.0335%" height="15" fill="rgb(210,229,1)" fg:x="1012" fg:w="1"/><text x="34.1528%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="33.9028%" y="261" width="0.0335%" height="15" fill="rgb(222,148,37)" fg:x="1012" fg:w="1"/><text x="34.1528%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="33.9028%" y="245" width="0.0335%" height="15" fill="rgb(234,67,33)" fg:x="1012" fg:w="1"/><text x="34.1528%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="33.9028%" y="229" width="0.0335%" height="15" fill="rgb(247,98,35)" fg:x="1012" fg:w="1"/><text x="34.1528%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="33.9028%" y="213" width="0.0335%" height="15" fill="rgb(247,138,52)" fg:x="1012" fg:w="1"/><text x="34.1528%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="33.9028%" y="197" width="0.0335%" height="15" fill="rgb(213,79,30)" fg:x="1012" fg:w="1"/><text x="34.1528%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="33.9028%" y="181" width="0.0335%" height="15" fill="rgb(246,177,23)" fg:x="1012" fg:w="1"/><text x="34.1528%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="33.9028%" y="165" width="0.0335%" height="15" fill="rgb(230,62,27)" fg:x="1012" fg:w="1"/><text x="34.1528%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="33.9028%" y="149" width="0.0335%" height="15" fill="rgb(216,154,8)" fg:x="1012" fg:w="1"/><text x="34.1528%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="33.9028%" y="133" width="0.0335%" height="15" fill="rgb(244,35,45)" fg:x="1012" fg:w="1"/><text x="34.1528%" y="143.50"></text></g><g><title>revm::instructions::arithmetic::rem (1 samples, 0.03%)</title><rect x="33.9363%" y="277" width="0.0335%" height="15" fill="rgb(251,115,12)" fg:x="1013" fg:w="1"/><text x="34.1863%" y="287.50"></text></g><g><title>ruint::div::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_rem (1 samples, 0.03%)</title><rect x="33.9363%" y="261" width="0.0335%" height="15" fill="rgb(240,54,50)" fg:x="1013" fg:w="1"/><text x="34.1863%" y="271.50"></text></g><g><title>ruint::div::&lt;impl core::ops::arith::Rem for ruint::Uint&lt;_,_&gt;&gt;::rem (1 samples, 0.03%)</title><rect x="33.9363%" y="245" width="0.0335%" height="15" fill="rgb(233,84,52)" fg:x="1013" fg:w="1"/><text x="34.1863%" y="255.50"></text></g><g><title>ruint::div::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_rem (1 samples, 0.03%)</title><rect x="33.9363%" y="229" width="0.0335%" height="15" fill="rgb(207,117,47)" fg:x="1013" fg:w="1"/><text x="34.1863%" y="239.50"></text></g><g><title>ruint::div::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::div_rem (1 samples, 0.03%)</title><rect x="33.9363%" y="213" width="0.0335%" height="15" fill="rgb(249,43,39)" fg:x="1013" fg:w="1"/><text x="34.1863%" y="223.50"></text></g><g><title>ruint::algorithms::div::div (1 samples, 0.03%)</title><rect x="33.9363%" y="197" width="0.0335%" height="15" fill="rgb(209,38,44)" fg:x="1013" fg:w="1"/><text x="34.1863%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (1 samples, 0.03%)</title><rect x="33.9363%" y="181" width="0.0335%" height="15" fill="rgb(236,212,23)" fg:x="1013" fg:w="1"/><text x="34.1863%" y="191.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (15 samples, 0.50%)</title><rect x="37.0854%" y="245" width="0.5025%" height="15" fill="rgb(242,79,21)" fg:x="1107" fg:w="15"/><text x="37.3354%" y="255.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (15 samples, 0.50%)</title><rect x="37.0854%" y="229" width="0.5025%" height="15" fill="rgb(211,96,35)" fg:x="1107" fg:w="15"/><text x="37.3354%" y="239.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (15 samples, 0.50%)</title><rect x="37.0854%" y="213" width="0.5025%" height="15" fill="rgb(253,215,40)" fg:x="1107" fg:w="15"/><text x="37.3354%" y="223.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (15 samples, 0.50%)</title><rect x="37.7554%" y="229" width="0.5025%" height="15" fill="rgb(211,81,21)" fg:x="1127" fg:w="15"/><text x="38.0054%" y="239.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (15 samples, 0.50%)</title><rect x="37.7554%" y="213" width="0.5025%" height="15" fill="rgb(208,190,38)" fg:x="1127" fg:w="15"/><text x="38.0054%" y="223.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (15 samples, 0.50%)</title><rect x="37.7554%" y="197" width="0.5025%" height="15" fill="rgb(235,213,38)" fg:x="1127" fg:w="15"/><text x="38.0054%" y="207.50"></text></g><g><title>revm::instructions::i256::two_compl_mut (1 samples, 0.03%)</title><rect x="38.2580%" y="229" width="0.0335%" height="15" fill="rgb(237,122,38)" fg:x="1142" fg:w="1"/><text x="38.5080%" y="239.50"></text></g><g><title>revm::instructions::i256::two_compl (1 samples, 0.03%)</title><rect x="38.2580%" y="213" width="0.0335%" height="15" fill="rgb(244,218,35)" fg:x="1142" fg:w="1"/><text x="38.5080%" y="223.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_neg (1 samples, 0.03%)</title><rect x="38.2580%" y="197" width="0.0335%" height="15" fill="rgb(240,68,47)" fg:x="1142" fg:w="1"/><text x="38.5080%" y="207.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_neg (1 samples, 0.03%)</title><rect x="38.2580%" y="181" width="0.0335%" height="15" fill="rgb(210,16,53)" fg:x="1142" fg:w="1"/><text x="38.5080%" y="191.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (1 samples, 0.03%)</title><rect x="38.2580%" y="165" width="0.0335%" height="15" fill="rgb(235,124,12)" fg:x="1142" fg:w="1"/><text x="38.5080%" y="175.50"></text></g><g><title>revm::instructions::i256::i256_sign (24 samples, 0.80%)</title><rect x="37.5879%" y="245" width="0.8040%" height="15" fill="rgb(224,169,11)" fg:x="1122" fg:w="24"/><text x="37.8379%" y="255.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::bit (3 samples, 0.10%)</title><rect x="38.2915%" y="229" width="0.1005%" height="15" fill="rgb(250,166,2)" fg:x="1143" fg:w="3"/><text x="38.5415%" y="239.50"></text></g><g><title>revm::instructions::i256::two_compl (3 samples, 0.10%)</title><rect x="38.3920%" y="245" width="0.1005%" height="15" fill="rgb(242,216,29)" fg:x="1146" fg:w="3"/><text x="38.6420%" y="255.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_neg (3 samples, 0.10%)</title><rect x="38.3920%" y="229" width="0.1005%" height="15" fill="rgb(230,116,27)" fg:x="1146" fg:w="3"/><text x="38.6420%" y="239.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_neg (3 samples, 0.10%)</title><rect x="38.3920%" y="213" width="0.1005%" height="15" fill="rgb(228,99,48)" fg:x="1146" fg:w="3"/><text x="38.6420%" y="223.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (3 samples, 0.10%)</title><rect x="38.3920%" y="197" width="0.1005%" height="15" fill="rgb(253,11,6)" fg:x="1146" fg:w="3"/><text x="38.6420%" y="207.50"></text></g><g><title>core::cmp::PartialEq::ne (8 samples, 0.27%)</title><rect x="39.1290%" y="229" width="0.2680%" height="15" fill="rgb(247,143,39)" fg:x="1168" fg:w="8"/><text x="39.3790%" y="239.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.27%)</title><rect x="39.1290%" y="213" width="0.2680%" height="15" fill="rgb(236,97,10)" fg:x="1168" fg:w="8"/><text x="39.3790%" y="223.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (8 samples, 0.27%)</title><rect x="39.1290%" y="197" width="0.2680%" height="15" fill="rgb(233,208,19)" fg:x="1168" fg:w="8"/><text x="39.3790%" y="207.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (8 samples, 0.27%)</title><rect x="39.1290%" y="181" width="0.2680%" height="15" fill="rgb(216,164,2)" fg:x="1168" fg:w="8"/><text x="39.3790%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (29 samples, 0.97%)</title><rect x="41.0050%" y="213" width="0.9715%" height="15" fill="rgb(220,129,5)" fg:x="1224" fg:w="29"/><text x="41.2550%" y="223.50"></text></g><g><title>ruint::algorithms::div::div::{{closure}} (8 samples, 0.27%)</title><rect x="41.7085%" y="197" width="0.2680%" height="15" fill="rgb(242,17,10)" fg:x="1245" fg:w="8"/><text x="41.9585%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.03%)</title><rect x="41.9765%" y="213" width="0.0335%" height="15" fill="rgb(242,107,0)" fg:x="1253" fg:w="1"/><text x="42.2265%" y="223.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.03%)</title><rect x="41.9765%" y="197" width="0.0335%" height="15" fill="rgb(251,28,31)" fg:x="1253" fg:w="1"/><text x="42.2265%" y="207.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.03%)</title><rect x="41.9765%" y="181" width="0.0335%" height="15" fill="rgb(233,223,10)" fg:x="1253" fg:w="1"/><text x="42.2265%" y="191.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::Shl&lt;u32&gt;&gt;::shl (2 samples, 0.07%)</title><rect x="42.4121%" y="197" width="0.0670%" height="15" fill="rgb(215,21,27)" fg:x="1266" fg:w="2"/><text x="42.6621%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shl&lt;u32&gt;&gt;::shl (2 samples, 0.07%)</title><rect x="42.4121%" y="181" width="0.0670%" height="15" fill="rgb(232,23,21)" fg:x="1266" fg:w="2"/><text x="42.6621%" y="191.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::Shr&lt;u32&gt;&gt;::shr (4 samples, 0.13%)</title><rect x="42.4791%" y="197" width="0.1340%" height="15" fill="rgb(244,5,23)" fg:x="1268" fg:w="4"/><text x="42.7291%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;u32&gt;&gt;::shr (4 samples, 0.13%)</title><rect x="42.4791%" y="181" width="0.1340%" height="15" fill="rgb(226,81,46)" fg:x="1268" fg:w="4"/><text x="42.7291%" y="191.50"></text></g><g><title>&lt;u128 as ruint::algorithms::DoubleWord&lt;u64&gt;&gt;::join (5 samples, 0.17%)</title><rect x="42.6131%" y="197" width="0.1675%" height="15" fill="rgb(247,70,30)" fg:x="1272" fg:w="5"/><text x="42.8631%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (3 samples, 0.10%)</title><rect x="42.7806%" y="197" width="0.1005%" height="15" fill="rgb(212,68,19)" fg:x="1277" fg:w="3"/><text x="43.0306%" y="207.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Add&gt;::add (3 samples, 0.10%)</title><rect x="43.0486%" y="181" width="0.1005%" height="15" fill="rgb(240,187,13)" fg:x="1285" fg:w="3"/><text x="43.2986%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.10%)</title><rect x="43.0486%" y="165" width="0.1005%" height="15" fill="rgb(223,113,26)" fg:x="1285" fg:w="3"/><text x="43.2986%" y="175.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Mul&gt;::mul (11 samples, 0.37%)</title><rect x="43.1491%" y="181" width="0.3685%" height="15" fill="rgb(206,192,2)" fg:x="1288" fg:w="11"/><text x="43.3991%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (11 samples, 0.37%)</title><rect x="43.1491%" y="165" width="0.3685%" height="15" fill="rgb(241,108,4)" fg:x="1288" fg:w="11"/><text x="43.3991%" y="175.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Sub&gt;::sub (5 samples, 0.17%)</title><rect x="43.5176%" y="181" width="0.1675%" height="15" fill="rgb(247,173,49)" fg:x="1299" fg:w="5"/><text x="43.7676%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (5 samples, 0.17%)</title><rect x="43.5176%" y="165" width="0.1675%" height="15" fill="rgb(224,114,35)" fg:x="1299" fg:w="5"/><text x="43.7676%" y="175.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::Shr&lt;usize&gt;&gt;::shr (5 samples, 0.17%)</title><rect x="43.6851%" y="181" width="0.1675%" height="15" fill="rgb(245,159,27)" fg:x="1304" fg:w="5"/><text x="43.9351%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_shr (5 samples, 0.17%)</title><rect x="43.6851%" y="165" width="0.1675%" height="15" fill="rgb(245,172,44)" fg:x="1304" fg:w="5"/><text x="43.9351%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.8191%" y="149" width="0.0335%" height="15" fill="rgb(236,23,11)" fg:x="1308" fg:w="1"/><text x="44.0691%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.8191%" y="133" width="0.0335%" height="15" fill="rgb(205,117,38)" fg:x="1308" fg:w="1"/><text x="44.0691%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.8191%" y="117" width="0.0335%" height="15" fill="rgb(237,72,25)" fg:x="1308" fg:w="1"/><text x="44.0691%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.8191%" y="101" width="0.0335%" height="15" fill="rgb(244,70,9)" fg:x="1308" fg:w="1"/><text x="44.0691%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.8191%" y="85" width="0.0335%" height="15" fill="rgb(217,125,39)" fg:x="1308" fg:w="1"/><text x="44.0691%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="43.8191%" y="69" width="0.0335%" height="15" fill="rgb(235,36,10)" fg:x="1308" fg:w="1"/><text x="44.0691%" y="79.50"></text></g><g><title>ruint::algorithms::div::reciprocal::mul_hi (5 samples, 0.17%)</title><rect x="43.8526%" y="181" width="0.1675%" height="15" fill="rgb(251,123,47)" fg:x="1309" fg:w="5"/><text x="44.1026%" y="191.50"></text></g><g><title>ruint::algorithms::div::reciprocal::reciprocal_mg10 (37 samples, 1.24%)</title><rect x="42.8811%" y="197" width="1.2395%" height="15" fill="rgb(221,13,13)" fg:x="1280" fg:w="37"/><text x="43.1311%" y="207.50"></text></g><g><title>ruint::algorithms::div::reciprocal::muladd_hi (3 samples, 0.10%)</title><rect x="44.0201%" y="181" width="0.1005%" height="15" fill="rgb(238,131,9)" fg:x="1314" fg:w="3"/><text x="44.2701%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.17%)</title><rect x="45.1591%" y="181" width="0.1675%" height="15" fill="rgb(211,50,8)" fg:x="1348" fg:w="5"/><text x="45.4091%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (6 samples, 0.20%)</title><rect x="45.3266%" y="181" width="0.2010%" height="15" fill="rgb(245,182,24)" fg:x="1353" fg:w="6"/><text x="45.5766%" y="191.50"></text></g><g><title>ruint::algorithms::div::small::div_2x1_mg10 (46 samples, 1.54%)</title><rect x="44.1206%" y="197" width="1.5410%" height="15" fill="rgb(242,14,37)" fg:x="1317" fg:w="46"/><text x="44.3706%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (4 samples, 0.13%)</title><rect x="45.5276%" y="181" width="0.1340%" height="15" fill="rgb(246,228,12)" fg:x="1359" fg:w="4"/><text x="45.7776%" y="191.50"></text></g><g><title>ruint::algorithms::div::small::div_nx1 (110 samples, 3.69%)</title><rect x="42.0101%" y="213" width="3.6851%" height="15" fill="rgb(213,55,15)" fg:x="1254" fg:w="110"/><text x="42.2601%" y="223.50">ruin..</text></g><g><title>ruint::algorithms::div::small::div_nx1_normalized (1 samples, 0.03%)</title><rect x="45.6616%" y="197" width="0.0335%" height="15" fill="rgb(209,9,3)" fg:x="1363" fg:w="1"/><text x="45.9116%" y="207.50"></text></g><g><title>ruint::algorithms::div::small::div_2x1_mg10 (1 samples, 0.03%)</title><rect x="45.6616%" y="181" width="0.0335%" height="15" fill="rgb(230,59,30)" fg:x="1363" fg:w="1"/><text x="45.9116%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="45.6616%" y="165" width="0.0335%" height="15" fill="rgb(209,121,21)" fg:x="1363" fg:w="1"/><text x="45.9116%" y="175.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::Shr&lt;u32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="45.8626%" y="197" width="0.0335%" height="15" fill="rgb(220,109,13)" fg:x="1369" fg:w="1"/><text x="46.1126%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;u32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="45.8626%" y="181" width="0.0335%" height="15" fill="rgb(232,18,1)" fg:x="1369" fg:w="1"/><text x="46.1126%" y="191.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u64&gt; for u128&gt;::from (3 samples, 0.10%)</title><rect x="46.1307%" y="181" width="0.1005%" height="15" fill="rgb(215,41,42)" fg:x="1377" fg:w="3"/><text x="46.3807%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="46.2312%" y="181" width="0.0670%" height="15" fill="rgb(224,123,36)" fg:x="1380" fg:w="2"/><text x="46.4812%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (1 samples, 0.03%)</title><rect x="46.2982%" y="181" width="0.0335%" height="15" fill="rgb(240,125,3)" fg:x="1382" fg:w="1"/><text x="46.5482%" y="191.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Add&gt;::add (2 samples, 0.07%)</title><rect x="46.3317%" y="165" width="0.0670%" height="15" fill="rgb(205,98,50)" fg:x="1383" fg:w="2"/><text x="46.5817%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="46.3317%" y="149" width="0.0670%" height="15" fill="rgb(205,185,37)" fg:x="1383" fg:w="2"/><text x="46.5817%" y="159.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Mul&gt;::mul (3 samples, 0.10%)</title><rect x="46.3987%" y="165" width="0.1005%" height="15" fill="rgb(238,207,15)" fg:x="1385" fg:w="3"/><text x="46.6487%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (3 samples, 0.10%)</title><rect x="46.3987%" y="149" width="0.1005%" height="15" fill="rgb(213,199,42)" fg:x="1385" fg:w="3"/><text x="46.6487%" y="159.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Sub&gt;::sub (1 samples, 0.03%)</title><rect x="46.4992%" y="165" width="0.0335%" height="15" fill="rgb(235,201,11)" fg:x="1388" fg:w="1"/><text x="46.7492%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (1 samples, 0.03%)</title><rect x="46.4992%" y="149" width="0.0335%" height="15" fill="rgb(207,46,11)" fg:x="1388" fg:w="1"/><text x="46.7492%" y="159.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::Shr&lt;usize&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="46.5327%" y="165" width="0.0335%" height="15" fill="rgb(241,35,35)" fg:x="1389" fg:w="1"/><text x="46.7827%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_shr (1 samples, 0.03%)</title><rect x="46.5327%" y="149" width="0.0335%" height="15" fill="rgb(243,32,47)" fg:x="1389" fg:w="1"/><text x="46.7827%" y="159.50"></text></g><g><title>ruint::algorithms::div::reciprocal::reciprocal_2_mg10 (23 samples, 0.77%)</title><rect x="45.8961%" y="197" width="0.7705%" height="15" fill="rgb(247,202,23)" fg:x="1370" fg:w="23"/><text x="46.1461%" y="207.50"></text></g><g><title>ruint::algorithms::div::reciprocal::reciprocal_mg10 (10 samples, 0.34%)</title><rect x="46.3317%" y="181" width="0.3350%" height="15" fill="rgb(219,102,11)" fg:x="1383" fg:w="10"/><text x="46.5817%" y="191.50"></text></g><g><title>ruint::algorithms::div::reciprocal::muladd_hi (3 samples, 0.10%)</title><rect x="46.5662%" y="165" width="0.1005%" height="15" fill="rgb(243,110,44)" fg:x="1390" fg:w="3"/><text x="46.8162%" y="175.50"></text></g><g><title>revm::instructions::i256::i256_div (375 samples, 12.56%)</title><rect x="34.3049%" y="261" width="12.5628%" height="15" fill="rgb(222,74,54)" fg:x="1024" fg:w="375"/><text x="34.5549%" y="271.50">revm::instructions:..</text></g><g><title>ruint::div::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::div_rem (250 samples, 8.38%)</title><rect x="38.4925%" y="245" width="8.3752%" height="15" fill="rgb(216,99,12)" fg:x="1149" fg:w="250"/><text x="38.7425%" y="255.50">ruint::div::..</text></g><g><title>ruint::algorithms::div::div (223 samples, 7.47%)</title><rect x="39.3970%" y="229" width="7.4707%" height="15" fill="rgb(226,22,26)" fg:x="1176" fg:w="223"/><text x="39.6470%" y="239.50">ruint::alg..</text></g><g><title>ruint::algorithms::div::small::div_nx2 (35 samples, 1.17%)</title><rect x="45.6951%" y="213" width="1.1725%" height="15" fill="rgb(217,163,10)" fg:x="1364" fg:w="35"/><text x="45.9451%" y="223.50"></text></g><g><title>ruint::algorithms::div::small::div_3x2_mg10 (6 samples, 0.20%)</title><rect x="46.6667%" y="197" width="0.2010%" height="15" fill="rgb(213,25,53)" fg:x="1393" fg:w="6"/><text x="46.9167%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (1 samples, 0.03%)</title><rect x="46.8342%" y="181" width="0.0335%" height="15" fill="rgb(252,105,26)" fg:x="1398" fg:w="1"/><text x="47.0842%" y="191.50"></text></g><g><title>revm::interpreter::stack::Stack::len (4 samples, 0.13%)</title><rect x="46.8677%" y="261" width="0.1340%" height="15" fill="rgb(220,39,43)" fg:x="1399" fg:w="4"/><text x="47.1177%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.13%)</title><rect x="46.8677%" y="245" width="0.1340%" height="15" fill="rgb(229,68,48)" fg:x="1399" fg:w="4"/><text x="47.1177%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.03%)</title><rect x="47.0017%" y="245" width="0.0335%" height="15" fill="rgb(252,8,32)" fg:x="1403" fg:w="1"/><text x="47.2517%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (2 samples, 0.07%)</title><rect x="47.0352%" y="245" width="0.0670%" height="15" fill="rgb(223,20,43)" fg:x="1404" fg:w="2"/><text x="47.2852%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.07%)</title><rect x="47.0352%" y="229" width="0.0670%" height="15" fill="rgb(229,81,49)" fg:x="1404" fg:w="2"/><text x="47.2852%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.07%)</title><rect x="47.0352%" y="213" width="0.0670%" height="15" fill="rgb(236,28,36)" fg:x="1404" fg:w="2"/><text x="47.2852%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.07%)</title><rect x="47.0352%" y="197" width="0.0670%" height="15" fill="rgb(249,185,26)" fg:x="1404" fg:w="2"/><text x="47.2852%" y="207.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (393 samples, 13.17%)</title><rect x="33.9698%" y="277" width="13.1658%" height="15" fill="rgb(249,174,33)" fg:x="1014" fg:w="393"/><text x="34.2198%" y="287.50">revm::instructions::..</text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (4 samples, 0.13%)</title><rect x="47.0017%" y="261" width="0.1340%" height="15" fill="rgb(233,201,37)" fg:x="1403" fg:w="4"/><text x="47.2517%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.03%)</title><rect x="47.1022%" y="245" width="0.0335%" height="15" fill="rgb(221,78,26)" fg:x="1406" fg:w="1"/><text x="47.3522%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.03%)</title><rect x="47.1022%" y="229" width="0.0335%" height="15" fill="rgb(250,127,30)" fg:x="1406" fg:w="1"/><text x="47.3522%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="47.1022%" y="213" width="0.0335%" height="15" fill="rgb(230,49,44)" fg:x="1406" fg:w="1"/><text x="47.3522%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="47.1022%" y="197" width="0.0335%" height="15" fill="rgb(229,67,23)" fg:x="1406" fg:w="1"/><text x="47.3522%" y="207.50"></text></g><g><title>revm::interpreter::stack::Stack::len (8 samples, 0.27%)</title><rect x="48.0402%" y="261" width="0.2680%" height="15" fill="rgb(249,83,47)" fg:x="1434" fg:w="8"/><text x="48.2902%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (8 samples, 0.27%)</title><rect x="48.0402%" y="245" width="0.2680%" height="15" fill="rgb(215,43,3)" fg:x="1434" fg:w="8"/><text x="48.2902%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (3 samples, 0.10%)</title><rect x="48.5427%" y="245" width="0.1005%" height="15" fill="rgb(238,154,13)" fg:x="1449" fg:w="3"/><text x="48.7927%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (13 samples, 0.44%)</title><rect x="48.3082%" y="261" width="0.4355%" height="15" fill="rgb(219,56,2)" fg:x="1442" fg:w="13"/><text x="48.5582%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (3 samples, 0.10%)</title><rect x="48.6432%" y="245" width="0.1005%" height="15" fill="rgb(233,0,4)" fg:x="1452" fg:w="3"/><text x="48.8932%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.10%)</title><rect x="48.6432%" y="229" width="0.1005%" height="15" fill="rgb(235,30,7)" fg:x="1452" fg:w="3"/><text x="48.8932%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.10%)</title><rect x="48.6432%" y="213" width="0.1005%" height="15" fill="rgb(250,79,13)" fg:x="1452" fg:w="3"/><text x="48.8932%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 0.10%)</title><rect x="48.6432%" y="197" width="0.1005%" height="15" fill="rgb(211,146,34)" fg:x="1452" fg:w="3"/><text x="48.8932%" y="207.50"></text></g><g><title>revm::instructions::arithmetic::wrapped_add (115 samples, 3.85%)</title><rect x="47.1357%" y="277" width="3.8526%" height="15" fill="rgb(228,22,38)" fg:x="1407" fg:w="115"/><text x="47.3857%" y="287.50">revm..</text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_add (67 samples, 2.24%)</title><rect x="48.7437%" y="261" width="2.2446%" height="15" fill="rgb(235,168,5)" fg:x="1455" fg:w="67"/><text x="48.9937%" y="271.50">r..</text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_add (67 samples, 2.24%)</title><rect x="48.7437%" y="245" width="2.2446%" height="15" fill="rgb(221,155,16)" fg:x="1455" fg:w="67"/><text x="48.9937%" y="255.50">r..</text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (2 samples, 0.07%)</title><rect x="51.0218%" y="261" width="0.0670%" height="15" fill="rgb(215,215,53)" fg:x="1523" fg:w="2"/><text x="51.2718%" y="271.50"></text></g><g><title>revm::instructions::arithmetic::wrapping_mul (24 samples, 0.80%)</title><rect x="50.9883%" y="277" width="0.8040%" height="15" fill="rgb(223,4,10)" fg:x="1522" fg:w="24"/><text x="51.2383%" y="287.50"></text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_mul (21 samples, 0.70%)</title><rect x="51.0888%" y="261" width="0.7035%" height="15" fill="rgb(234,103,6)" fg:x="1525" fg:w="21"/><text x="51.3388%" y="271.50"></text></g><g><title>ruint::algorithms::mul::addmul_n (21 samples, 0.70%)</title><rect x="51.0888%" y="245" width="0.7035%" height="15" fill="rgb(227,97,0)" fg:x="1525" fg:w="21"/><text x="51.3388%" y="255.50"></text></g><g><title>ruint::algorithms::mul::addmul_4 (21 samples, 0.70%)</title><rect x="51.0888%" y="229" width="0.7035%" height="15" fill="rgb(234,150,53)" fg:x="1525" fg:w="21"/><text x="51.3388%" y="239.50"></text></g><g><title>ruint::algorithms::mul::mac (21 samples, 0.70%)</title><rect x="51.0888%" y="213" width="0.7035%" height="15" fill="rgb(228,201,54)" fg:x="1525" fg:w="21"/><text x="51.3388%" y="223.50"></text></g><g><title>&lt;u128 as ruint::algorithms::DoubleWord&lt;u64&gt;&gt;::muladd2 (21 samples, 0.70%)</title><rect x="51.0888%" y="197" width="0.7035%" height="15" fill="rgb(222,22,37)" fg:x="1525" fg:w="21"/><text x="51.3388%" y="207.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (2 samples, 0.07%)</title><rect x="51.8928%" y="261" width="0.0670%" height="15" fill="rgb(237,53,32)" fg:x="1549" fg:w="2"/><text x="52.1428%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.03%)</title><rect x="51.9263%" y="245" width="0.0335%" height="15" fill="rgb(233,25,53)" fg:x="1550" fg:w="1"/><text x="52.1763%" y="255.50"></text></g><g><title>revm::instructions::arithmetic::wrapping_sub (11 samples, 0.37%)</title><rect x="51.7923%" y="277" width="0.3685%" height="15" fill="rgb(210,40,34)" fg:x="1546" fg:w="11"/><text x="52.0423%" y="287.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_sub (6 samples, 0.20%)</title><rect x="51.9598%" y="261" width="0.2010%" height="15" fill="rgb(241,220,44)" fg:x="1551" fg:w="6"/><text x="52.2098%" y="271.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (6 samples, 0.20%)</title><rect x="51.9598%" y="245" width="0.2010%" height="15" fill="rgb(235,28,35)" fg:x="1551" fg:w="6"/><text x="52.2098%" y="255.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u64&gt; for i128&gt;::from (1 samples, 0.03%)</title><rect x="52.1273%" y="229" width="0.0335%" height="15" fill="rgb(210,56,17)" fg:x="1556" fg:w="1"/><text x="52.3773%" y="239.50"></text></g><g><title>revm::instructions::bitwise::bitand (3 samples, 0.10%)</title><rect x="52.1608%" y="277" width="0.1005%" height="15" fill="rgb(224,130,29)" fg:x="1557" fg:w="3"/><text x="52.4108%" y="287.50"></text></g><g><title>ruint::bits::&lt;impl core::ops::bit::BitAnd for ruint::Uint&lt;_,_&gt;&gt;::bitand (1 samples, 0.03%)</title><rect x="52.2278%" y="261" width="0.0335%" height="15" fill="rgb(235,212,8)" fg:x="1559" fg:w="1"/><text x="52.4778%" y="271.50"></text></g><g><title>ruint::bits::&lt;impl core::ops::bit::BitAndAssign for ruint::Uint&lt;_,_&gt;&gt;::bitand_assign (1 samples, 0.03%)</title><rect x="52.2278%" y="245" width="0.0335%" height="15" fill="rgb(223,33,50)" fg:x="1559" fg:w="1"/><text x="52.4778%" y="255.50"></text></g><g><title>ruint::bits::&lt;impl core::ops::bit::BitAndAssign&lt;&amp;ruint::Uint&lt;_,_&gt;&gt; for ruint::Uint&lt;_,_&gt;&gt;::bitand_assign (1 samples, 0.03%)</title><rect x="52.2278%" y="229" width="0.0335%" height="15" fill="rgb(219,149,13)" fg:x="1559" fg:w="1"/><text x="52.4778%" y="239.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAndAssign&gt;::bitand_assign (1 samples, 0.03%)</title><rect x="52.2278%" y="213" width="0.0335%" height="15" fill="rgb(250,156,29)" fg:x="1559" fg:w="1"/><text x="52.4778%" y="223.50"></text></g><g><title>core::cmp::PartialOrd::gt (1 samples, 0.03%)</title><rect x="52.2613%" y="261" width="0.0335%" height="15" fill="rgb(216,193,19)" fg:x="1560" fg:w="1"/><text x="52.5113%" y="271.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::PartialOrd for ruint::Uint&lt;_,_&gt;&gt;::partial_cmp (1 samples, 0.03%)</title><rect x="52.2613%" y="245" width="0.0335%" height="15" fill="rgb(216,135,14)" fg:x="1560" fg:w="1"/><text x="52.5113%" y="255.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::Ord for ruint::Uint&lt;_,_&gt;&gt;::cmp (1 samples, 0.03%)</title><rect x="52.2613%" y="229" width="0.0335%" height="15" fill="rgb(241,47,5)" fg:x="1560" fg:w="1"/><text x="52.5113%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (1 samples, 0.03%)</title><rect x="52.2613%" y="213" width="0.0335%" height="15" fill="rgb(233,42,35)" fg:x="1560" fg:w="1"/><text x="52.5113%" y="223.50"></text></g><g><title>revm::instructions::bitwise::gt (3 samples, 0.10%)</title><rect x="52.2613%" y="277" width="0.1005%" height="15" fill="rgb(231,13,6)" fg:x="1560" fg:w="3"/><text x="52.5113%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::len (2 samples, 0.07%)</title><rect x="52.2948%" y="261" width="0.0670%" height="15" fill="rgb(207,181,40)" fg:x="1561" fg:w="2"/><text x="52.5448%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.07%)</title><rect x="52.2948%" y="245" width="0.0670%" height="15" fill="rgb(254,173,49)" fg:x="1561" fg:w="2"/><text x="52.5448%" y="255.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.17%)</title><rect x="52.4623%" y="261" width="0.1675%" height="15" fill="rgb(221,1,38)" fg:x="1566" fg:w="5"/><text x="52.7123%" y="271.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (5 samples, 0.17%)</title><rect x="52.4623%" y="245" width="0.1675%" height="15" fill="rgb(206,124,46)" fg:x="1566" fg:w="5"/><text x="52.7123%" y="255.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (5 samples, 0.17%)</title><rect x="52.4623%" y="229" width="0.1675%" height="15" fill="rgb(249,21,11)" fg:x="1566" fg:w="5"/><text x="52.7123%" y="239.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.03%)</title><rect x="52.6298%" y="261" width="0.0335%" height="15" fill="rgb(222,201,40)" fg:x="1571" fg:w="1"/><text x="52.8798%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="52.6298%" y="245" width="0.0335%" height="15" fill="rgb(235,61,29)" fg:x="1571" fg:w="1"/><text x="52.8798%" y="255.50"></text></g><g><title>revm::instructions::bitwise::iszero (11 samples, 0.37%)</title><rect x="52.3618%" y="277" width="0.3685%" height="15" fill="rgb(219,207,3)" fg:x="1563" fg:w="11"/><text x="52.6118%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::top_unsafe (2 samples, 0.07%)</title><rect x="52.6633%" y="261" width="0.0670%" height="15" fill="rgb(222,56,46)" fg:x="1572" fg:w="2"/><text x="52.9133%" y="271.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="52.8978%" y="229" width="0.0670%" height="15" fill="rgb(239,76,54)" fg:x="1579" fg:w="2"/><text x="53.1478%" y="239.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (2 samples, 0.07%)</title><rect x="52.8978%" y="213" width="0.0670%" height="15" fill="rgb(231,124,27)" fg:x="1579" fg:w="2"/><text x="53.1478%" y="223.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (2 samples, 0.07%)</title><rect x="52.8978%" y="197" width="0.0670%" height="15" fill="rgb(249,195,6)" fg:x="1579" fg:w="2"/><text x="53.1478%" y="207.50"></text></g><g><title>revm::instructions::bitwise::sgt (8 samples, 0.27%)</title><rect x="52.7303%" y="277" width="0.2680%" height="15" fill="rgb(237,174,47)" fg:x="1574" fg:w="8"/><text x="52.9803%" y="287.50"></text></g><g><title>revm::instructions::i256::i256_cmp (3 samples, 0.10%)</title><rect x="52.8978%" y="261" width="0.1005%" height="15" fill="rgb(206,201,31)" fg:x="1579" fg:w="3"/><text x="53.1478%" y="271.50"></text></g><g><title>revm::instructions::i256::i256_sign (3 samples, 0.10%)</title><rect x="52.8978%" y="245" width="0.1005%" height="15" fill="rgb(231,57,52)" fg:x="1579" fg:w="3"/><text x="53.1478%" y="255.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::bit (1 samples, 0.03%)</title><rect x="52.9648%" y="229" width="0.0335%" height="15" fill="rgb(248,177,22)" fg:x="1581" fg:w="1"/><text x="53.2148%" y="239.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (9 samples, 0.30%)</title><rect x="53.4673%" y="229" width="0.3015%" height="15" fill="rgb(215,211,37)" fg:x="1596" fg:w="9"/><text x="53.7173%" y="239.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (9 samples, 0.30%)</title><rect x="53.4673%" y="213" width="0.3015%" height="15" fill="rgb(241,128,51)" fg:x="1596" fg:w="9"/><text x="53.7173%" y="223.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (9 samples, 0.30%)</title><rect x="53.4673%" y="197" width="0.3015%" height="15" fill="rgb(227,165,31)" fg:x="1596" fg:w="9"/><text x="53.7173%" y="207.50"></text></g><g><title>revm::instructions::i256::i256_cmp (17 samples, 0.57%)</title><rect x="53.2328%" y="261" width="0.5695%" height="15" fill="rgb(228,167,24)" fg:x="1589" fg:w="17"/><text x="53.4828%" y="271.50"></text></g><g><title>revm::instructions::i256::i256_sign (15 samples, 0.50%)</title><rect x="53.2998%" y="245" width="0.5025%" height="15" fill="rgb(228,143,12)" fg:x="1591" fg:w="15"/><text x="53.5498%" y="255.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::bit (1 samples, 0.03%)</title><rect x="53.7688%" y="229" width="0.0335%" height="15" fill="rgb(249,149,8)" fg:x="1605" fg:w="1"/><text x="54.0188%" y="239.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.03%)</title><rect x="53.8023%" y="261" width="0.0335%" height="15" fill="rgb(243,35,44)" fg:x="1606" fg:w="1"/><text x="54.0523%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="53.8023%" y="245" width="0.0335%" height="15" fill="rgb(246,89,9)" fg:x="1606" fg:w="1"/><text x="54.0523%" y="255.50"></text></g><g><title>revm::instructions::bitwise::slt (27 samples, 0.90%)</title><rect x="52.9983%" y="277" width="0.9045%" height="15" fill="rgb(233,213,13)" fg:x="1582" fg:w="27"/><text x="53.2483%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (2 samples, 0.07%)</title><rect x="53.8358%" y="261" width="0.0670%" height="15" fill="rgb(233,141,41)" fg:x="1607" fg:w="2"/><text x="54.0858%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="53.8693%" y="245" width="0.0335%" height="15" fill="rgb(239,167,4)" fg:x="1608" fg:w="1"/><text x="54.1193%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="53.8693%" y="229" width="0.0335%" height="15" fill="rgb(209,217,16)" fg:x="1608" fg:w="1"/><text x="54.1193%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="53.8693%" y="213" width="0.0335%" height="15" fill="rgb(219,88,35)" fg:x="1608" fg:w="1"/><text x="54.1193%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.03%)</title><rect x="53.8693%" y="197" width="0.0335%" height="15" fill="rgb(220,193,23)" fg:x="1608" fg:w="1"/><text x="54.1193%" y="207.50"></text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (7 samples, 0.23%)</title><rect x="54.3719%" y="261" width="0.2345%" height="15" fill="rgb(230,90,52)" fg:x="1623" fg:w="7"/><text x="54.6219%" y="271.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (7 samples, 0.23%)</title><rect x="54.3719%" y="245" width="0.2345%" height="15" fill="rgb(252,106,19)" fg:x="1623" fg:w="7"/><text x="54.6219%" y="255.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump (5 samples, 0.17%)</title><rect x="54.4389%" y="229" width="0.1675%" height="15" fill="rgb(206,74,20)" fg:x="1625" fg:w="5"/><text x="54.6889%" y="239.50"></text></g><g><title>revm::interpreter::stack::Stack::len (4 samples, 0.13%)</title><rect x="54.6064%" y="261" width="0.1340%" height="15" fill="rgb(230,138,44)" fg:x="1630" fg:w="4"/><text x="54.8564%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.13%)</title><rect x="54.6064%" y="245" width="0.1340%" height="15" fill="rgb(235,182,43)" fg:x="1630" fg:w="4"/><text x="54.8564%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.03%)</title><rect x="54.7404%" y="245" width="0.0335%" height="15" fill="rgb(242,16,51)" fg:x="1634" fg:w="1"/><text x="54.9904%" y="255.50"></text></g><g><title>revm::instructions::control::jump (28 samples, 0.94%)</title><rect x="53.9028%" y="277" width="0.9380%" height="15" fill="rgb(248,9,4)" fg:x="1609" fg:w="28"/><text x="54.1528%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (3 samples, 0.10%)</title><rect x="54.7404%" y="261" width="0.1005%" height="15" fill="rgb(210,31,22)" fg:x="1634" fg:w="3"/><text x="54.9904%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (2 samples, 0.07%)</title><rect x="54.7739%" y="245" width="0.0670%" height="15" fill="rgb(239,54,39)" fg:x="1635" fg:w="2"/><text x="55.0239%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.07%)</title><rect x="54.7739%" y="229" width="0.0670%" height="15" fill="rgb(230,99,41)" fg:x="1635" fg:w="2"/><text x="55.0239%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.07%)</title><rect x="54.7739%" y="213" width="0.0670%" height="15" fill="rgb(253,106,12)" fg:x="1635" fg:w="2"/><text x="55.0239%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.07%)</title><rect x="54.7739%" y="197" width="0.0670%" height="15" fill="rgb(213,46,41)" fg:x="1635" fg:w="2"/><text x="55.0239%" y="207.50"></text></g><g><title>revm::gas::Gas::record_cost (24 samples, 0.80%)</title><rect x="54.9749%" y="261" width="0.8040%" height="15" fill="rgb(215,133,35)" fg:x="1641" fg:w="24"/><text x="55.2249%" y="271.50"></text></g><g><title>revm::gas::Gas::record_cost (23 samples, 0.77%)</title><rect x="55.7789%" y="245" width="0.7705%" height="15" fill="rgb(213,28,5)" fg:x="1665" fg:w="23"/><text x="56.0289%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (5 samples, 0.17%)</title><rect x="56.3819%" y="229" width="0.1675%" height="15" fill="rgb(215,77,49)" fg:x="1683" fg:w="5"/><text x="56.6319%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.10%)</title><rect x="56.6499%" y="213" width="0.1005%" height="15" fill="rgb(248,100,22)" fg:x="1691" fg:w="3"/><text x="56.8999%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (3 samples, 0.10%)</title><rect x="56.6499%" y="197" width="0.1005%" height="15" fill="rgb(208,67,9)" fg:x="1691" fg:w="3"/><text x="56.8999%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.10%)</title><rect x="56.6499%" y="181" width="0.1005%" height="15" fill="rgb(219,133,21)" fg:x="1691" fg:w="3"/><text x="56.8999%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="56.7504%" y="213" width="0.0670%" height="15" fill="rgb(246,46,29)" fg:x="1694" fg:w="2"/><text x="57.0004%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="56.7504%" y="197" width="0.0670%" height="15" fill="rgb(246,185,52)" fg:x="1694" fg:w="2"/><text x="57.0004%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="56.7504%" y="181" width="0.0670%" height="15" fill="rgb(252,136,11)" fg:x="1694" fg:w="2"/><text x="57.0004%" y="191.50"></text></g><g><title>revm::instructions::control::jumpdest (62 samples, 2.08%)</title><rect x="54.8409%" y="277" width="2.0771%" height="15" fill="rgb(219,138,53)" fg:x="1637" fg:w="62"/><text x="55.0909%" y="287.50">r..</text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (34 samples, 1.14%)</title><rect x="55.7789%" y="261" width="1.1390%" height="15" fill="rgb(211,51,23)" fg:x="1665" fg:w="34"/><text x="56.0289%" y="271.50"></text></g><g><title>revm::interpreter::contract::Contract::gas_block (11 samples, 0.37%)</title><rect x="56.5494%" y="245" width="0.3685%" height="15" fill="rgb(247,221,28)" fg:x="1688" fg:w="11"/><text x="56.7994%" y="255.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::gas_block (11 samples, 0.37%)</title><rect x="56.5494%" y="229" width="0.3685%" height="15" fill="rgb(251,222,45)" fg:x="1688" fg:w="11"/><text x="56.7994%" y="239.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::gas_block (3 samples, 0.10%)</title><rect x="56.8174%" y="213" width="0.1005%" height="15" fill="rgb(217,162,53)" fg:x="1696" fg:w="3"/><text x="57.0674%" y="223.50"></text></g><g><title>core::cmp::PartialEq::ne (20 samples, 0.67%)</title><rect x="57.8559%" y="261" width="0.6700%" height="15" fill="rgb(229,93,14)" fg:x="1727" fg:w="20"/><text x="58.1059%" y="271.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (20 samples, 0.67%)</title><rect x="57.8559%" y="245" width="0.6700%" height="15" fill="rgb(209,67,49)" fg:x="1727" fg:w="20"/><text x="58.1059%" y="255.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (20 samples, 0.67%)</title><rect x="57.8559%" y="229" width="0.6700%" height="15" fill="rgb(213,87,29)" fg:x="1727" fg:w="20"/><text x="58.1059%" y="239.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (20 samples, 0.67%)</title><rect x="57.8559%" y="213" width="0.6700%" height="15" fill="rgb(205,151,52)" fg:x="1727" fg:w="20"/><text x="58.1059%" y="223.50"></text></g><g><title>revm::gas::Gas::record_cost (2 samples, 0.07%)</title><rect x="58.5260%" y="245" width="0.0670%" height="15" fill="rgb(253,215,39)" fg:x="1747" fg:w="2"/><text x="58.7760%" y="255.50"></text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (3 samples, 0.10%)</title><rect x="58.5260%" y="261" width="0.1005%" height="15" fill="rgb(221,220,41)" fg:x="1747" fg:w="3"/><text x="58.7760%" y="271.50"></text></g><g><title>revm::interpreter::contract::Contract::gas_block (1 samples, 0.03%)</title><rect x="58.5930%" y="245" width="0.0335%" height="15" fill="rgb(218,133,21)" fg:x="1749" fg:w="1"/><text x="58.8430%" y="255.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::gas_block (1 samples, 0.03%)</title><rect x="58.5930%" y="229" width="0.0335%" height="15" fill="rgb(221,193,43)" fg:x="1749" fg:w="1"/><text x="58.8430%" y="239.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::gas_block (1 samples, 0.03%)</title><rect x="58.5930%" y="213" width="0.0335%" height="15" fill="rgb(240,128,52)" fg:x="1749" fg:w="1"/><text x="58.8430%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.10%)</title><rect x="58.6600%" y="229" width="0.1005%" height="15" fill="rgb(253,114,12)" fg:x="1751" fg:w="3"/><text x="58.9100%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (3 samples, 0.10%)</title><rect x="58.6600%" y="213" width="0.1005%" height="15" fill="rgb(215,223,47)" fg:x="1751" fg:w="3"/><text x="58.9100%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.10%)</title><rect x="58.6600%" y="197" width="0.1005%" height="15" fill="rgb(248,225,23)" fg:x="1751" fg:w="3"/><text x="58.9100%" y="207.50"></text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (11 samples, 0.37%)</title><rect x="58.6265%" y="261" width="0.3685%" height="15" fill="rgb(250,108,0)" fg:x="1750" fg:w="11"/><text x="58.8765%" y="271.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (11 samples, 0.37%)</title><rect x="58.6265%" y="245" width="0.3685%" height="15" fill="rgb(228,208,7)" fg:x="1750" fg:w="11"/><text x="58.8765%" y="255.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump (7 samples, 0.23%)</title><rect x="58.7605%" y="229" width="0.2345%" height="15" fill="rgb(244,45,10)" fg:x="1754" fg:w="7"/><text x="59.0105%" y="239.50"></text></g><g><title>revm::interpreter::stack::Stack::len (4 samples, 0.13%)</title><rect x="58.9950%" y="261" width="0.1340%" height="15" fill="rgb(207,125,25)" fg:x="1761" fg:w="4"/><text x="59.2450%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.13%)</title><rect x="58.9950%" y="245" width="0.1340%" height="15" fill="rgb(210,195,18)" fg:x="1761" fg:w="4"/><text x="59.2450%" y="255.50"></text></g><g><title>revm::instructions::control::jumpi (82 samples, 2.75%)</title><rect x="56.9179%" y="277" width="2.7471%" height="15" fill="rgb(249,80,12)" fg:x="1699" fg:w="82"/><text x="57.1679%" y="287.50">re..</text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (16 samples, 0.54%)</title><rect x="59.1290%" y="261" width="0.5360%" height="15" fill="rgb(221,65,9)" fg:x="1765" fg:w="16"/><text x="59.3790%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.03%)</title><rect x="59.6315%" y="245" width="0.0335%" height="15" fill="rgb(235,49,36)" fg:x="1780" fg:w="1"/><text x="59.8815%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.07%)</title><rect x="60.4690%" y="245" width="0.0670%" height="15" fill="rgb(225,32,20)" fg:x="1805" fg:w="2"/><text x="60.7190%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (10 samples, 0.34%)</title><rect x="60.5360%" y="245" width="0.3350%" height="15" fill="rgb(215,141,46)" fg:x="1807" fg:w="10"/><text x="60.7860%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (5 samples, 0.17%)</title><rect x="61.3400%" y="229" width="0.1675%" height="15" fill="rgb(250,160,47)" fg:x="1831" fg:w="5"/><text x="61.5900%" y="239.50"></text></g><g><title>ahash::operations::folded_multiply (8 samples, 0.27%)</title><rect x="61.5075%" y="181" width="0.2680%" height="15" fill="rgb(216,222,40)" fg:x="1836" fg:w="8"/><text x="61.7575%" y="191.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (4 samples, 0.13%)</title><rect x="61.6415%" y="165" width="0.1340%" height="15" fill="rgb(234,217,39)" fg:x="1840" fg:w="4"/><text x="61.8915%" y="175.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (10 samples, 0.34%)</title><rect x="61.5075%" y="197" width="0.3350%" height="15" fill="rgb(207,178,40)" fg:x="1836" fg:w="10"/><text x="61.7575%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="61.7755%" y="181" width="0.0670%" height="15" fill="rgb(221,136,13)" fg:x="1844" fg:w="2"/><text x="62.0255%" y="191.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3 samples, 0.10%)</title><rect x="61.8425%" y="149" width="0.1005%" height="15" fill="rgb(249,199,10)" fg:x="1846" fg:w="3"/><text x="62.0925%" y="159.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (3 samples, 0.10%)</title><rect x="61.8425%" y="133" width="0.1005%" height="15" fill="rgb(249,222,13)" fg:x="1846" fg:w="3"/><text x="62.0925%" y="143.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (3 samples, 0.10%)</title><rect x="61.8425%" y="117" width="0.1005%" height="15" fill="rgb(244,185,38)" fg:x="1846" fg:w="3"/><text x="62.0925%" y="127.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (3 samples, 0.10%)</title><rect x="61.8425%" y="101" width="0.1005%" height="15" fill="rgb(236,202,9)" fg:x="1846" fg:w="3"/><text x="62.0925%" y="111.50"></text></g><g><title>ahash::operations::folded_multiply (3 samples, 0.10%)</title><rect x="61.8425%" y="85" width="0.1005%" height="15" fill="rgb(250,229,37)" fg:x="1846" fg:w="3"/><text x="62.0925%" y="95.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2 samples, 0.07%)</title><rect x="61.8760%" y="69" width="0.0670%" height="15" fill="rgb(206,174,23)" fg:x="1847" fg:w="2"/><text x="62.1260%" y="79.50"></text></g><g><title>hashbrown::map::make_insert_hash (17 samples, 0.57%)</title><rect x="61.5075%" y="213" width="0.5695%" height="15" fill="rgb(211,33,43)" fg:x="1836" fg:w="17"/><text x="61.7575%" y="223.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (7 samples, 0.23%)</title><rect x="61.8425%" y="197" width="0.2345%" height="15" fill="rgb(245,58,50)" fg:x="1846" fg:w="7"/><text x="62.0925%" y="207.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (7 samples, 0.23%)</title><rect x="61.8425%" y="181" width="0.2345%" height="15" fill="rgb(244,68,36)" fg:x="1846" fg:w="7"/><text x="62.0925%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (7 samples, 0.23%)</title><rect x="61.8425%" y="165" width="0.2345%" height="15" fill="rgb(232,229,15)" fg:x="1846" fg:w="7"/><text x="62.0925%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (4 samples, 0.13%)</title><rect x="61.9430%" y="149" width="0.1340%" height="15" fill="rgb(254,30,23)" fg:x="1849" fg:w="4"/><text x="62.1930%" y="159.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="61.9430%" y="133" width="0.1340%" height="15" fill="rgb(235,160,14)" fg:x="1849" fg:w="4"/><text x="62.1930%" y="143.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (4 samples, 0.13%)</title><rect x="61.9430%" y="117" width="0.1340%" height="15" fill="rgb(212,155,44)" fg:x="1849" fg:w="4"/><text x="62.1930%" y="127.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 0.07%)</title><rect x="62.0101%" y="101" width="0.0670%" height="15" fill="rgb(226,2,50)" fg:x="1851" fg:w="2"/><text x="62.2601%" y="111.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.03%)</title><rect x="62.0436%" y="85" width="0.0335%" height="15" fill="rgb(234,177,6)" fg:x="1852" fg:w="1"/><text x="62.2936%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.27%)</title><rect x="62.4456%" y="181" width="0.2680%" height="15" fill="rgb(217,24,9)" fg:x="1864" fg:w="8"/><text x="62.6956%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.27%)</title><rect x="62.4456%" y="165" width="0.2680%" height="15" fill="rgb(220,13,46)" fg:x="1864" fg:w="8"/><text x="62.6956%" y="175.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (43 samples, 1.44%)</title><rect x="62.7136%" y="165" width="1.4405%" height="15" fill="rgb(239,221,27)" fg:x="1872" fg:w="43"/><text x="62.9636%" y="175.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (43 samples, 1.44%)</title><rect x="62.7136%" y="149" width="1.4405%" height="15" fill="rgb(222,198,25)" fg:x="1872" fg:w="43"/><text x="62.9636%" y="159.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (43 samples, 1.44%)</title><rect x="62.7136%" y="133" width="1.4405%" height="15" fill="rgb(211,99,13)" fg:x="1872" fg:w="43"/><text x="62.9636%" y="143.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (43 samples, 1.44%)</title><rect x="62.7136%" y="117" width="1.4405%" height="15" fill="rgb(232,111,31)" fg:x="1872" fg:w="43"/><text x="62.9636%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (46 samples, 1.54%)</title><rect x="62.7136%" y="181" width="1.5410%" height="15" fill="rgb(245,82,37)" fg:x="1872" fg:w="46"/><text x="62.9636%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.10%)</title><rect x="64.1541%" y="165" width="0.1005%" height="15" fill="rgb(227,149,46)" fg:x="1915" fg:w="3"/><text x="64.4041%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.10%)</title><rect x="64.1541%" y="149" width="0.1005%" height="15" fill="rgb(218,36,50)" fg:x="1915" fg:w="3"/><text x="64.4041%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.10%)</title><rect x="64.1541%" y="133" width="0.1005%" height="15" fill="rgb(226,80,48)" fg:x="1915" fg:w="3"/><text x="64.4041%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.10%)</title><rect x="64.1541%" y="117" width="0.1005%" height="15" fill="rgb(238,224,15)" fg:x="1915" fg:w="3"/><text x="64.4041%" y="127.50"></text></g><g><title>hashbrown::raw::h2 (12 samples, 0.40%)</title><rect x="64.2546%" y="181" width="0.4020%" height="15" fill="rgb(241,136,10)" fg:x="1918" fg:w="12"/><text x="64.5046%" y="191.50"></text></g><g><title>hashbrown::raw::likely (1 samples, 0.03%)</title><rect x="64.6566%" y="181" width="0.0335%" height="15" fill="rgb(208,32,45)" fg:x="1930" fg:w="1"/><text x="64.9066%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.17%)</title><rect x="64.6901%" y="181" width="0.1675%" height="15" fill="rgb(207,135,9)" fg:x="1931" fg:w="5"/><text x="64.9401%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.17%)</title><rect x="64.6901%" y="165" width="0.1675%" height="15" fill="rgb(206,86,44)" fg:x="1931" fg:w="5"/><text x="64.9401%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.17%)</title><rect x="64.6901%" y="149" width="0.1675%" height="15" fill="rgb(245,177,15)" fg:x="1931" fg:w="5"/><text x="64.9401%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (109 samples, 3.65%)</title><rect x="61.5075%" y="229" width="3.6516%" height="15" fill="rgb(206,64,50)" fg:x="1836" fg:w="109"/><text x="61.7575%" y="239.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (92 samples, 3.08%)</title><rect x="62.0771%" y="213" width="3.0821%" height="15" fill="rgb(234,36,40)" fg:x="1853" fg:w="92"/><text x="62.3271%" y="223.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (92 samples, 3.08%)</title><rect x="62.0771%" y="197" width="3.0821%" height="15" fill="rgb(213,64,8)" fg:x="1853" fg:w="92"/><text x="62.3271%" y="207.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.30%)</title><rect x="64.8576%" y="181" width="0.3015%" height="15" fill="rgb(210,75,36)" fg:x="1936" fg:w="9"/><text x="65.1076%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.30%)</title><rect x="64.8576%" y="165" width="0.3015%" height="15" fill="rgb(229,88,21)" fg:x="1936" fg:w="9"/><text x="65.1076%" y="175.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="65.3936%" y="181" width="0.0335%" height="15" fill="rgb(252,204,47)" fg:x="1952" fg:w="1"/><text x="65.6436%" y="191.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (1 samples, 0.03%)</title><rect x="65.3936%" y="165" width="0.0335%" height="15" fill="rgb(208,77,27)" fg:x="1952" fg:w="1"/><text x="65.6436%" y="175.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.07%)</title><rect x="65.4271%" y="117" width="0.0670%" height="15" fill="rgb(221,76,26)" fg:x="1953" fg:w="2"/><text x="65.6771%" y="127.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (2 samples, 0.07%)</title><rect x="65.4271%" y="101" width="0.0670%" height="15" fill="rgb(225,139,18)" fg:x="1953" fg:w="2"/><text x="65.6771%" y="111.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (2 samples, 0.07%)</title><rect x="65.4271%" y="85" width="0.0670%" height="15" fill="rgb(230,137,11)" fg:x="1953" fg:w="2"/><text x="65.6771%" y="95.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2 samples, 0.07%)</title><rect x="65.4271%" y="69" width="0.0670%" height="15" fill="rgb(212,28,1)" fg:x="1953" fg:w="2"/><text x="65.6771%" y="79.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 0.07%)</title><rect x="65.4271%" y="53" width="0.0670%" height="15" fill="rgb(248,164,17)" fg:x="1953" fg:w="2"/><text x="65.6771%" y="63.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.03%)</title><rect x="65.4606%" y="37" width="0.0335%" height="15" fill="rgb(222,171,42)" fg:x="1954" fg:w="1"/><text x="65.7106%" y="47.50"></text></g><g><title>&lt;[u8] as ahash::convert::ReadFromSlice&gt;::read_last_u128 (1 samples, 0.03%)</title><rect x="65.4941%" y="85" width="0.0335%" height="15" fill="rgb(243,84,45)" fg:x="1955" fg:w="1"/><text x="65.7441%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.47%)</title><rect x="65.3936%" y="197" width="0.4690%" height="15" fill="rgb(252,49,23)" fg:x="1952" fg:w="14"/><text x="65.6436%" y="207.50"></text></g><g><title>&lt;ruint::bit_arr::Bits&lt;_,_&gt; as core::hash::Hash&gt;::hash (13 samples, 0.44%)</title><rect x="65.4271%" y="181" width="0.4355%" height="15" fill="rgb(215,19,7)" fg:x="1953" fg:w="13"/><text x="65.6771%" y="191.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (13 samples, 0.44%)</title><rect x="65.4271%" y="165" width="0.4355%" height="15" fill="rgb(238,81,41)" fg:x="1953" fg:w="13"/><text x="65.6771%" y="175.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (13 samples, 0.44%)</title><rect x="65.4271%" y="149" width="0.4355%" height="15" fill="rgb(210,199,37)" fg:x="1953" fg:w="13"/><text x="65.6771%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (13 samples, 0.44%)</title><rect x="65.4271%" y="133" width="0.4355%" height="15" fill="rgb(244,192,49)" fg:x="1953" fg:w="13"/><text x="65.6771%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (11 samples, 0.37%)</title><rect x="65.4941%" y="117" width="0.3685%" height="15" fill="rgb(226,211,11)" fg:x="1955" fg:w="11"/><text x="65.7441%" y="127.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (11 samples, 0.37%)</title><rect x="65.4941%" y="101" width="0.3685%" height="15" fill="rgb(236,162,54)" fg:x="1955" fg:w="11"/><text x="65.7441%" y="111.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (10 samples, 0.34%)</title><rect x="65.5276%" y="85" width="0.3350%" height="15" fill="rgb(220,229,9)" fg:x="1956" fg:w="10"/><text x="65.7776%" y="95.50"></text></g><g><title>ahash::operations::folded_multiply (7 samples, 0.23%)</title><rect x="65.6281%" y="69" width="0.2345%" height="15" fill="rgb(250,87,22)" fg:x="1959" fg:w="7"/><text x="65.8781%" y="79.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (5 samples, 0.17%)</title><rect x="65.6951%" y="53" width="0.1675%" height="15" fill="rgb(239,43,17)" fg:x="1961" fg:w="5"/><text x="65.9451%" y="63.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.20%)</title><rect x="65.8961%" y="149" width="0.2010%" height="15" fill="rgb(231,177,25)" fg:x="1967" fg:w="6"/><text x="66.1461%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.13%)</title><rect x="65.9631%" y="133" width="0.1340%" height="15" fill="rgb(219,179,1)" fg:x="1969" fg:w="4"/><text x="66.2131%" y="143.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (20 samples, 0.67%)</title><rect x="66.0972%" y="133" width="0.6700%" height="15" fill="rgb(238,219,53)" fg:x="1973" fg:w="20"/><text x="66.3472%" y="143.50"></text></g><g><title>&lt;ruint::bit_arr::Bits&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (20 samples, 0.67%)</title><rect x="66.0972%" y="117" width="0.6700%" height="15" fill="rgb(232,167,36)" fg:x="1973" fg:w="20"/><text x="66.3472%" y="127.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (20 samples, 0.67%)</title><rect x="66.0972%" y="101" width="0.6700%" height="15" fill="rgb(244,19,51)" fg:x="1973" fg:w="20"/><text x="66.3472%" y="111.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (20 samples, 0.67%)</title><rect x="66.0972%" y="85" width="0.6700%" height="15" fill="rgb(224,6,22)" fg:x="1973" fg:w="20"/><text x="66.3472%" y="95.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (20 samples, 0.67%)</title><rect x="66.0972%" y="69" width="0.6700%" height="15" fill="rgb(224,145,5)" fg:x="1973" fg:w="20"/><text x="66.3472%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (22 samples, 0.74%)</title><rect x="66.0972%" y="149" width="0.7370%" height="15" fill="rgb(234,130,49)" fg:x="1973" fg:w="22"/><text x="66.3472%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.07%)</title><rect x="66.7672%" y="133" width="0.0670%" height="15" fill="rgb(254,6,2)" fg:x="1993" fg:w="2"/><text x="67.0172%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="66.7672%" y="117" width="0.0670%" height="15" fill="rgb(208,96,46)" fg:x="1993" fg:w="2"/><text x="67.0172%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="66.7672%" y="101" width="0.0670%" height="15" fill="rgb(239,3,39)" fg:x="1993" fg:w="2"/><text x="67.0172%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="66.7672%" y="85" width="0.0670%" height="15" fill="rgb(233,210,1)" fg:x="1993" fg:w="2"/><text x="67.0172%" y="95.50"></text></g><g><title>hashbrown::raw::h2 (5 samples, 0.17%)</title><rect x="66.8342%" y="149" width="0.1675%" height="15" fill="rgb(244,137,37)" fg:x="1995" fg:w="5"/><text x="67.0842%" y="159.50"></text></g><g><title>hashbrown::raw::likely (2 samples, 0.07%)</title><rect x="67.0017%" y="149" width="0.0670%" height="15" fill="rgb(240,136,2)" fg:x="2000" fg:w="2"/><text x="67.2517%" y="159.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (222 samples, 7.44%)</title><rect x="59.6985%" y="261" width="7.4372%" height="15" fill="rgb(239,18,37)" fg:x="1782" fg:w="222"/><text x="59.9485%" y="271.50">&lt;revm::evm..</text></g><g><title>revm::journaled_state::JournaledState::sload (187 samples, 6.26%)</title><rect x="60.8710%" y="245" width="6.2647%" height="15" fill="rgb(218,185,22)" fg:x="1817" fg:w="187"/><text x="61.1210%" y="255.50">revm::jo..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (59 samples, 1.98%)</title><rect x="65.1591%" y="229" width="1.9765%" height="15" fill="rgb(225,218,4)" fg:x="1945" fg:w="59"/><text x="65.4091%" y="239.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (54 samples, 1.81%)</title><rect x="65.3266%" y="213" width="1.8090%" height="15" fill="rgb(230,182,32)" fg:x="1950" fg:w="54"/><text x="65.5766%" y="223.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (38 samples, 1.27%)</title><rect x="65.8626%" y="197" width="1.2730%" height="15" fill="rgb(242,56,43)" fg:x="1966" fg:w="38"/><text x="66.1126%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (38 samples, 1.27%)</title><rect x="65.8626%" y="181" width="1.2730%" height="15" fill="rgb(233,99,24)" fg:x="1966" fg:w="38"/><text x="66.1126%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (38 samples, 1.27%)</title><rect x="65.8626%" y="165" width="1.2730%" height="15" fill="rgb(234,209,42)" fg:x="1966" fg:w="38"/><text x="66.1126%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.07%)</title><rect x="67.0687%" y="149" width="0.0670%" height="15" fill="rgb(227,7,12)" fg:x="2002" fg:w="2"/><text x="67.3187%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.07%)</title><rect x="67.0687%" y="133" width="0.0670%" height="15" fill="rgb(245,203,43)" fg:x="2002" fg:w="2"/><text x="67.3187%" y="143.50"></text></g><g><title>revm::gas::Gas::record_cost (8 samples, 0.27%)</title><rect x="67.1357%" y="261" width="0.2680%" height="15" fill="rgb(238,205,33)" fg:x="2004" fg:w="8"/><text x="67.3857%" y="271.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.03%)</title><rect x="67.4037%" y="261" width="0.0335%" height="15" fill="rgb(231,56,7)" fg:x="2012" fg:w="1"/><text x="67.6537%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="67.4037%" y="245" width="0.0335%" height="15" fill="rgb(244,186,29)" fg:x="2012" fg:w="1"/><text x="67.6537%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.03%)</title><rect x="67.4372%" y="245" width="0.0335%" height="15" fill="rgb(234,111,31)" fg:x="2013" fg:w="1"/><text x="67.6872%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (4 samples, 0.13%)</title><rect x="67.4372%" y="261" width="0.1340%" height="15" fill="rgb(241,149,10)" fg:x="2013" fg:w="4"/><text x="67.6872%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (3 samples, 0.10%)</title><rect x="67.4707%" y="245" width="0.1005%" height="15" fill="rgb(249,206,44)" fg:x="2014" fg:w="3"/><text x="67.7207%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.10%)</title><rect x="67.4707%" y="229" width="0.1005%" height="15" fill="rgb(251,153,30)" fg:x="2014" fg:w="3"/><text x="67.7207%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.10%)</title><rect x="67.4707%" y="213" width="0.1005%" height="15" fill="rgb(239,152,38)" fg:x="2014" fg:w="3"/><text x="67.7207%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 0.10%)</title><rect x="67.4707%" y="197" width="0.1005%" height="15" fill="rgb(249,139,47)" fg:x="2014" fg:w="3"/><text x="67.7207%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="67.5712%" y="229" width="0.0335%" height="15" fill="rgb(244,64,35)" fg:x="2017" fg:w="1"/><text x="67.8212%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="67.5712%" y="213" width="0.0335%" height="15" fill="rgb(216,46,15)" fg:x="2017" fg:w="1"/><text x="67.8212%" y="223.50"></text></g><g><title>revm::instructions::host::sload (239 samples, 8.01%)</title><rect x="59.6650%" y="277" width="8.0067%" height="15" fill="rgb(250,74,19)" fg:x="1781" fg:w="239"/><text x="59.9150%" y="287.50">revm::instr..</text></g><g><title>revm::interpreter::stack::Stack::push (3 samples, 0.10%)</title><rect x="67.5712%" y="261" width="0.1005%" height="15" fill="rgb(249,42,33)" fg:x="2017" fg:w="3"/><text x="67.8212%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.10%)</title><rect x="67.5712%" y="245" width="0.1005%" height="15" fill="rgb(242,149,17)" fg:x="2017" fg:w="3"/><text x="67.8212%" y="255.50"></text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="67.6047%" y="229" width="0.0670%" height="15" fill="rgb(244,29,21)" fg:x="2018" fg:w="2"/><text x="67.8547%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="67.6717%" y="229" width="0.0335%" height="15" fill="rgb(220,130,37)" fg:x="2020" fg:w="1"/><text x="67.9217%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.07%)</title><rect x="67.7052%" y="197" width="0.0670%" height="15" fill="rgb(211,67,2)" fg:x="2021" fg:w="2"/><text x="67.9552%" y="207.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (2 samples, 0.07%)</title><rect x="67.7052%" y="181" width="0.0670%" height="15" fill="rgb(235,68,52)" fg:x="2021" fg:w="2"/><text x="67.9552%" y="191.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 0.07%)</title><rect x="67.7052%" y="165" width="0.0670%" height="15" fill="rgb(246,142,3)" fg:x="2021" fg:w="2"/><text x="67.9552%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.07%)</title><rect x="67.7052%" y="149" width="0.0670%" height="15" fill="rgb(241,25,7)" fg:x="2021" fg:w="2"/><text x="67.9552%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (2 samples, 0.07%)</title><rect x="67.7052%" y="133" width="0.0670%" height="15" fill="rgb(242,119,39)" fg:x="2021" fg:w="2"/><text x="67.9552%" y="143.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="67.7052%" y="117" width="0.0670%" height="15" fill="rgb(241,98,45)" fg:x="2021" fg:w="2"/><text x="67.9552%" y="127.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (2 samples, 0.07%)</title><rect x="67.7052%" y="101" width="0.0670%" height="15" fill="rgb(254,28,30)" fg:x="2021" fg:w="2"/><text x="67.9552%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="67.7387%" y="85" width="0.0335%" height="15" fill="rgb(241,142,54)" fg:x="2022" fg:w="1"/><text x="67.9887%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3 samples, 0.10%)</title><rect x="67.7052%" y="229" width="0.1005%" height="15" fill="rgb(222,85,15)" fg:x="2021" fg:w="3"/><text x="67.9552%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3 samples, 0.10%)</title><rect x="67.7052%" y="213" width="0.1005%" height="15" fill="rgb(210,85,47)" fg:x="2021" fg:w="3"/><text x="67.9552%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="67.7722%" y="197" width="0.0335%" height="15" fill="rgb(224,206,25)" fg:x="2023" fg:w="1"/><text x="68.0222%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="67.7722%" y="181" width="0.0335%" height="15" fill="rgb(243,201,19)" fg:x="2023" fg:w="1"/><text x="68.0222%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.03%)</title><rect x="67.7722%" y="165" width="0.0335%" height="15" fill="rgb(236,59,4)" fg:x="2023" fg:w="1"/><text x="68.0222%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (1 samples, 0.03%)</title><rect x="67.8392%" y="213" width="0.0335%" height="15" fill="rgb(254,179,45)" fg:x="2025" fg:w="1"/><text x="68.0892%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="67.8392%" y="197" width="0.0335%" height="15" fill="rgb(226,14,10)" fg:x="2025" fg:w="1"/><text x="68.0892%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.03%)</title><rect x="67.8392%" y="181" width="0.0335%" height="15" fill="rgb(244,27,41)" fg:x="2025" fg:w="1"/><text x="68.0892%" y="191.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="67.8392%" y="165" width="0.0335%" height="15" fill="rgb(235,35,32)" fg:x="2025" fg:w="1"/><text x="68.0892%" y="175.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sstore (7 samples, 0.23%)</title><rect x="67.6717%" y="261" width="0.2345%" height="15" fill="rgb(218,68,31)" fg:x="2020" fg:w="7"/><text x="67.9217%" y="271.50"></text></g><g><title>revm::journaled_state::JournaledState::sstore (7 samples, 0.23%)</title><rect x="67.6717%" y="245" width="0.2345%" height="15" fill="rgb(207,120,37)" fg:x="2020" fg:w="7"/><text x="67.9217%" y="255.50"></text></g><g><title>revm::journaled_state::JournaledState::sload (3 samples, 0.10%)</title><rect x="67.8057%" y="229" width="0.1005%" height="15" fill="rgb(227,98,0)" fg:x="2024" fg:w="3"/><text x="68.0557%" y="239.50"></text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="67.8727%" y="213" width="0.0335%" height="15" fill="rgb(207,7,3)" fg:x="2026" fg:w="1"/><text x="68.1227%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_entry (1 samples, 0.03%)</title><rect x="67.8727%" y="197" width="0.0335%" height="15" fill="rgb(206,98,19)" fg:x="2026" fg:w="1"/><text x="68.1227%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.03%)</title><rect x="67.8727%" y="181" width="0.0335%" height="15" fill="rgb(217,5,26)" fg:x="2026" fg:w="1"/><text x="68.1227%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="67.8727%" y="165" width="0.0335%" height="15" fill="rgb(235,190,38)" fg:x="2026" fg:w="1"/><text x="68.1227%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="67.8727%" y="149" width="0.0335%" height="15" fill="rgb(247,86,24)" fg:x="2026" fg:w="1"/><text x="68.1227%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.03%)</title><rect x="67.8727%" y="133" width="0.0335%" height="15" fill="rgb(205,101,16)" fg:x="2026" fg:w="1"/><text x="68.1227%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.03%)</title><rect x="67.8727%" y="117" width="0.0335%" height="15" fill="rgb(246,168,33)" fg:x="2026" fg:w="1"/><text x="68.1227%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="67.8727%" y="101" width="0.0335%" height="15" fill="rgb(231,114,1)" fg:x="2026" fg:w="1"/><text x="68.1227%" y="111.50"></text></g><g><title>revm::instructions::host::sstore (8 samples, 0.27%)</title><rect x="67.6717%" y="277" width="0.2680%" height="15" fill="rgb(207,184,53)" fg:x="2020" fg:w="8"/><text x="67.9217%" y="287.50"></text></g><g><title>revm::gas::calc::sstore_cost (1 samples, 0.03%)</title><rect x="67.9062%" y="261" width="0.0335%" height="15" fill="rgb(224,95,51)" fg:x="2027" fg:w="1"/><text x="68.1562%" y="271.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="67.9062%" y="245" width="0.0335%" height="15" fill="rgb(212,188,45)" fg:x="2027" fg:w="1"/><text x="68.1562%" y="255.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.03%)</title><rect x="67.9062%" y="229" width="0.0335%" height="15" fill="rgb(223,154,38)" fg:x="2027" fg:w="1"/><text x="68.1562%" y="239.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.03%)</title><rect x="67.9062%" y="213" width="0.0335%" height="15" fill="rgb(251,22,52)" fg:x="2027" fg:w="1"/><text x="68.1562%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (4 samples, 0.13%)</title><rect x="69.1792%" y="261" width="0.1340%" height="15" fill="rgb(229,209,22)" fg:x="2065" fg:w="4"/><text x="69.4292%" y="271.50"></text></g><g><title>revm::interpreter::memory::Memory::get_slice (4 samples, 0.13%)</title><rect x="69.3132%" y="261" width="0.1340%" height="15" fill="rgb(234,138,34)" fg:x="2069" fg:w="4"/><text x="69.5632%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.13%)</title><rect x="69.3132%" y="245" width="0.1340%" height="15" fill="rgb(212,95,11)" fg:x="2069" fg:w="4"/><text x="69.5632%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.13%)</title><rect x="69.3132%" y="229" width="0.1340%" height="15" fill="rgb(240,179,47)" fg:x="2069" fg:w="4"/><text x="69.5632%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.13%)</title><rect x="69.3132%" y="213" width="0.1340%" height="15" fill="rgb(240,163,11)" fg:x="2069" fg:w="4"/><text x="69.5632%" y="223.50"></text></g><g><title>revm::interpreter::memory::Memory::len (7 samples, 0.23%)</title><rect x="69.4472%" y="261" width="0.2345%" height="15" fill="rgb(236,37,12)" fg:x="2073" fg:w="7"/><text x="69.6972%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (7 samples, 0.23%)</title><rect x="69.4472%" y="245" width="0.2345%" height="15" fill="rgb(232,164,16)" fg:x="2073" fg:w="7"/><text x="69.6972%" y="255.50"></text></g><g><title>&lt;usize as core::ops::bit::BitAnd&gt;::bitand (2 samples, 0.07%)</title><rect x="69.6817%" y="245" width="0.0670%" height="15" fill="rgb(244,205,15)" fg:x="2080" fg:w="2"/><text x="69.9317%" y="255.50"></text></g><g><title>revm::interpreter::memory::next_multiple_of_32 (6 samples, 0.20%)</title><rect x="69.6817%" y="261" width="0.2010%" height="15" fill="rgb(223,117,47)" fg:x="2080" fg:w="6"/><text x="69.9317%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (4 samples, 0.13%)</title><rect x="69.7487%" y="245" width="0.1340%" height="15" fill="rgb(244,107,35)" fg:x="2082" fg:w="4"/><text x="69.9987%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::len (4 samples, 0.13%)</title><rect x="69.8827%" y="261" width="0.1340%" height="15" fill="rgb(205,140,8)" fg:x="2086" fg:w="4"/><text x="70.1327%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.13%)</title><rect x="69.8827%" y="245" width="0.1340%" height="15" fill="rgb(228,84,46)" fg:x="2086" fg:w="4"/><text x="70.1327%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (7 samples, 0.23%)</title><rect x="70.0168%" y="261" width="0.2345%" height="15" fill="rgb(254,188,9)" fg:x="2090" fg:w="7"/><text x="70.2668%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.07%)</title><rect x="70.1843%" y="245" width="0.0670%" height="15" fill="rgb(206,112,54)" fg:x="2095" fg:w="2"/><text x="70.4343%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="70.2848%" y="245" width="0.0335%" height="15" fill="rgb(216,84,49)" fg:x="2098" fg:w="1"/><text x="70.5348%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="70.3853%" y="229" width="0.0335%" height="15" fill="rgb(214,194,35)" fg:x="2101" fg:w="1"/><text x="70.6353%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="70.3853%" y="213" width="0.0335%" height="15" fill="rgb(249,28,3)" fg:x="2101" fg:w="1"/><text x="70.6353%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="70.4188%" y="229" width="0.0335%" height="15" fill="rgb(222,56,52)" fg:x="2102" fg:w="1"/><text x="70.6688%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="70.4188%" y="213" width="0.0335%" height="15" fill="rgb(245,217,50)" fg:x="2102" fg:w="1"/><text x="70.6688%" y="223.50"></text></g><g><title>revm::instructions::memory::mload (87 samples, 2.91%)</title><rect x="67.9397%" y="277" width="2.9146%" height="15" fill="rgb(213,201,24)" fg:x="2028" fg:w="87"/><text x="68.1897%" y="287.50">re..</text></g><g><title>revm::interpreter::stack::Stack::push (18 samples, 0.60%)</title><rect x="70.2513%" y="261" width="0.6030%" height="15" fill="rgb(248,116,28)" fg:x="2097" fg:w="18"/><text x="70.5013%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.54%)</title><rect x="70.3183%" y="245" width="0.5360%" height="15" fill="rgb(219,72,43)" fg:x="2099" fg:w="16"/><text x="70.5683%" y="255.50"></text></g><g><title>core::ptr::write (12 samples, 0.40%)</title><rect x="70.4523%" y="229" width="0.4020%" height="15" fill="rgb(209,138,14)" fg:x="2103" fg:w="12"/><text x="70.7023%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (2 samples, 0.07%)</title><rect x="71.6918%" y="261" width="0.0670%" height="15" fill="rgb(222,18,33)" fg:x="2140" fg:w="2"/><text x="71.9418%" y="271.50"></text></g><g><title>revm::gas::Gas::record_memory (12 samples, 0.40%)</title><rect x="71.7588%" y="261" width="0.4020%" height="15" fill="rgb(213,199,7)" fg:x="2142" fg:w="12"/><text x="72.0088%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (5 samples, 0.17%)</title><rect x="71.9933%" y="245" width="0.1675%" height="15" fill="rgb(250,110,10)" fg:x="2149" fg:w="5"/><text x="72.2433%" y="255.50"></text></g><g><title>revm::gas::calc::memory_gas (10 samples, 0.34%)</title><rect x="72.1608%" y="261" width="0.3350%" height="15" fill="rgb(248,123,6)" fg:x="2154" fg:w="10"/><text x="72.4108%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::saturating_mul (10 samples, 0.34%)</title><rect x="72.1608%" y="245" width="0.3350%" height="15" fill="rgb(206,91,31)" fg:x="2154" fg:w="10"/><text x="72.4108%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_mul (8 samples, 0.27%)</title><rect x="72.2278%" y="229" width="0.2680%" height="15" fill="rgb(211,154,13)" fg:x="2156" fg:w="8"/><text x="72.4778%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_mul (8 samples, 0.27%)</title><rect x="72.2278%" y="213" width="0.2680%" height="15" fill="rgb(225,148,7)" fg:x="2156" fg:w="8"/><text x="72.4778%" y="223.50"></text></g><g><title>revm::interpreter::memory::Memory::len (1 samples, 0.03%)</title><rect x="72.4958%" y="261" width="0.0335%" height="15" fill="rgb(220,160,43)" fg:x="2164" fg:w="1"/><text x="72.7458%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="72.4958%" y="245" width="0.0335%" height="15" fill="rgb(213,52,39)" fg:x="2164" fg:w="1"/><text x="72.7458%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="72.6633%" y="213" width="0.0335%" height="15" fill="rgb(243,137,7)" fg:x="2169" fg:w="1"/><text x="72.9133%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="72.6633%" y="197" width="0.0335%" height="15" fill="rgb(230,79,13)" fg:x="2169" fg:w="1"/><text x="72.9133%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.17%)</title><rect x="72.6968%" y="213" width="0.1675%" height="15" fill="rgb(247,105,23)" fg:x="2170" fg:w="5"/><text x="72.9468%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.17%)</title><rect x="72.6968%" y="197" width="0.1675%" height="15" fill="rgb(223,179,41)" fg:x="2170" fg:w="5"/><text x="72.9468%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (5 samples, 0.17%)</title><rect x="72.6968%" y="181" width="0.1675%" height="15" fill="rgb(218,9,34)" fg:x="2170" fg:w="5"/><text x="72.9468%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.07%)</title><rect x="72.7973%" y="165" width="0.0670%" height="15" fill="rgb(222,106,8)" fg:x="2173" fg:w="2"/><text x="73.0473%" y="175.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.23%)</title><rect x="72.8643%" y="213" width="0.2345%" height="15" fill="rgb(211,220,0)" fg:x="2175" fg:w="7"/><text x="73.1143%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7 samples, 0.23%)</title><rect x="72.8643%" y="197" width="0.2345%" height="15" fill="rgb(229,52,16)" fg:x="2175" fg:w="7"/><text x="73.1143%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3 samples, 0.10%)</title><rect x="72.9983%" y="181" width="0.1005%" height="15" fill="rgb(212,155,18)" fg:x="2179" fg:w="3"/><text x="73.2483%" y="191.50"></text></g><g><title>revm::interpreter::memory::Memory::resize (43 samples, 1.44%)</title><rect x="72.5293%" y="261" width="1.4405%" height="15" fill="rgb(242,21,14)" fg:x="2165" fg:w="43"/><text x="72.7793%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (43 samples, 1.44%)</title><rect x="72.5293%" y="245" width="1.4405%" height="15" fill="rgb(222,19,48)" fg:x="2165" fg:w="43"/><text x="72.7793%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (39 samples, 1.31%)</title><rect x="72.6633%" y="229" width="1.3065%" height="15" fill="rgb(232,45,27)" fg:x="2169" fg:w="39"/><text x="72.9133%" y="239.50"></text></g><g><title>core::ptr::write (26 samples, 0.87%)</title><rect x="73.0988%" y="213" width="0.8710%" height="15" fill="rgb(249,103,42)" fg:x="2182" fg:w="26"/><text x="73.3488%" y="223.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.70%)</title><rect x="73.2663%" y="197" width="0.7035%" height="15" fill="rgb(246,81,33)" fg:x="2187" fg:w="21"/><text x="73.5163%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="73.9363%" y="181" width="0.0335%" height="15" fill="rgb(252,33,42)" fg:x="2207" fg:w="1"/><text x="74.1863%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="73.9363%" y="165" width="0.0335%" height="15" fill="rgb(209,212,41)" fg:x="2207" fg:w="1"/><text x="74.1863%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="73.9363%" y="149" width="0.0335%" height="15" fill="rgb(207,154,6)" fg:x="2207" fg:w="1"/><text x="74.1863%" y="159.50"></text></g><g><title>revm::interpreter::memory::Memory::set_u256 (40 samples, 1.34%)</title><rect x="73.9698%" y="261" width="1.3400%" height="15" fill="rgb(223,64,47)" fg:x="2208" fg:w="40"/><text x="74.2198%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (38 samples, 1.27%)</title><rect x="74.0369%" y="245" width="1.2730%" height="15" fill="rgb(211,161,38)" fg:x="2210" fg:w="38"/><text x="74.2869%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 1.27%)</title><rect x="74.0369%" y="229" width="1.2730%" height="15" fill="rgb(219,138,40)" fg:x="2210" fg:w="38"/><text x="74.2869%" y="239.50"></text></g><g><title>&lt;usize as core::ops::bit::BitAnd&gt;::bitand (6 samples, 0.20%)</title><rect x="75.3099%" y="245" width="0.2010%" height="15" fill="rgb(241,228,46)" fg:x="2248" fg:w="6"/><text x="75.5599%" y="255.50"></text></g><g><title>revm::interpreter::memory::next_multiple_of_32 (9 samples, 0.30%)</title><rect x="75.3099%" y="261" width="0.3015%" height="15" fill="rgb(223,209,38)" fg:x="2248" fg:w="9"/><text x="75.5599%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (3 samples, 0.10%)</title><rect x="75.5109%" y="245" width="0.1005%" height="15" fill="rgb(236,164,45)" fg:x="2254" fg:w="3"/><text x="75.7609%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::len (2 samples, 0.07%)</title><rect x="75.6114%" y="261" width="0.0670%" height="15" fill="rgb(231,15,5)" fg:x="2257" fg:w="2"/><text x="75.8614%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.07%)</title><rect x="75.6114%" y="245" width="0.0670%" height="15" fill="rgb(252,35,15)" fg:x="2257" fg:w="2"/><text x="75.8614%" y="255.50"></text></g><g><title>revm::instructions::memory::mstore (146 samples, 4.89%)</title><rect x="70.8543%" y="277" width="4.8911%" height="15" fill="rgb(248,181,18)" fg:x="2115" fg:w="146"/><text x="71.1043%" y="287.50">revm::..</text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (2 samples, 0.07%)</title><rect x="75.6784%" y="261" width="0.0670%" height="15" fill="rgb(233,39,42)" fg:x="2259" fg:w="2"/><text x="75.9284%" y="271.50"></text></g><g><title>revm::instructions::stack::dup (159 samples, 5.33%)</title><rect x="75.7454%" y="277" width="5.3266%" height="15" fill="rgb(238,110,33)" fg:x="2261" fg:w="159"/><text x="75.9954%" y="287.50">revm::i..</text></g><g><title>revm::interpreter::stack::Stack::dup (159 samples, 5.33%)</title><rect x="75.7454%" y="261" width="5.3266%" height="15" fill="rgb(233,195,10)" fg:x="2261" fg:w="159"/><text x="75.9954%" y="271.50">revm::i..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (31 samples, 1.04%)</title><rect x="80.0335%" y="245" width="1.0385%" height="15" fill="rgb(254,105,3)" fg:x="2389" fg:w="31"/><text x="80.2835%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (8 samples, 0.27%)</title><rect x="81.3735%" y="245" width="0.2680%" height="15" fill="rgb(221,225,9)" fg:x="2429" fg:w="8"/><text x="81.6235%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="229" width="0.1675%" height="15" fill="rgb(224,227,45)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="213" width="0.1675%" height="15" fill="rgb(229,198,43)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="197" width="0.1675%" height="15" fill="rgb(206,209,35)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="181" width="0.1675%" height="15" fill="rgb(245,195,53)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="165" width="0.1675%" height="15" fill="rgb(240,92,26)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="149" width="0.1675%" height="15" fill="rgb(207,40,23)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="133" width="0.1675%" height="15" fill="rgb(223,111,35)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="117" width="0.1675%" height="15" fill="rgb(229,147,28)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="101" width="0.1675%" height="15" fill="rgb(211,29,28)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="85" width="0.1675%" height="15" fill="rgb(228,72,33)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="69" width="0.1675%" height="15" fill="rgb(205,214,31)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="79.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="53" width="0.1675%" height="15" fill="rgb(224,111,15)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="63.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="81.4740%" y="37" width="0.1675%" height="15" fill="rgb(253,21,26)" fg:x="2432" fg:w="5"/><text x="81.7240%" y="47.50"></text></g><g><title>revm::instructions::stack::pop (19 samples, 0.64%)</title><rect x="81.0720%" y="277" width="0.6365%" height="15" fill="rgb(245,139,43)" fg:x="2420" fg:w="19"/><text x="81.3220%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::reduce_one (19 samples, 0.64%)</title><rect x="81.0720%" y="261" width="0.6365%" height="15" fill="rgb(252,170,7)" fg:x="2420" fg:w="19"/><text x="81.3220%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.07%)</title><rect x="81.6415%" y="245" width="0.0670%" height="15" fill="rgb(231,118,14)" fg:x="2437" fg:w="2"/><text x="81.8915%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.13%)</title><rect x="82.0436%" y="261" width="0.1340%" height="15" fill="rgb(238,83,0)" fg:x="2449" fg:w="4"/><text x="82.2936%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (4 samples, 0.13%)</title><rect x="82.0436%" y="245" width="0.1340%" height="15" fill="rgb(221,39,39)" fg:x="2449" fg:w="4"/><text x="82.2936%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (26 samples, 0.87%)</title><rect x="84.6231%" y="245" width="0.8710%" height="15" fill="rgb(222,119,46)" fg:x="2526" fg:w="26"/><text x="84.8731%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (7 samples, 0.23%)</title><rect x="85.4941%" y="245" width="0.2345%" height="15" fill="rgb(222,165,49)" fg:x="2552" fg:w="7"/><text x="85.7441%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (4 samples, 0.13%)</title><rect x="85.7286%" y="245" width="0.1340%" height="15" fill="rgb(219,113,52)" fg:x="2559" fg:w="4"/><text x="85.9786%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (4 samples, 0.13%)</title><rect x="85.7286%" y="229" width="0.1340%" height="15" fill="rgb(214,7,15)" fg:x="2559" fg:w="4"/><text x="85.9786%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (4 samples, 0.13%)</title><rect x="85.7286%" y="213" width="0.1340%" height="15" fill="rgb(235,32,4)" fg:x="2559" fg:w="4"/><text x="85.9786%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (5 samples, 0.17%)</title><rect x="85.8626%" y="245" width="0.1675%" height="15" fill="rgb(238,90,54)" fg:x="2563" fg:w="5"/><text x="86.1126%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.17%)</title><rect x="85.8626%" y="229" width="0.1675%" height="15" fill="rgb(213,208,19)" fg:x="2563" fg:w="5"/><text x="86.1126%" y="239.50"></text></g><g><title>revm::instructions::stack::push (134 samples, 4.49%)</title><rect x="81.7085%" y="277" width="4.4891%" height="15" fill="rgb(233,156,4)" fg:x="2439" fg:w="134"/><text x="81.9585%" y="287.50">revm:..</text></g><g><title>revm::interpreter::stack::Stack::push_slice (120 samples, 4.02%)</title><rect x="82.1776%" y="261" width="4.0201%" height="15" fill="rgb(207,194,5)" fg:x="2453" fg:w="120"/><text x="82.4276%" y="271.50">revm..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (5 samples, 0.17%)</title><rect x="86.0302%" y="245" width="0.1675%" height="15" fill="rgb(206,111,30)" fg:x="2568" fg:w="5"/><text x="86.2802%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (5 samples, 0.17%)</title><rect x="86.0302%" y="229" width="0.1675%" height="15" fill="rgb(243,70,54)" fg:x="2568" fg:w="5"/><text x="86.2802%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.17%)</title><rect x="86.0302%" y="213" width="0.1675%" height="15" fill="rgb(242,28,8)" fg:x="2568" fg:w="5"/><text x="86.2802%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.17%)</title><rect x="86.0302%" y="197" width="0.1675%" height="15" fill="rgb(219,106,18)" fg:x="2568" fg:w="5"/><text x="86.2802%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (16 samples, 0.54%)</title><rect x="86.5327%" y="245" width="0.5360%" height="15" fill="rgb(244,222,10)" fg:x="2583" fg:w="16"/><text x="86.7827%" y="255.50"></text></g><g><title>core::intrinsics::copy (17 samples, 0.57%)</title><rect x="87.0687%" y="229" width="0.5695%" height="15" fill="rgb(236,179,52)" fg:x="2599" fg:w="17"/><text x="87.3187%" y="239.50"></text></g><g><title>revm::instructions::stack::swap (164 samples, 5.49%)</title><rect x="86.1977%" y="277" width="5.4941%" height="15" fill="rgb(213,23,39)" fg:x="2573" fg:w="164"/><text x="86.4477%" y="287.50">revm::i..</text></g><g><title>revm::interpreter::stack::Stack::swap (164 samples, 5.49%)</title><rect x="86.1977%" y="261" width="5.4941%" height="15" fill="rgb(238,48,10)" fg:x="2573" fg:w="164"/><text x="86.4477%" y="271.50">revm::i..</text></g><g><title>core::ptr::swap (138 samples, 4.62%)</title><rect x="87.0687%" y="245" width="4.6231%" height="15" fill="rgb(251,196,23)" fg:x="2599" fg:w="138"/><text x="87.3187%" y="255.50">core:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (121 samples, 4.05%)</title><rect x="87.6382%" y="229" width="4.0536%" height="15" fill="rgb(250,152,24)" fg:x="2616" fg:w="121"/><text x="87.8882%" y="239.50">core..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.17%)</title><rect x="92.0603%" y="117" width="0.1675%" height="15" fill="rgb(209,150,17)" fg:x="2748" fg:w="5"/><text x="92.3103%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (22 samples, 0.74%)</title><rect x="92.2278%" y="117" width="0.7370%" height="15" fill="rgb(234,202,34)" fg:x="2753" fg:w="22"/><text x="92.4778%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (21 samples, 0.70%)</title><rect x="92.9648%" y="117" width="0.7035%" height="15" fill="rgb(253,148,53)" fg:x="2775" fg:w="21"/><text x="93.2148%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (54 samples, 1.81%)</title><rect x="93.6683%" y="117" width="1.8090%" height="15" fill="rgb(218,129,16)" fg:x="2796" fg:w="54"/><text x="93.9183%" y="127.50">&lt;..</text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (25 samples, 0.84%)</title><rect x="95.4774%" y="117" width="0.8375%" height="15" fill="rgb(216,85,19)" fg:x="2850" fg:w="25"/><text x="95.7274%" y="127.50"></text></g><g><title>sha3::state::Sha3State::absorb_block (169 samples, 5.66%)</title><rect x="91.9933%" y="165" width="5.6616%" height="15" fill="rgb(235,228,7)" fg:x="2746" fg:w="169"/><text x="92.2433%" y="175.50">sha3::s..</text></g><g><title>keccak::f1600 (168 samples, 5.63%)</title><rect x="92.0268%" y="149" width="5.6281%" height="15" fill="rgb(245,175,0)" fg:x="2747" fg:w="168"/><text x="92.2768%" y="159.50">keccak:..</text></g><g><title>keccak::keccak_p (167 samples, 5.59%)</title><rect x="92.0603%" y="133" width="5.5946%" height="15" fill="rgb(208,168,36)" fg:x="2748" fg:w="167"/><text x="92.3103%" y="143.50">keccak:..</text></g><g><title>&lt;u64 as keccak::LaneSize&gt;::rotate_left (40 samples, 1.34%)</title><rect x="96.3149%" y="117" width="1.3400%" height="15" fill="rgb(246,171,24)" fg:x="2875" fg:w="40"/><text x="96.5649%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (40 samples, 1.34%)</title><rect x="96.3149%" y="101" width="1.3400%" height="15" fill="rgb(215,142,24)" fg:x="2875" fg:w="40"/><text x="96.5649%" y="111.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (178 samples, 5.96%)</title><rect x="91.7253%" y="197" width="5.9631%" height="15" fill="rgb(250,187,7)" fg:x="2738" fg:w="178"/><text x="91.9753%" y="207.50">&lt;digest:..</text></g><g><title>&lt;sha3::Keccak256Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (178 samples, 5.96%)</title><rect x="91.7253%" y="181" width="5.9631%" height="15" fill="rgb(228,66,33)" fg:x="2738" fg:w="178"/><text x="91.9753%" y="191.50">&lt;sha3::K..</text></g><g><title>sha3::state::Sha3State::as_bytes (1 samples, 0.03%)</title><rect x="97.6549%" y="165" width="0.0335%" height="15" fill="rgb(234,215,21)" fg:x="2915" fg:w="1"/><text x="97.9049%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="97.6549%" y="149" width="0.0335%" height="15" fill="rgb(222,191,20)" fg:x="2915" fg:w="1"/><text x="97.9049%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="97.6549%" y="133" width="0.0335%" height="15" fill="rgb(245,79,54)" fg:x="2915" fg:w="1"/><text x="97.9049%" y="143.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (183 samples, 6.13%)</title><rect x="91.7253%" y="229" width="6.1307%" height="15" fill="rgb(240,10,37)" fg:x="2738" fg:w="183"/><text x="91.9753%" y="239.50">&lt;D as di..</text></g><g><title>digest::FixedOutput::finalize_fixed (183 samples, 6.13%)</title><rect x="91.7253%" y="213" width="6.1307%" height="15" fill="rgb(214,192,32)" fg:x="2738" fg:w="183"/><text x="91.9753%" y="223.50">digest::..</text></g><g><title>[libc-2.31.so] (5 samples, 0.17%)</title><rect x="97.6884%" y="197" width="0.1675%" height="15" fill="rgb(209,36,54)" fg:x="2916" fg:w="5"/><text x="97.9384%" y="207.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (190 samples, 6.37%)</title><rect x="91.7253%" y="245" width="6.3652%" height="15" fill="rgb(220,10,11)" fg:x="2738" fg:w="190"/><text x="91.9753%" y="255.50">&lt;D as di..</text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::default::Default&gt;::default (7 samples, 0.23%)</title><rect x="97.8559%" y="229" width="0.2345%" height="15" fill="rgb(221,106,17)" fg:x="2921" fg:w="7"/><text x="98.1059%" y="239.50"></text></g><g><title>&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::default::Default&gt;::default (7 samples, 0.23%)</title><rect x="97.8559%" y="213" width="0.2345%" height="15" fill="rgb(251,142,44)" fg:x="2921" fg:w="7"/><text x="98.1059%" y="223.50"></text></g><g><title>[libc-2.31.so] (7 samples, 0.23%)</title><rect x="97.8559%" y="197" width="0.2345%" height="15" fill="rgb(238,13,15)" fg:x="2921" fg:w="7"/><text x="98.1059%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.17%)</title><rect x="98.0905%" y="229" width="0.1675%" height="15" fill="rgb(208,107,27)" fg:x="2928" fg:w="5"/><text x="98.3405%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.03%)</title><rect x="98.4590%" y="149" width="0.0335%" height="15" fill="rgb(205,136,37)" fg:x="2939" fg:w="1"/><text x="98.7090%" y="159.50"></text></g><g><title>revm::interpreter::Interpreter::run (2,765 samples, 92.63%)</title><rect x="5.9296%" y="309" width="92.6298%" height="15" fill="rgb(250,205,27)" fg:x="177" fg:w="2765"/><text x="6.1796%" y="319.50">revm::interpreter::Interpreter::run</text></g><g><title>revm::instructions::eval (2,559 samples, 85.73%)</title><rect x="12.8308%" y="293" width="85.7286%" height="15" fill="rgb(210,80,43)" fg:x="383" fg:w="2559"/><text x="13.0808%" y="303.50">revm::instructions::eval</text></g><g><title>revm::instructions::system::sha3 (205 samples, 6.87%)</title><rect x="91.6918%" y="277" width="6.8677%" height="15" fill="rgb(247,160,36)" fg:x="2737" fg:w="205"/><text x="91.9418%" y="287.50">revm::ins..</text></g><g><title>revm::common::keccak256 (205 samples, 6.87%)</title><rect x="91.6918%" y="261" width="6.8677%" height="15" fill="rgb(234,13,49)" fg:x="2737" fg:w="205"/><text x="91.9418%" y="271.50">revm::com..</text></g><g><title>ruint::bit_arr::Bits&lt;_,_&gt;::try_from_be_slice (14 samples, 0.47%)</title><rect x="98.0905%" y="245" width="0.4690%" height="15" fill="rgb(234,122,0)" fg:x="2928" fg:w="14"/><text x="98.3405%" y="255.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::try_from_be_slice (9 samples, 0.30%)</title><rect x="98.2580%" y="229" width="0.3015%" height="15" fill="rgb(207,146,38)" fg:x="2933" fg:w="9"/><text x="98.5080%" y="239.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::try_from_le_byte_iter (9 samples, 0.30%)</title><rect x="98.2580%" y="213" width="0.3015%" height="15" fill="rgb(207,177,25)" fg:x="2933" fg:w="9"/><text x="98.5080%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="98.4590%" y="197" width="0.1005%" height="15" fill="rgb(211,178,42)" fg:x="2939" fg:w="3"/><text x="98.7090%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="98.4590%" y="181" width="0.1005%" height="15" fill="rgb(230,69,54)" fg:x="2939" fg:w="3"/><text x="98.7090%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3 samples, 0.10%)</title><rect x="98.4590%" y="165" width="0.1005%" height="15" fill="rgb(214,135,41)" fg:x="2939" fg:w="3"/><text x="98.7090%" y="175.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (2 samples, 0.07%)</title><rect x="98.4925%" y="149" width="0.0670%" height="15" fill="rgb(237,67,25)" fg:x="2940" fg:w="2"/><text x="98.7425%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (1 samples, 0.03%)</title><rect x="98.6265%" y="229" width="0.0335%" height="15" fill="rgb(222,189,50)" fg:x="2944" fg:w="1"/><text x="98.8765%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (1 samples, 0.03%)</title><rect x="98.6265%" y="213" width="0.0335%" height="15" fill="rgb(245,148,34)" fg:x="2944" fg:w="1"/><text x="98.8765%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,769 samples, 92.76%)</title><rect x="5.9296%" y="549" width="92.7638%" height="15" fill="rgb(222,29,6)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="559.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2,769 samples, 92.76%)</title><rect x="5.9296%" y="533" width="92.7638%" height="15" fill="rgb(221,189,43)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="543.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,769 samples, 92.76%)</title><rect x="5.9296%" y="517" width="92.7638%" height="15" fill="rgb(207,36,27)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="527.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (2,769 samples, 92.76%)</title><rect x="5.9296%" y="501" width="92.7638%" height="15" fill="rgb(217,90,24)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="511.50">core::iter::traits::iterator::Iterator::find_map</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,769 samples, 92.76%)</title><rect x="5.9296%" y="485" width="92.7638%" height="15" fill="rgb(224,66,35)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="495.50">&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,769 samples, 92.76%)</title><rect x="5.9296%" y="469" width="92.7638%" height="15" fill="rgb(221,13,50)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="479.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (2,769 samples, 92.76%)</title><rect x="5.9296%" y="453" width="92.7638%" height="15" fill="rgb(236,68,49)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="463.50">&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (2,769 samples, 92.76%)</title><rect x="5.9296%" y="437" width="92.7638%" height="15" fill="rgb(229,146,28)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="447.50">core::iter::traits::iterator::Iterator::find_map::check::{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,769 samples, 92.76%)</title><rect x="5.9296%" y="421" width="92.7638%" height="15" fill="rgb(225,31,38)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>microbench::measure_impl::{{closure}} (2,769 samples, 92.76%)</title><rect x="5.9296%" y="405" width="92.7638%" height="15" fill="rgb(250,208,3)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="415.50">microbench::measure_impl::{{closure}}</text></g><g><title>microbench::measure::{{closure}} (2,769 samples, 92.76%)</title><rect x="5.9296%" y="389" width="92.7638%" height="15" fill="rgb(246,54,23)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="399.50">microbench::measure::{{closure}}</text></g><g><title>snailtracer::simple_example::{{closure}} (2,769 samples, 92.76%)</title><rect x="5.9296%" y="373" width="92.7638%" height="15" fill="rgb(243,76,11)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="383.50">snailtracer::simple_example::{{closure}}</text></g><g><title>revm::evm::EVM&lt;DB&gt;::transact (2,769 samples, 92.76%)</title><rect x="5.9296%" y="357" width="92.7638%" height="15" fill="rgb(245,21,50)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="367.50">revm::evm::EVM&lt;DB&gt;::transact</text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact (2,769 samples, 92.76%)</title><rect x="5.9296%" y="341" width="92.7638%" height="15" fill="rgb(228,9,43)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="351.50">&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact</text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (2,769 samples, 92.76%)</title><rect x="5.9296%" y="325" width="92.7638%" height="15" fill="rgb(208,100,47)" fg:x="177" fg:w="2769"/><text x="6.1796%" y="335.50">revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner</text></g><g><title>revm::interpreter::contract::Contract::new_with_context (4 samples, 0.13%)</title><rect x="98.5595%" y="309" width="0.1340%" height="15" fill="rgb(232,26,8)" fg:x="2942" fg:w="4"/><text x="98.8095%" y="319.50"></text></g><g><title>revm::interpreter::contract::Contract::new (4 samples, 0.13%)</title><rect x="98.5595%" y="293" width="0.1340%" height="15" fill="rgb(216,166,38)" fg:x="2942" fg:w="4"/><text x="98.8095%" y="303.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::lock (4 samples, 0.13%)</title><rect x="98.5595%" y="277" width="0.1340%" height="15" fill="rgb(251,202,51)" fg:x="2942" fg:w="4"/><text x="98.8095%" y="287.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::to_analysed (4 samples, 0.13%)</title><rect x="98.5595%" y="261" width="0.1340%" height="15" fill="rgb(254,216,34)" fg:x="2942" fg:w="4"/><text x="98.8095%" y="271.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::analyze (4 samples, 0.13%)</title><rect x="98.5595%" y="245" width="0.1340%" height="15" fill="rgb(251,32,27)" fg:x="2942" fg:w="4"/><text x="98.8095%" y="255.50"></text></g><g><title>revm::instructions::opcode::OpInfo::get_gas (1 samples, 0.03%)</title><rect x="98.6600%" y="229" width="0.0335%" height="15" fill="rgb(208,127,28)" fg:x="2945" fg:w="1"/><text x="98.9100%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::Interpreter&gt; (1 samples, 0.03%)</title><rect x="98.6935%" y="341" width="0.0335%" height="15" fill="rgb(224,137,22)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::memory::Memory&gt; (1 samples, 0.03%)</title><rect x="98.6935%" y="325" width="0.0335%" height="15" fill="rgb(254,70,32)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="98.6935%" y="309" width="0.0335%" height="15" fill="rgb(229,75,37)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="98.6935%" y="293" width="0.0335%" height="15" fill="rgb(252,64,23)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="98.6935%" y="277" width="0.0335%" height="15" fill="rgb(232,162,48)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="98.6935%" y="261" width="0.0335%" height="15" fill="rgb(246,160,12)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="98.6935%" y="245" width="0.0335%" height="15" fill="rgb(247,166,0)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="255.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="98.6935%" y="229" width="0.0335%" height="15" fill="rgb(249,219,21)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="98.6935%" y="213" width="0.0335%" height="15" fill="rgb(205,209,3)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="223.50"></text></g><g><title>__GI_munmap (1 samples, 0.03%)</title><rect x="98.6935%" y="197" width="0.0335%" height="15" fill="rgb(243,44,1)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.6935%" y="181" width="0.0335%" height="15" fill="rgb(206,159,16)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.6935%" y="165" width="0.0335%" height="15" fill="rgb(244,77,30)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.6935%" y="149" width="0.0335%" height="15" fill="rgb(218,69,12)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.6935%" y="133" width="0.0335%" height="15" fill="rgb(212,87,7)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.6935%" y="117" width="0.0335%" height="15" fill="rgb(245,114,25)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.6935%" y="101" width="0.0335%" height="15" fill="rgb(210,61,42)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.6935%" y="85" width="0.0335%" height="15" fill="rgb(211,52,33)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.6935%" y="69" width="0.0335%" height="15" fill="rgb(234,58,33)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.6935%" y="53" width="0.0335%" height="15" fill="rgb(220,115,36)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="98.6935%" y="37" width="0.0335%" height="15" fill="rgb(243,153,54)" fg:x="2946" fg:w="1"/><text x="98.9435%" y="47.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.03%)</title><rect x="98.7270%" y="325" width="0.0335%" height="15" fill="rgb(251,47,18)" fg:x="2947" fg:w="1"/><text x="98.9770%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (1 samples, 0.03%)</title><rect x="99.0285%" y="245" width="0.0335%" height="15" fill="rgb(242,102,42)" fg:x="2956" fg:w="1"/><text x="99.2785%" y="255.50"></text></g><g><title>ruint::algorithms::div::reciprocal::mul_hi (1 samples, 0.03%)</title><rect x="99.1290%" y="213" width="0.0335%" height="15" fill="rgb(234,31,38)" fg:x="2959" fg:w="1"/><text x="99.3790%" y="223.50"></text></g><g><title>ruint::algorithms::div::small::div_nx1 (4 samples, 0.13%)</title><rect x="99.0620%" y="245" width="0.1340%" height="15" fill="rgb(221,117,51)" fg:x="2957" fg:w="4"/><text x="99.3120%" y="255.50"></text></g><g><title>ruint::algorithms::div::reciprocal::reciprocal_mg10 (2 samples, 0.07%)</title><rect x="99.1290%" y="229" width="0.0670%" height="15" fill="rgb(212,20,18)" fg:x="2959" fg:w="2"/><text x="99.3790%" y="239.50"></text></g><g><title>ruint::algorithms::div::reciprocal::muladd_hi (1 samples, 0.03%)</title><rect x="99.1625%" y="213" width="0.0335%" height="15" fill="rgb(245,133,36)" fg:x="2960" fg:w="1"/><text x="99.4125%" y="223.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (8 samples, 0.27%)</title><rect x="98.9615%" y="309" width="0.2680%" height="15" fill="rgb(212,6,19)" fg:x="2954" fg:w="8"/><text x="99.2115%" y="319.50"></text></g><g><title>revm::instructions::i256::i256_div (8 samples, 0.27%)</title><rect x="98.9615%" y="293" width="0.2680%" height="15" fill="rgb(218,1,36)" fg:x="2954" fg:w="8"/><text x="99.2115%" y="303.50"></text></g><g><title>ruint::div::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::div_rem (8 samples, 0.27%)</title><rect x="98.9615%" y="277" width="0.2680%" height="15" fill="rgb(246,84,54)" fg:x="2954" fg:w="8"/><text x="99.2115%" y="287.50"></text></g><g><title>ruint::algorithms::div::div (7 samples, 0.23%)</title><rect x="98.9950%" y="261" width="0.2345%" height="15" fill="rgb(242,110,6)" fg:x="2955" fg:w="7"/><text x="99.2450%" y="271.50"></text></g><g><title>ruint::algorithms::div::small::div_nx2 (1 samples, 0.03%)</title><rect x="99.1960%" y="245" width="0.0335%" height="15" fill="rgb(214,47,5)" fg:x="2961" fg:w="1"/><text x="99.4460%" y="255.50"></text></g><g><title>ruint::algorithms::div::reciprocal::reciprocal_2_mg10 (1 samples, 0.03%)</title><rect x="99.1960%" y="229" width="0.0335%" height="15" fill="rgb(218,159,25)" fg:x="2961" fg:w="1"/><text x="99.4460%" y="239.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u64&gt; for u128&gt;::from (1 samples, 0.03%)</title><rect x="99.1960%" y="213" width="0.0335%" height="15" fill="rgb(215,211,28)" fg:x="2961" fg:w="1"/><text x="99.4460%" y="223.50"></text></g><g><title>revm::instructions::bitwise::slt (1 samples, 0.03%)</title><rect x="99.2295%" y="309" width="0.0335%" height="15" fill="rgb(238,59,32)" fg:x="2962" fg:w="1"/><text x="99.4795%" y="319.50"></text></g><g><title>revm::instructions::i256::i256_cmp (1 samples, 0.03%)</title><rect x="99.2295%" y="293" width="0.0335%" height="15" fill="rgb(226,82,3)" fg:x="2962" fg:w="1"/><text x="99.4795%" y="303.50"></text></g><g><title>revm::instructions::control::jump (1 samples, 0.03%)</title><rect x="99.2630%" y="309" width="0.0335%" height="15" fill="rgb(240,164,32)" fg:x="2963" fg:w="1"/><text x="99.5130%" y="319.50"></text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (1 samples, 0.03%)</title><rect x="99.2630%" y="293" width="0.0335%" height="15" fill="rgb(232,46,7)" fg:x="2963" fg:w="1"/><text x="99.5130%" y="303.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (1 samples, 0.03%)</title><rect x="99.2630%" y="277" width="0.0335%" height="15" fill="rgb(229,129,53)" fg:x="2963" fg:w="1"/><text x="99.5130%" y="287.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump (1 samples, 0.03%)</title><rect x="99.2630%" y="261" width="0.0335%" height="15" fill="rgb(234,188,29)" fg:x="2963" fg:w="1"/><text x="99.5130%" y="271.50"></text></g><g><title>revm::instructions::control::jumpdest (1 samples, 0.03%)</title><rect x="99.2965%" y="309" width="0.0335%" height="15" fill="rgb(246,141,4)" fg:x="2964" fg:w="1"/><text x="99.5465%" y="319.50"></text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (1 samples, 0.03%)</title><rect x="99.2965%" y="293" width="0.0335%" height="15" fill="rgb(229,23,39)" fg:x="2964" fg:w="1"/><text x="99.5465%" y="303.50"></text></g><g><title>revm::gas::Gas::record_cost (1 samples, 0.03%)</title><rect x="99.2965%" y="277" width="0.0335%" height="15" fill="rgb(206,12,3)" fg:x="2964" fg:w="1"/><text x="99.5465%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (1 samples, 0.03%)</title><rect x="99.3300%" y="277" width="0.0335%" height="15" fill="rgb(252,226,20)" fg:x="2965" fg:w="1"/><text x="99.5800%" y="287.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.03%)</title><rect x="99.3635%" y="245" width="0.0335%" height="15" fill="rgb(216,123,35)" fg:x="2966" fg:w="1"/><text x="99.6135%" y="255.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="99.3635%" y="229" width="0.0335%" height="15" fill="rgb(212,68,40)" fg:x="2966" fg:w="1"/><text x="99.6135%" y="239.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (1 samples, 0.03%)</title><rect x="99.3635%" y="213" width="0.0335%" height="15" fill="rgb(254,125,32)" fg:x="2966" fg:w="1"/><text x="99.6135%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (2 samples, 0.07%)</title><rect x="99.3635%" y="261" width="0.0670%" height="15" fill="rgb(253,97,22)" fg:x="2966" fg:w="2"/><text x="99.6135%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="99.3970%" y="245" width="0.0335%" height="15" fill="rgb(241,101,14)" fg:x="2967" fg:w="1"/><text x="99.6470%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.03%)</title><rect x="99.3970%" y="229" width="0.0335%" height="15" fill="rgb(238,103,29)" fg:x="2967" fg:w="1"/><text x="99.6470%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.03%)</title><rect x="99.3970%" y="213" width="0.0335%" height="15" fill="rgb(233,195,47)" fg:x="2967" fg:w="1"/><text x="99.6470%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.03%)</title><rect x="99.3970%" y="197" width="0.0335%" height="15" fill="rgb(246,218,30)" fg:x="2967" fg:w="1"/><text x="99.6470%" y="207.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="99.3970%" y="181" width="0.0335%" height="15" fill="rgb(219,145,47)" fg:x="2967" fg:w="1"/><text x="99.6470%" y="191.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.03%)</title><rect x="99.3970%" y="165" width="0.0335%" height="15" fill="rgb(243,12,26)" fg:x="2967" fg:w="1"/><text x="99.6470%" y="175.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.03%)</title><rect x="99.3970%" y="149" width="0.0335%" height="15" fill="rgb(214,87,16)" fg:x="2967" fg:w="1"/><text x="99.6470%" y="159.50"></text></g><g><title>revm::instructions::host::sload (4 samples, 0.13%)</title><rect x="99.3300%" y="309" width="0.1340%" height="15" fill="rgb(208,99,42)" fg:x="2965" fg:w="4"/><text x="99.5800%" y="319.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (4 samples, 0.13%)</title><rect x="99.3300%" y="293" width="0.1340%" height="15" fill="rgb(253,99,2)" fg:x="2965" fg:w="4"/><text x="99.5800%" y="303.50"></text></g><g><title>revm::journaled_state::JournaledState::sload (3 samples, 0.10%)</title><rect x="99.3635%" y="277" width="0.1005%" height="15" fill="rgb(220,168,23)" fg:x="2966" fg:w="3"/><text x="99.6135%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="99.4305%" y="261" width="0.0335%" height="15" fill="rgb(242,38,24)" fg:x="2968" fg:w="1"/><text x="99.6805%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.03%)</title><rect x="99.4305%" y="245" width="0.0335%" height="15" fill="rgb(225,182,9)" fg:x="2968" fg:w="1"/><text x="99.6805%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="99.4305%" y="229" width="0.0335%" height="15" fill="rgb(243,178,37)" fg:x="2968" fg:w="1"/><text x="99.6805%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="99.4305%" y="213" width="0.0335%" height="15" fill="rgb(232,139,19)" fg:x="2968" fg:w="1"/><text x="99.6805%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.03%)</title><rect x="99.4305%" y="197" width="0.0335%" height="15" fill="rgb(225,201,24)" fg:x="2968" fg:w="1"/><text x="99.6805%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.03%)</title><rect x="99.4305%" y="181" width="0.0335%" height="15" fill="rgb(221,47,46)" fg:x="2968" fg:w="1"/><text x="99.6805%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="99.4305%" y="165" width="0.0335%" height="15" fill="rgb(249,23,13)" fg:x="2968" fg:w="1"/><text x="99.6805%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="99.4305%" y="149" width="0.0335%" height="15" fill="rgb(219,9,5)" fg:x="2968" fg:w="1"/><text x="99.6805%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="99.4305%" y="133" width="0.0335%" height="15" fill="rgb(254,171,16)" fg:x="2968" fg:w="1"/><text x="99.6805%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="99.4305%" y="117" width="0.0335%" height="15" fill="rgb(230,171,20)" fg:x="2968" fg:w="1"/><text x="99.6805%" y="127.50"></text></g><g><title>revm::interpreter::memory::Memory::resize (6 samples, 0.20%)</title><rect x="99.4975%" y="293" width="0.2010%" height="15" fill="rgb(210,71,41)" fg:x="2970" fg:w="6"/><text x="99.7475%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (6 samples, 0.20%)</title><rect x="99.4975%" y="277" width="0.2010%" height="15" fill="rgb(206,173,20)" fg:x="2970" fg:w="6"/><text x="99.7475%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (6 samples, 0.20%)</title><rect x="99.4975%" y="261" width="0.2010%" height="15" fill="rgb(233,88,34)" fg:x="2970" fg:w="6"/><text x="99.7475%" y="271.50"></text></g><g><title>core::ptr::write (6 samples, 0.20%)</title><rect x="99.4975%" y="245" width="0.2010%" height="15" fill="rgb(223,209,46)" fg:x="2970" fg:w="6"/><text x="99.7475%" y="255.50"></text></g><g><title>[libc-2.31.so] (6 samples, 0.20%)</title><rect x="99.4975%" y="229" width="0.2010%" height="15" fill="rgb(250,43,18)" fg:x="2970" fg:w="6"/><text x="99.7475%" y="239.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.4975%" y="213" width="0.2010%" height="15" fill="rgb(208,13,10)" fg:x="2970" fg:w="6"/><text x="99.7475%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.4975%" y="197" width="0.2010%" height="15" fill="rgb(212,200,36)" fg:x="2970" fg:w="6"/><text x="99.7475%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.4975%" y="181" width="0.2010%" height="15" fill="rgb(225,90,30)" fg:x="2970" fg:w="6"/><text x="99.7475%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.4975%" y="165" width="0.2010%" height="15" fill="rgb(236,182,39)" fg:x="2970" fg:w="6"/><text x="99.7475%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.4975%" y="149" width="0.2010%" height="15" fill="rgb(212,144,35)" fg:x="2970" fg:w="6"/><text x="99.7475%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="99.5310%" y="133" width="0.1675%" height="15" fill="rgb(228,63,44)" fg:x="2971" fg:w="5"/><text x="99.7810%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.17%)</title><rect x="99.5310%" y="117" width="0.1675%" height="15" fill="rgb(228,109,6)" fg:x="2971" fg:w="5"/><text x="99.7810%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.5980%" y="101" width="0.1005%" height="15" fill="rgb(238,117,24)" fg:x="2973" fg:w="3"/><text x="99.8480%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="99.5980%" y="85" width="0.1005%" height="15" fill="rgb(242,26,26)" fg:x="2973" fg:w="3"/><text x="99.8480%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="99.6315%" y="69" width="0.0670%" height="15" fill="rgb(221,92,48)" fg:x="2974" fg:w="2"/><text x="99.8815%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.6650%" y="53" width="0.0335%" height="15" fill="rgb(209,209,32)" fg:x="2975" fg:w="1"/><text x="99.9150%" y="63.50"></text></g><g><title>revm::instructions::memory::mstore (8 samples, 0.27%)</title><rect x="99.4640%" y="309" width="0.2680%" height="15" fill="rgb(221,70,22)" fg:x="2969" fg:w="8"/><text x="99.7140%" y="319.50"></text></g><g><title>revm::interpreter::memory::Memory::set_u256 (1 samples, 0.03%)</title><rect x="99.6985%" y="293" width="0.0335%" height="15" fill="rgb(248,145,5)" fg:x="2976" fg:w="1"/><text x="99.9485%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="99.6985%" y="277" width="0.0335%" height="15" fill="rgb(226,116,26)" fg:x="2976" fg:w="1"/><text x="99.9485%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="99.6985%" y="261" width="0.0335%" height="15" fill="rgb(244,5,17)" fg:x="2976" fg:w="1"/><text x="99.9485%" y="271.50"></text></g><g><title>revm::instructions::stack::dup (1 samples, 0.03%)</title><rect x="99.7320%" y="309" width="0.0335%" height="15" fill="rgb(252,159,33)" fg:x="2977" fg:w="1"/><text x="99.9820%" y="319.50"></text></g><g><title>revm::interpreter::stack::Stack::dup (1 samples, 0.03%)</title><rect x="99.7320%" y="293" width="0.0335%" height="15" fill="rgb(206,71,0)" fg:x="2977" fg:w="1"/><text x="99.9820%" y="303.50"></text></g><g><title>revm::instructions::stack::swap (1 samples, 0.03%)</title><rect x="99.7655%" y="309" width="0.0335%" height="15" fill="rgb(233,118,54)" fg:x="2978" fg:w="1"/><text x="100.0155%" y="319.50"></text></g><g><title>revm::interpreter::stack::Stack::swap (1 samples, 0.03%)</title><rect x="99.7655%" y="293" width="0.0335%" height="15" fill="rgb(234,83,48)" fg:x="2978" fg:w="1"/><text x="100.0155%" y="303.50"></text></g><g><title>core::ptr::swap (1 samples, 0.03%)</title><rect x="99.7655%" y="277" width="0.0335%" height="15" fill="rgb(228,3,54)" fg:x="2978" fg:w="1"/><text x="100.0155%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="99.7655%" y="261" width="0.0335%" height="15" fill="rgb(226,155,13)" fg:x="2978" fg:w="1"/><text x="100.0155%" y="271.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (1 samples, 0.03%)</title><rect x="99.7990%" y="149" width="0.0335%" height="15" fill="rgb(241,28,37)" fg:x="2979" fg:w="1"/><text x="100.0490%" y="159.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (2 samples, 0.07%)</title><rect x="99.7990%" y="261" width="0.0670%" height="15" fill="rgb(233,93,10)" fg:x="2979" fg:w="2"/><text x="100.0490%" y="271.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (2 samples, 0.07%)</title><rect x="99.7990%" y="245" width="0.0670%" height="15" fill="rgb(225,113,19)" fg:x="2979" fg:w="2"/><text x="100.0490%" y="255.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (2 samples, 0.07%)</title><rect x="99.7990%" y="229" width="0.0670%" height="15" fill="rgb(241,2,18)" fg:x="2979" fg:w="2"/><text x="100.0490%" y="239.50"></text></g><g><title>&lt;sha3::Keccak256Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (2 samples, 0.07%)</title><rect x="99.7990%" y="213" width="0.0670%" height="15" fill="rgb(228,207,21)" fg:x="2979" fg:w="2"/><text x="100.0490%" y="223.50"></text></g><g><title>sha3::state::Sha3State::absorb_block (2 samples, 0.07%)</title><rect x="99.7990%" y="197" width="0.0670%" height="15" fill="rgb(213,211,35)" fg:x="2979" fg:w="2"/><text x="100.0490%" y="207.50"></text></g><g><title>keccak::f1600 (2 samples, 0.07%)</title><rect x="99.7990%" y="181" width="0.0670%" height="15" fill="rgb(209,83,10)" fg:x="2979" fg:w="2"/><text x="100.0490%" y="191.50"></text></g><g><title>keccak::keccak_p (2 samples, 0.07%)</title><rect x="99.7990%" y="165" width="0.0670%" height="15" fill="rgb(209,164,1)" fg:x="2979" fg:w="2"/><text x="100.0490%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (1 samples, 0.03%)</title><rect x="99.8325%" y="149" width="0.0335%" height="15" fill="rgb(213,184,43)" fg:x="2980" fg:w="1"/><text x="100.0825%" y="159.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (3 samples, 0.10%)</title><rect x="99.7990%" y="277" width="0.1005%" height="15" fill="rgb(231,61,34)" fg:x="2979" fg:w="3"/><text x="100.0490%" y="287.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::default::Default&gt;::default (1 samples, 0.03%)</title><rect x="99.8660%" y="261" width="0.0335%" height="15" fill="rgb(235,75,3)" fg:x="2981" fg:w="1"/><text x="100.1160%" y="271.50"></text></g><g><title>&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::default::Default&gt;::default (1 samples, 0.03%)</title><rect x="99.8660%" y="245" width="0.0335%" height="15" fill="rgb(220,106,47)" fg:x="2981" fg:w="1"/><text x="100.1160%" y="255.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.03%)</title><rect x="99.8660%" y="229" width="0.0335%" height="15" fill="rgb(210,196,33)" fg:x="2981" fg:w="1"/><text x="100.1160%" y="239.50"></text></g><g><title>__libc_start_main (2,806 samples, 94.00%)</title><rect x="5.9296%" y="789" width="94.0034%" height="15" fill="rgb(229,154,42)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="799.50">__libc_start_main</text></g><g><title>main (2,806 samples, 94.00%)</title><rect x="5.9296%" y="773" width="94.0034%" height="15" fill="rgb(228,114,26)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="783.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,806 samples, 94.00%)</title><rect x="5.9296%" y="757" width="94.0034%" height="15" fill="rgb(208,144,1)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,806 samples, 94.00%)</title><rect x="5.9296%" y="741" width="94.0034%" height="15" fill="rgb(239,112,37)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="751.50">core::ops::function::FnOnce::call_once</text></g><g><title>snailtracer::main (2,806 samples, 94.00%)</title><rect x="5.9296%" y="725" width="94.0034%" height="15" fill="rgb(210,96,50)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="735.50">snailtracer::main</text></g><g><title>snailtracer::simple_example (2,806 samples, 94.00%)</title><rect x="5.9296%" y="709" width="94.0034%" height="15" fill="rgb(222,178,2)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="719.50">snailtracer::simple_example</text></g><g><title>microbench::bench (2,806 samples, 94.00%)</title><rect x="5.9296%" y="693" width="94.0034%" height="15" fill="rgb(226,74,18)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="703.50">microbench::bench</text></g><g><title>microbench::bench_impl (2,806 samples, 94.00%)</title><rect x="5.9296%" y="677" width="94.0034%" height="15" fill="rgb(225,67,54)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="687.50">microbench::bench_impl</text></g><g><title>microbench::bench::{{closure}} (2,806 samples, 94.00%)</title><rect x="5.9296%" y="661" width="94.0034%" height="15" fill="rgb(251,92,32)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="671.50">microbench::bench::{{closure}}</text></g><g><title>microbench::measure (2,806 samples, 94.00%)</title><rect x="5.9296%" y="645" width="94.0034%" height="15" fill="rgb(228,149,22)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="655.50">microbench::measure</text></g><g><title>microbench::measure_impl (2,806 samples, 94.00%)</title><rect x="5.9296%" y="629" width="94.0034%" height="15" fill="rgb(243,54,13)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="639.50">microbench::measure_impl</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,806 samples, 94.00%)</title><rect x="5.9296%" y="613" width="94.0034%" height="15" fill="rgb(243,180,28)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="623.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,806 samples, 94.00%)</title><rect x="5.9296%" y="597" width="94.0034%" height="15" fill="rgb(208,167,24)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,806 samples, 94.00%)</title><rect x="5.9296%" y="581" width="94.0034%" height="15" fill="rgb(245,73,45)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,806 samples, 94.00%)</title><rect x="5.9296%" y="565" width="94.0034%" height="15" fill="rgb(237,203,48)" fg:x="177" fg:w="2806"/><text x="6.1796%" y="575.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 1.24%)</title><rect x="98.6935%" y="549" width="1.2395%" height="15" fill="rgb(211,197,16)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (37 samples, 1.24%)</title><rect x="98.6935%" y="533" width="1.2395%" height="15" fill="rgb(243,99,51)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (37 samples, 1.24%)</title><rect x="98.6935%" y="517" width="1.2395%" height="15" fill="rgb(215,123,29)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (37 samples, 1.24%)</title><rect x="98.6935%" y="501" width="1.2395%" height="15" fill="rgb(239,186,37)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (37 samples, 1.24%)</title><rect x="98.6935%" y="485" width="1.2395%" height="15" fill="rgb(252,136,39)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (37 samples, 1.24%)</title><rect x="98.6935%" y="469" width="1.2395%" height="15" fill="rgb(223,213,32)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="479.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (37 samples, 1.24%)</title><rect x="98.6935%" y="453" width="1.2395%" height="15" fill="rgb(233,115,5)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="463.50"></text></g><g><title>microbench::measure_impl::{{closure}} (37 samples, 1.24%)</title><rect x="98.6935%" y="437" width="1.2395%" height="15" fill="rgb(207,226,44)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="447.50"></text></g><g><title>microbench::measure::{{closure}} (37 samples, 1.24%)</title><rect x="98.6935%" y="421" width="1.2395%" height="15" fill="rgb(208,126,0)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="431.50"></text></g><g><title>snailtracer::simple_example::{{closure}} (37 samples, 1.24%)</title><rect x="98.6935%" y="405" width="1.2395%" height="15" fill="rgb(244,66,21)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="415.50"></text></g><g><title>revm::evm::EVM&lt;DB&gt;::transact (37 samples, 1.24%)</title><rect x="98.6935%" y="389" width="1.2395%" height="15" fill="rgb(222,97,12)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="399.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact (37 samples, 1.24%)</title><rect x="98.6935%" y="373" width="1.2395%" height="15" fill="rgb(219,213,19)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="383.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (37 samples, 1.24%)</title><rect x="98.6935%" y="357" width="1.2395%" height="15" fill="rgb(252,169,30)" fg:x="2946" fg:w="37"/><text x="98.9435%" y="367.50"></text></g><g><title>revm::interpreter::Interpreter::run (36 samples, 1.21%)</title><rect x="98.7270%" y="341" width="1.2060%" height="15" fill="rgb(206,32,51)" fg:x="2947" fg:w="36"/><text x="98.9770%" y="351.50"></text></g><g><title>revm::instructions::eval (35 samples, 1.17%)</title><rect x="98.7605%" y="325" width="1.1725%" height="15" fill="rgb(250,172,42)" fg:x="2948" fg:w="35"/><text x="99.0105%" y="335.50"></text></g><g><title>revm::instructions::system::sha3 (4 samples, 0.13%)</title><rect x="99.7990%" y="309" width="0.1340%" height="15" fill="rgb(209,34,43)" fg:x="2979" fg:w="4"/><text x="100.0490%" y="319.50"></text></g><g><title>revm::common::keccak256 (4 samples, 0.13%)</title><rect x="99.7990%" y="293" width="0.1340%" height="15" fill="rgb(223,11,35)" fg:x="2979" fg:w="4"/><text x="100.0490%" y="303.50"></text></g><g><title>ruint::bit_arr::Bits&lt;_,_&gt;::try_from_be_slice (1 samples, 0.03%)</title><rect x="99.8995%" y="277" width="0.0335%" height="15" fill="rgb(251,219,26)" fg:x="2982" fg:w="1"/><text x="100.1495%" y="287.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::try_from_be_slice (1 samples, 0.03%)</title><rect x="99.8995%" y="261" width="0.0335%" height="15" fill="rgb(231,119,3)" fg:x="2982" fg:w="1"/><text x="100.1495%" y="271.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::try_from_le_byte_iter (1 samples, 0.03%)</title><rect x="99.8995%" y="245" width="0.0335%" height="15" fill="rgb(216,97,11)" fg:x="2982" fg:w="1"/><text x="100.1495%" y="255.50"></text></g><g><title>_start (2,807 samples, 94.04%)</title><rect x="5.9296%" y="805" width="94.0369%" height="15" fill="rgb(223,59,9)" fg:x="177" fg:w="2807"/><text x="6.1796%" y="815.50">_start</text></g><g><title>_dl_start (1 samples, 0.03%)</title><rect x="99.9330%" y="789" width="0.0335%" height="15" fill="rgb(233,93,31)" fg:x="2983" fg:w="1"/><text x="100.1830%" y="799.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.03%)</title><rect x="99.9330%" y="773" width="0.0335%" height="15" fill="rgb(239,81,33)" fg:x="2983" fg:w="1"/><text x="100.1830%" y="783.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.03%)</title><rect x="99.9330%" y="757" width="0.0335%" height="15" fill="rgb(213,120,34)" fg:x="2983" fg:w="1"/><text x="100.1830%" y="767.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.03%)</title><rect x="99.9330%" y="741" width="0.0335%" height="15" fill="rgb(243,49,53)" fg:x="2983" fg:w="1"/><text x="100.1830%" y="751.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.03%)</title><rect x="99.9330%" y="725" width="0.0335%" height="15" fill="rgb(247,216,33)" fg:x="2983" fg:w="1"/><text x="100.1830%" y="735.50"></text></g><g><title>openaux (1 samples, 0.03%)</title><rect x="99.9330%" y="709" width="0.0335%" height="15" fill="rgb(226,26,14)" fg:x="2983" fg:w="1"/><text x="100.1830%" y="719.50"></text></g><g><title>_dl_map_object (1 samples, 0.03%)</title><rect x="99.9330%" y="693" width="0.0335%" height="15" fill="rgb(215,49,53)" fg:x="2983" fg:w="1"/><text x="100.1830%" y="703.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.03%)</title><rect x="99.9330%" y="677" width="0.0335%" height="15" fill="rgb(245,162,40)" fg:x="2983" fg:w="1"/><text x="100.1830%" y="687.50"></text></g><g><title>_dl_process_pt_note (1 samples, 0.03%)</title><rect x="99.9330%" y="661" width="0.0335%" height="15" fill="rgb(229,68,17)" fg:x="2983" fg:w="1"/><text x="100.1830%" y="671.50"></text></g><g><title>all (2,985 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(213,182,10)" fg:x="0" fg:w="2985"/><text x="0.2500%" y="847.50"></text></g><g><title>snailtracer (2,979 samples, 99.80%)</title><rect x="0.2010%" y="821" width="99.7990%" height="15" fill="rgb(245,125,30)" fg:x="6" fg:w="2979"/><text x="0.4510%" y="831.50">snailtracer</text></g><g><title>revm::instructions::arithmetic::sdiv (1 samples, 0.03%)</title><rect x="99.9665%" y="805" width="0.0335%" height="15" fill="rgb(232,202,2)" fg:x="2984" fg:w="1"/><text x="100.2165%" y="815.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.03%)</title><rect x="99.9665%" y="789" width="0.0335%" height="15" fill="rgb(237,140,51)" fg:x="2984" fg:w="1"/><text x="100.2165%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="99.9665%" y="773" width="0.0335%" height="15" fill="rgb(236,157,25)" fg:x="2984" fg:w="1"/><text x="100.2165%" y="783.50"></text></g></svg></svg>