<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="1455"><g><title>perf-exec (5 samples, 0.34%)</title><rect x="0.0000%" y="517" width="0.3436%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="501" width="0.3436%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="485" width="0.3436%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="469" width="0.3436%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="453" width="0.3436%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="437" width="0.3436%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="421" width="0.3436%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="405" width="0.3436%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="389" width="0.3436%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="373" width="0.3436%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="357" width="0.3436%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="341" width="0.3436%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="325" width="0.3436%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="309" width="0.3436%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="0.0000%" y="293" width="0.3436%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.07%)</title><rect x="0.3436%" y="485" width="0.0687%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.5936%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.07%)</title><rect x="0.3436%" y="469" width="0.0687%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.5936%" y="479.50"></text></g><g><title>revm::instructions::memory::mstore (1 samples, 0.07%)</title><rect x="0.4124%" y="485" width="0.0687%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="0.6624%" y="495.50"></text></g><g><title>revm::interpreter::memory::Memory::resize (1 samples, 0.07%)</title><rect x="0.4124%" y="469" width="0.0687%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.6624%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (1 samples, 0.07%)</title><rect x="0.4124%" y="453" width="0.0687%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="0.6624%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.07%)</title><rect x="0.4124%" y="437" width="0.0687%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="0.6624%" y="447.50"></text></g><g><title>core::ptr::write (1 samples, 0.07%)</title><rect x="0.4124%" y="421" width="0.0687%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="1"/><text x="0.6624%" y="431.50"></text></g><g><title>revm::journaled_state::JournaledState::sload (1 samples, 0.07%)</title><rect x="0.4811%" y="485" width="0.0687%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="0.7311%" y="495.50"></text></g><g><title>[[heap]] (7 samples, 0.48%)</title><rect x="0.3436%" y="501" width="0.4811%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="7"/><text x="0.5936%" y="511.50"></text></g><g><title>ruint::div::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::div_rem (4 samples, 0.27%)</title><rect x="0.5498%" y="485" width="0.2749%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="4"/><text x="0.7998%" y="495.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (2 samples, 0.14%)</title><rect x="0.8247%" y="485" width="0.1375%" height="15" fill="rgb(249,31,29)" fg:x="12" fg:w="2"/><text x="1.0747%" y="495.50"></text></g><g><title>revm::instructions::memory::mload (7 samples, 0.48%)</title><rect x="0.9622%" y="485" width="0.4811%" height="15" fill="rgb(225,111,53)" fg:x="14" fg:w="7"/><text x="1.2122%" y="495.50"></text></g><g><title>revm::interpreter::stack::Stack::len (3 samples, 0.21%)</title><rect x="1.2371%" y="469" width="0.2062%" height="15" fill="rgb(238,160,17)" fg:x="18" fg:w="3"/><text x="1.4871%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.21%)</title><rect x="1.2371%" y="453" width="0.2062%" height="15" fill="rgb(214,148,48)" fg:x="18" fg:w="3"/><text x="1.4871%" y="463.50"></text></g><g><title>revm::instructions::memory::mstore (7 samples, 0.48%)</title><rect x="1.4433%" y="485" width="0.4811%" height="15" fill="rgb(232,36,49)" fg:x="21" fg:w="7"/><text x="1.6933%" y="495.50"></text></g><g><title>revm::interpreter::Interpreter::run (12 samples, 0.82%)</title><rect x="1.9244%" y="485" width="0.8247%" height="15" fill="rgb(209,103,24)" fg:x="28" fg:w="12"/><text x="2.1744%" y="495.50"></text></g><g><title>revm::instructions::eval (12 samples, 0.82%)</title><rect x="1.9244%" y="469" width="0.8247%" height="15" fill="rgb(229,88,8)" fg:x="28" fg:w="12"/><text x="2.1744%" y="479.50"></text></g><g><title>[[stack]] (29 samples, 1.99%)</title><rect x="0.8247%" y="501" width="1.9931%" height="15" fill="rgb(213,181,19)" fg:x="12" fg:w="29"/><text x="1.0747%" y="511.50">[..</text></g><g><title>revm::journaled_state::JournaledState::sload (1 samples, 0.07%)</title><rect x="2.7491%" y="485" width="0.0687%" height="15" fill="rgb(254,191,54)" fg:x="40" fg:w="1"/><text x="2.9991%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="2.8179%" y="485" width="0.0687%" height="15" fill="rgb(241,83,37)" fg:x="41" fg:w="1"/><text x="3.0679%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="2.8179%" y="469" width="0.0687%" height="15" fill="rgb(233,36,39)" fg:x="41" fg:w="1"/><text x="3.0679%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="2.8179%" y="453" width="0.0687%" height="15" fill="rgb(226,3,54)" fg:x="41" fg:w="1"/><text x="3.0679%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="2.8179%" y="437" width="0.0687%" height="15" fill="rgb(245,192,40)" fg:x="41" fg:w="1"/><text x="3.0679%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="2.8179%" y="421" width="0.0687%" height="15" fill="rgb(238,167,29)" fg:x="41" fg:w="1"/><text x="3.0679%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="2.8179%" y="405" width="0.0687%" height="15" fill="rgb(232,182,51)" fg:x="41" fg:w="1"/><text x="3.0679%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="2.8179%" y="389" width="0.0687%" height="15" fill="rgb(231,60,39)" fg:x="41" fg:w="1"/><text x="3.0679%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="2.8179%" y="373" width="0.0687%" height="15" fill="rgb(208,69,12)" fg:x="41" fg:w="1"/><text x="3.0679%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="2.8179%" y="357" width="0.0687%" height="15" fill="rgb(235,93,37)" fg:x="41" fg:w="1"/><text x="3.0679%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="2.8179%" y="341" width="0.0687%" height="15" fill="rgb(213,116,39)" fg:x="41" fg:w="1"/><text x="3.0679%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="2.8179%" y="325" width="0.0687%" height="15" fill="rgb(222,207,29)" fg:x="41" fg:w="1"/><text x="3.0679%" y="335.50"></text></g><g><title>keccak::f1600 (1 samples, 0.07%)</title><rect x="2.8866%" y="485" width="0.0687%" height="15" fill="rgb(206,96,30)" fg:x="42" fg:w="1"/><text x="3.1366%" y="495.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (4 samples, 0.27%)</title><rect x="2.9553%" y="485" width="0.2749%" height="15" fill="rgb(218,138,4)" fg:x="43" fg:w="4"/><text x="3.2053%" y="495.50"></text></g><g><title>revm::instructions::bitwise::slt (1 samples, 0.07%)</title><rect x="3.2302%" y="485" width="0.0687%" height="15" fill="rgb(250,191,14)" fg:x="47" fg:w="1"/><text x="3.4802%" y="495.50"></text></g><g><title>revm::instructions::control::jumpi (4 samples, 0.27%)</title><rect x="3.2990%" y="485" width="0.2749%" height="15" fill="rgb(239,60,40)" fg:x="48" fg:w="4"/><text x="3.5490%" y="495.50"></text></g><g><title>revm::instructions::memory::mload (5 samples, 0.34%)</title><rect x="3.5739%" y="485" width="0.3436%" height="15" fill="rgb(206,27,48)" fg:x="52" fg:w="5"/><text x="3.8239%" y="495.50"></text></g><g><title>revm::interpreter::stack::Stack::len (5 samples, 0.34%)</title><rect x="3.5739%" y="469" width="0.3436%" height="15" fill="rgb(225,35,8)" fg:x="52" fg:w="5"/><text x="3.8239%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5 samples, 0.34%)</title><rect x="3.5739%" y="453" width="0.3436%" height="15" fill="rgb(250,213,24)" fg:x="52" fg:w="5"/><text x="3.8239%" y="463.50"></text></g><g><title>revm::interpreter::memory::Memory::resize (2 samples, 0.14%)</title><rect x="4.1237%" y="469" width="0.1375%" height="15" fill="rgb(247,123,22)" fg:x="60" fg:w="2"/><text x="4.3737%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 0.14%)</title><rect x="4.1237%" y="453" width="0.1375%" height="15" fill="rgb(231,138,38)" fg:x="60" fg:w="2"/><text x="4.3737%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.14%)</title><rect x="4.1237%" y="437" width="0.1375%" height="15" fill="rgb(231,145,46)" fg:x="60" fg:w="2"/><text x="4.3737%" y="447.50"></text></g><g><title>core::ptr::write (2 samples, 0.14%)</title><rect x="4.1237%" y="421" width="0.1375%" height="15" fill="rgb(251,118,11)" fg:x="60" fg:w="2"/><text x="4.3737%" y="431.50"></text></g><g><title>revm::instructions::memory::mstore (13 samples, 0.89%)</title><rect x="3.9175%" y="485" width="0.8935%" height="15" fill="rgb(217,147,25)" fg:x="57" fg:w="13"/><text x="4.1675%" y="495.50"></text></g><g><title>revm::interpreter::stack::Stack::len (8 samples, 0.55%)</title><rect x="4.2612%" y="469" width="0.5498%" height="15" fill="rgb(247,81,37)" fg:x="62" fg:w="8"/><text x="4.5112%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (8 samples, 0.55%)</title><rect x="4.2612%" y="453" width="0.5498%" height="15" fill="rgb(209,12,38)" fg:x="62" fg:w="8"/><text x="4.5112%" y="463.50"></text></g><g><title>[unknown] (36 samples, 2.47%)</title><rect x="2.8179%" y="501" width="2.4742%" height="15" fill="rgb(227,1,9)" fg:x="41" fg:w="36"/><text x="3.0679%" y="511.50">[u..</text></g><g><title>ruint::div::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::div_rem (7 samples, 0.48%)</title><rect x="4.8110%" y="485" width="0.4811%" height="15" fill="rgb(248,47,43)" fg:x="70" fg:w="7"/><text x="5.0610%" y="495.50"></text></g><g><title>_init (1 samples, 0.07%)</title><rect x="5.2921%" y="501" width="0.0687%" height="15" fill="rgb(221,10,30)" fg:x="77" fg:w="1"/><text x="5.5421%" y="511.50"></text></g><g><title>__pthread_initialize_minimal_internal (1 samples, 0.07%)</title><rect x="5.2921%" y="485" width="0.0687%" height="15" fill="rgb(210,229,1)" fg:x="77" fg:w="1"/><text x="5.5421%" y="495.50"></text></g><g><title>__GI_getrlimit64 (1 samples, 0.07%)</title><rect x="5.2921%" y="469" width="0.0687%" height="15" fill="rgb(222,148,37)" fg:x="77" fg:w="1"/><text x="5.5421%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.2921%" y="453" width="0.0687%" height="15" fill="rgb(234,67,33)" fg:x="77" fg:w="1"/><text x="5.5421%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.2921%" y="437" width="0.0687%" height="15" fill="rgb(247,98,35)" fg:x="77" fg:w="1"/><text x="5.5421%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.2921%" y="421" width="0.0687%" height="15" fill="rgb(247,138,52)" fg:x="77" fg:w="1"/><text x="5.5421%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.2921%" y="405" width="0.0687%" height="15" fill="rgb(213,79,30)" fg:x="77" fg:w="1"/><text x="5.5421%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.2921%" y="389" width="0.0687%" height="15" fill="rgb(246,177,23)" fg:x="77" fg:w="1"/><text x="5.5421%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.2921%" y="373" width="0.0687%" height="15" fill="rgb(230,62,27)" fg:x="77" fg:w="1"/><text x="5.5421%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.2921%" y="357" width="0.0687%" height="15" fill="rgb(216,154,8)" fg:x="77" fg:w="1"/><text x="5.5421%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.2921%" y="341" width="0.0687%" height="15" fill="rgb(244,35,45)" fg:x="77" fg:w="1"/><text x="5.5421%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::Interpreter&gt; (1 samples, 0.07%)</title><rect x="5.3608%" y="341" width="0.0687%" height="15" fill="rgb(251,115,12)" fg:x="78" fg:w="1"/><text x="5.6108%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::memory::Memory&gt; (1 samples, 0.07%)</title><rect x="5.3608%" y="325" width="0.0687%" height="15" fill="rgb(240,54,50)" fg:x="78" fg:w="1"/><text x="5.6108%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.07%)</title><rect x="5.3608%" y="309" width="0.0687%" height="15" fill="rgb(233,84,52)" fg:x="78" fg:w="1"/><text x="5.6108%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.07%)</title><rect x="5.3608%" y="293" width="0.0687%" height="15" fill="rgb(207,117,47)" fg:x="78" fg:w="1"/><text x="5.6108%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="5.3608%" y="277" width="0.0687%" height="15" fill="rgb(249,43,39)" fg:x="78" fg:w="1"/><text x="5.6108%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.07%)</title><rect x="5.3608%" y="261" width="0.0687%" height="15" fill="rgb(209,38,44)" fg:x="78" fg:w="1"/><text x="5.6108%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.07%)</title><rect x="5.3608%" y="245" width="0.0687%" height="15" fill="rgb(236,212,23)" fg:x="78" fg:w="1"/><text x="5.6108%" y="255.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.07%)</title><rect x="5.3608%" y="229" width="0.0687%" height="15" fill="rgb(242,79,21)" fg:x="78" fg:w="1"/><text x="5.6108%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.07%)</title><rect x="5.3608%" y="213" width="0.0687%" height="15" fill="rgb(211,96,35)" fg:x="78" fg:w="1"/><text x="5.6108%" y="223.50"></text></g><g><title>__GI_munmap (1 samples, 0.07%)</title><rect x="5.3608%" y="197" width="0.0687%" height="15" fill="rgb(253,215,40)" fg:x="78" fg:w="1"/><text x="5.6108%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.3608%" y="181" width="0.0687%" height="15" fill="rgb(211,81,21)" fg:x="78" fg:w="1"/><text x="5.6108%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.3608%" y="165" width="0.0687%" height="15" fill="rgb(208,190,38)" fg:x="78" fg:w="1"/><text x="5.6108%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.3608%" y="149" width="0.0687%" height="15" fill="rgb(235,213,38)" fg:x="78" fg:w="1"/><text x="5.6108%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.3608%" y="133" width="0.0687%" height="15" fill="rgb(237,122,38)" fg:x="78" fg:w="1"/><text x="5.6108%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.3608%" y="117" width="0.0687%" height="15" fill="rgb(244,218,35)" fg:x="78" fg:w="1"/><text x="5.6108%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.3608%" y="101" width="0.0687%" height="15" fill="rgb(240,68,47)" fg:x="78" fg:w="1"/><text x="5.6108%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.3608%" y="85" width="0.0687%" height="15" fill="rgb(210,16,53)" fg:x="78" fg:w="1"/><text x="5.6108%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.3608%" y="69" width="0.0687%" height="15" fill="rgb(235,124,12)" fg:x="78" fg:w="1"/><text x="5.6108%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.3608%" y="53" width="0.0687%" height="15" fill="rgb(224,169,11)" fg:x="78" fg:w="1"/><text x="5.6108%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="5.3608%" y="37" width="0.0687%" height="15" fill="rgb(250,166,2)" fg:x="78" fg:w="1"/><text x="5.6108%" y="47.50"></text></g><g><title>&lt;revm::instructions::Return as core::cmp::PartialEq&gt;::eq (16 samples, 1.10%)</title><rect x="10.3780%" y="325" width="1.0997%" height="15" fill="rgb(242,216,29)" fg:x="151" fg:w="16"/><text x="10.6280%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (7 samples, 0.48%)</title><rect x="11.4777%" y="325" width="0.4811%" height="15" fill="rgb(230,116,27)" fg:x="167" fg:w="7"/><text x="11.7277%" y="335.50"></text></g><g><title>core::cmp::PartialOrd::gt (1 samples, 0.07%)</title><rect x="34.5017%" y="309" width="0.0687%" height="15" fill="rgb(228,99,48)" fg:x="502" fg:w="1"/><text x="34.7517%" y="319.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::PartialOrd for ruint::Uint&lt;_,_&gt;&gt;::partial_cmp (1 samples, 0.07%)</title><rect x="34.5017%" y="293" width="0.0687%" height="15" fill="rgb(253,11,6)" fg:x="502" fg:w="1"/><text x="34.7517%" y="303.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::Ord for ruint::Uint&lt;_,_&gt;&gt;::cmp (1 samples, 0.07%)</title><rect x="34.5017%" y="277" width="0.0687%" height="15" fill="rgb(247,143,39)" fg:x="502" fg:w="1"/><text x="34.7517%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::lt (1 samples, 0.07%)</title><rect x="34.5704%" y="309" width="0.0687%" height="15" fill="rgb(236,97,10)" fg:x="503" fg:w="1"/><text x="34.8204%" y="319.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::PartialOrd for ruint::Uint&lt;_,_&gt;&gt;::partial_cmp (1 samples, 0.07%)</title><rect x="34.5704%" y="293" width="0.0687%" height="15" fill="rgb(233,208,19)" fg:x="503" fg:w="1"/><text x="34.8204%" y="303.50"></text></g><g><title>ruint::cmp::&lt;impl core::cmp::Ord for ruint::Uint&lt;_,_&gt;&gt;::cmp (1 samples, 0.07%)</title><rect x="34.5704%" y="277" width="0.0687%" height="15" fill="rgb(216,164,2)" fg:x="503" fg:w="1"/><text x="34.8204%" y="287.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.41%)</title><rect x="38.4880%" y="277" width="0.4124%" height="15" fill="rgb(220,129,5)" fg:x="560" fg:w="6"/><text x="38.7380%" y="287.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (6 samples, 0.41%)</title><rect x="38.4880%" y="261" width="0.4124%" height="15" fill="rgb(242,17,10)" fg:x="560" fg:w="6"/><text x="38.7380%" y="271.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (6 samples, 0.41%)</title><rect x="38.4880%" y="245" width="0.4124%" height="15" fill="rgb(242,107,0)" fg:x="560" fg:w="6"/><text x="38.7380%" y="255.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.34%)</title><rect x="38.9003%" y="261" width="0.3436%" height="15" fill="rgb(251,28,31)" fg:x="566" fg:w="5"/><text x="39.1503%" y="271.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (5 samples, 0.34%)</title><rect x="38.9003%" y="245" width="0.3436%" height="15" fill="rgb(233,223,10)" fg:x="566" fg:w="5"/><text x="39.1503%" y="255.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (5 samples, 0.34%)</title><rect x="38.9003%" y="229" width="0.3436%" height="15" fill="rgb(215,21,27)" fg:x="566" fg:w="5"/><text x="39.1503%" y="239.50"></text></g><g><title>revm::instructions::i256::two_compl_mut (1 samples, 0.07%)</title><rect x="39.2440%" y="261" width="0.0687%" height="15" fill="rgb(232,23,21)" fg:x="571" fg:w="1"/><text x="39.4940%" y="271.50"></text></g><g><title>revm::instructions::i256::two_compl (1 samples, 0.07%)</title><rect x="39.2440%" y="245" width="0.0687%" height="15" fill="rgb(244,5,23)" fg:x="571" fg:w="1"/><text x="39.4940%" y="255.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_neg (1 samples, 0.07%)</title><rect x="39.2440%" y="229" width="0.0687%" height="15" fill="rgb(226,81,46)" fg:x="571" fg:w="1"/><text x="39.4940%" y="239.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_neg (1 samples, 0.07%)</title><rect x="39.2440%" y="213" width="0.0687%" height="15" fill="rgb(247,70,30)" fg:x="571" fg:w="1"/><text x="39.4940%" y="223.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (1 samples, 0.07%)</title><rect x="39.2440%" y="197" width="0.0687%" height="15" fill="rgb(212,68,19)" fg:x="571" fg:w="1"/><text x="39.4940%" y="207.50"></text></g><g><title>revm::instructions::i256::i256_sign (10 samples, 0.69%)</title><rect x="38.9003%" y="277" width="0.6873%" height="15" fill="rgb(240,187,13)" fg:x="566" fg:w="10"/><text x="39.1503%" y="287.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::bit (4 samples, 0.27%)</title><rect x="39.3127%" y="261" width="0.2749%" height="15" fill="rgb(223,113,26)" fg:x="572" fg:w="4"/><text x="39.5627%" y="271.50"></text></g><g><title>core::cmp::PartialEq::ne (6 samples, 0.41%)</title><rect x="39.9313%" y="261" width="0.4124%" height="15" fill="rgb(206,192,2)" fg:x="581" fg:w="6"/><text x="40.1813%" y="271.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.41%)</title><rect x="39.9313%" y="245" width="0.4124%" height="15" fill="rgb(241,108,4)" fg:x="581" fg:w="6"/><text x="40.1813%" y="255.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (6 samples, 0.41%)</title><rect x="39.9313%" y="229" width="0.4124%" height="15" fill="rgb(247,173,49)" fg:x="581" fg:w="6"/><text x="40.1813%" y="239.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (6 samples, 0.41%)</title><rect x="39.9313%" y="213" width="0.4124%" height="15" fill="rgb(224,114,35)" fg:x="581" fg:w="6"/><text x="40.1813%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (5 samples, 0.34%)</title><rect x="42.2680%" y="245" width="0.3436%" height="15" fill="rgb(245,159,27)" fg:x="615" fg:w="5"/><text x="42.5180%" y="255.50"></text></g><g><title>ruint::algorithms::div::div::{{closure}} (3 samples, 0.21%)</title><rect x="42.4055%" y="229" width="0.2062%" height="15" fill="rgb(245,172,44)" fg:x="617" fg:w="3"/><text x="42.6555%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.07%)</title><rect x="42.6117%" y="245" width="0.0687%" height="15" fill="rgb(236,23,11)" fg:x="620" fg:w="1"/><text x="42.8617%" y="255.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.07%)</title><rect x="42.6117%" y="229" width="0.0687%" height="15" fill="rgb(205,117,38)" fg:x="620" fg:w="1"/><text x="42.8617%" y="239.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.07%)</title><rect x="42.6117%" y="213" width="0.0687%" height="15" fill="rgb(237,72,25)" fg:x="620" fg:w="1"/><text x="42.8617%" y="223.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::Shl&lt;u32&gt;&gt;::shl (1 samples, 0.07%)</title><rect x="43.2302%" y="229" width="0.0687%" height="15" fill="rgb(244,70,9)" fg:x="629" fg:w="1"/><text x="43.4802%" y="239.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shl&lt;u32&gt;&gt;::shl (1 samples, 0.07%)</title><rect x="43.2302%" y="213" width="0.0687%" height="15" fill="rgb(217,125,39)" fg:x="629" fg:w="1"/><text x="43.4802%" y="223.50"></text></g><g><title>&lt;u128 as ruint::algorithms::DoubleWord&lt;u64&gt;&gt;::join (6 samples, 0.41%)</title><rect x="43.2990%" y="229" width="0.4124%" height="15" fill="rgb(235,36,10)" fg:x="630" fg:w="6"/><text x="43.5490%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (1 samples, 0.07%)</title><rect x="43.7113%" y="229" width="0.0687%" height="15" fill="rgb(251,123,47)" fg:x="636" fg:w="1"/><text x="43.9613%" y="239.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Add&gt;::add (1 samples, 0.07%)</title><rect x="44.1237%" y="213" width="0.0687%" height="15" fill="rgb(221,13,13)" fg:x="642" fg:w="1"/><text x="44.3737%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.07%)</title><rect x="44.1237%" y="197" width="0.0687%" height="15" fill="rgb(238,131,9)" fg:x="642" fg:w="1"/><text x="44.3737%" y="207.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Mul&gt;::mul (2 samples, 0.14%)</title><rect x="44.1924%" y="213" width="0.1375%" height="15" fill="rgb(211,50,8)" fg:x="643" fg:w="2"/><text x="44.4424%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2 samples, 0.14%)</title><rect x="44.1924%" y="197" width="0.1375%" height="15" fill="rgb(245,182,24)" fg:x="643" fg:w="2"/><text x="44.4424%" y="207.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Sub&gt;::sub (5 samples, 0.34%)</title><rect x="44.3299%" y="213" width="0.3436%" height="15" fill="rgb(242,14,37)" fg:x="645" fg:w="5"/><text x="44.5799%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (5 samples, 0.34%)</title><rect x="44.3299%" y="197" width="0.3436%" height="15" fill="rgb(246,228,12)" fg:x="645" fg:w="5"/><text x="44.5799%" y="207.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::Shl&lt;usize&gt;&gt;::shl (1 samples, 0.07%)</title><rect x="44.6735%" y="213" width="0.0687%" height="15" fill="rgb(213,55,15)" fg:x="650" fg:w="1"/><text x="44.9235%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_shl (1 samples, 0.07%)</title><rect x="44.6735%" y="197" width="0.0687%" height="15" fill="rgb(209,9,3)" fg:x="650" fg:w="1"/><text x="44.9235%" y="207.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::Shr&lt;usize&gt;&gt;::shr (3 samples, 0.21%)</title><rect x="44.7423%" y="213" width="0.2062%" height="15" fill="rgb(230,59,30)" fg:x="651" fg:w="3"/><text x="44.9923%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_shr (3 samples, 0.21%)</title><rect x="44.7423%" y="197" width="0.2062%" height="15" fill="rgb(209,121,21)" fg:x="651" fg:w="3"/><text x="44.9923%" y="207.50"></text></g><g><title>ruint::algorithms::div::reciprocal::mul_hi (2 samples, 0.14%)</title><rect x="44.9485%" y="213" width="0.1375%" height="15" fill="rgb(220,109,13)" fg:x="654" fg:w="2"/><text x="45.1985%" y="223.50"></text></g><g><title>ruint::algorithms::div::reciprocal::reciprocal_mg10 (20 samples, 1.37%)</title><rect x="43.7801%" y="229" width="1.3746%" height="15" fill="rgb(232,18,1)" fg:x="637" fg:w="20"/><text x="44.0301%" y="239.50"></text></g><g><title>ruint::algorithms::div::reciprocal::muladd_hi (1 samples, 0.07%)</title><rect x="45.0859%" y="213" width="0.0687%" height="15" fill="rgb(215,41,42)" fg:x="656" fg:w="1"/><text x="45.3359%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.21%)</title><rect x="45.9107%" y="213" width="0.2062%" height="15" fill="rgb(224,123,36)" fg:x="668" fg:w="3"/><text x="46.1607%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (3 samples, 0.21%)</title><rect x="46.1168%" y="213" width="0.2062%" height="15" fill="rgb(240,125,3)" fg:x="671" fg:w="3"/><text x="46.3668%" y="223.50"></text></g><g><title>ruint::algorithms::div::small::div_2x1_mg10 (18 samples, 1.24%)</title><rect x="45.1546%" y="229" width="1.2371%" height="15" fill="rgb(205,98,50)" fg:x="657" fg:w="18"/><text x="45.4046%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (1 samples, 0.07%)</title><rect x="46.3230%" y="213" width="0.0687%" height="15" fill="rgb(205,185,37)" fg:x="674" fg:w="1"/><text x="46.5730%" y="223.50"></text></g><g><title>ruint::algorithms::div::small::div_nx1 (55 samples, 3.78%)</title><rect x="42.6804%" y="245" width="3.7801%" height="15" fill="rgb(238,207,15)" fg:x="621" fg:w="55"/><text x="42.9304%" y="255.50">ruin..</text></g><g><title>ruint::algorithms::div::small::div_nx1_normalized (1 samples, 0.07%)</title><rect x="46.3918%" y="229" width="0.0687%" height="15" fill="rgb(213,199,42)" fg:x="675" fg:w="1"/><text x="46.6418%" y="239.50"></text></g><g><title>ruint::algorithms::div::reciprocal::reciprocal_mg10 (1 samples, 0.07%)</title><rect x="46.3918%" y="213" width="0.0687%" height="15" fill="rgb(235,201,11)" fg:x="675" fg:w="1"/><text x="46.6418%" y="223.50"></text></g><g><title>ruint::algorithms::div::reciprocal::mul_hi (1 samples, 0.07%)</title><rect x="46.3918%" y="197" width="0.0687%" height="15" fill="rgb(207,46,11)" fg:x="675" fg:w="1"/><text x="46.6418%" y="207.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::Shr&lt;u32&gt;&gt;::shr (2 samples, 0.14%)</title><rect x="46.5979%" y="229" width="0.1375%" height="15" fill="rgb(241,35,35)" fg:x="678" fg:w="2"/><text x="46.8479%" y="239.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;u32&gt;&gt;::shr (2 samples, 0.14%)</title><rect x="46.5979%" y="213" width="0.1375%" height="15" fill="rgb(243,32,47)" fg:x="678" fg:w="2"/><text x="46.8479%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.07%)</title><rect x="46.9416%" y="213" width="0.0687%" height="15" fill="rgb(247,202,23)" fg:x="683" fg:w="1"/><text x="47.1916%" y="223.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Mul&gt;::mul (1 samples, 0.07%)</title><rect x="47.0103%" y="197" width="0.0687%" height="15" fill="rgb(219,102,11)" fg:x="684" fg:w="1"/><text x="47.2603%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.07%)</title><rect x="47.0103%" y="181" width="0.0687%" height="15" fill="rgb(243,110,44)" fg:x="684" fg:w="1"/><text x="47.2603%" y="191.50"></text></g><g><title>ruint::algorithms::div::reciprocal::mul_hi (1 samples, 0.07%)</title><rect x="47.0790%" y="197" width="0.0687%" height="15" fill="rgb(222,74,54)" fg:x="685" fg:w="1"/><text x="47.3290%" y="207.50"></text></g><g><title>ruint::algorithms::div::reciprocal::reciprocal_2_mg10 (8 samples, 0.55%)</title><rect x="46.7354%" y="229" width="0.5498%" height="15" fill="rgb(216,99,12)" fg:x="680" fg:w="8"/><text x="46.9854%" y="239.50"></text></g><g><title>ruint::algorithms::div::reciprocal::reciprocal_mg10 (4 samples, 0.27%)</title><rect x="47.0103%" y="213" width="0.2749%" height="15" fill="rgb(226,22,26)" fg:x="684" fg:w="4"/><text x="47.2603%" y="223.50"></text></g><g><title>ruint::algorithms::div::reciprocal::muladd_hi (2 samples, 0.14%)</title><rect x="47.1478%" y="197" width="0.1375%" height="15" fill="rgb(217,163,10)" fg:x="686" fg:w="2"/><text x="47.3978%" y="207.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (186 samples, 12.78%)</title><rect x="34.6392%" y="309" width="12.7835%" height="15" fill="rgb(213,25,53)" fg:x="504" fg:w="186"/><text x="34.8892%" y="319.50">revm::instructions:..</text></g><g><title>revm::instructions::i256::i256_div (180 samples, 12.37%)</title><rect x="35.0515%" y="293" width="12.3711%" height="15" fill="rgb(252,105,26)" fg:x="510" fg:w="180"/><text x="35.3015%" y="303.50">revm::instructions..</text></g><g><title>ruint::div::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::div_rem (114 samples, 7.84%)</title><rect x="39.5876%" y="277" width="7.8351%" height="15" fill="rgb(220,39,43)" fg:x="576" fg:w="114"/><text x="39.8376%" y="287.50">ruint::div:..</text></g><g><title>ruint::algorithms::div::div (103 samples, 7.08%)</title><rect x="40.3436%" y="261" width="7.0790%" height="15" fill="rgb(229,68,48)" fg:x="587" fg:w="103"/><text x="40.5936%" y="271.50">ruint::al..</text></g><g><title>ruint::algorithms::div::small::div_nx2 (14 samples, 0.96%)</title><rect x="46.4605%" y="245" width="0.9622%" height="15" fill="rgb(252,8,32)" fg:x="676" fg:w="14"/><text x="46.7105%" y="255.50"></text></g><g><title>ruint::algorithms::div::small::div_3x2_mg10 (2 samples, 0.14%)</title><rect x="47.2852%" y="229" width="0.1375%" height="15" fill="rgb(223,20,43)" fg:x="688" fg:w="2"/><text x="47.5352%" y="239.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_sub (1 samples, 0.07%)</title><rect x="47.3540%" y="213" width="0.0687%" height="15" fill="rgb(229,81,49)" fg:x="689" fg:w="1"/><text x="47.6040%" y="223.50"></text></g><g><title>revm::instructions::bitwise::iszero (8 samples, 0.55%)</title><rect x="47.4227%" y="309" width="0.5498%" height="15" fill="rgb(236,28,36)" fg:x="690" fg:w="8"/><text x="47.6727%" y="319.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.55%)</title><rect x="47.4227%" y="293" width="0.5498%" height="15" fill="rgb(249,185,26)" fg:x="690" fg:w="8"/><text x="47.6727%" y="303.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (8 samples, 0.55%)</title><rect x="47.4227%" y="277" width="0.5498%" height="15" fill="rgb(249,174,33)" fg:x="690" fg:w="8"/><text x="47.6727%" y="287.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (8 samples, 0.55%)</title><rect x="47.4227%" y="261" width="0.5498%" height="15" fill="rgb(233,201,37)" fg:x="690" fg:w="8"/><text x="47.6727%" y="271.50"></text></g><g><title>revm::instructions::bitwise::sgt (1 samples, 0.07%)</title><rect x="47.9725%" y="309" width="0.0687%" height="15" fill="rgb(221,78,26)" fg:x="698" fg:w="1"/><text x="48.2225%" y="319.50"></text></g><g><title>revm::instructions::i256::i256_cmp (1 samples, 0.07%)</title><rect x="47.9725%" y="293" width="0.0687%" height="15" fill="rgb(250,127,30)" fg:x="698" fg:w="1"/><text x="48.2225%" y="303.50"></text></g><g><title>revm::instructions::i256::i256_sign (1 samples, 0.07%)</title><rect x="47.9725%" y="277" width="0.0687%" height="15" fill="rgb(230,49,44)" fg:x="698" fg:w="1"/><text x="48.2225%" y="287.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::bit (1 samples, 0.07%)</title><rect x="47.9725%" y="261" width="0.0687%" height="15" fill="rgb(229,67,23)" fg:x="698" fg:w="1"/><text x="48.2225%" y="271.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.21%)</title><rect x="48.5911%" y="261" width="0.2062%" height="15" fill="rgb(249,83,47)" fg:x="707" fg:w="3"/><text x="48.8411%" y="271.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (3 samples, 0.21%)</title><rect x="48.5911%" y="245" width="0.2062%" height="15" fill="rgb(215,43,3)" fg:x="707" fg:w="3"/><text x="48.8411%" y="255.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (3 samples, 0.21%)</title><rect x="48.5911%" y="229" width="0.2062%" height="15" fill="rgb(238,154,13)" fg:x="707" fg:w="3"/><text x="48.8411%" y="239.50"></text></g><g><title>revm::instructions::bitwise::slt (14 samples, 0.96%)</title><rect x="48.0412%" y="309" width="0.9622%" height="15" fill="rgb(219,56,2)" fg:x="699" fg:w="14"/><text x="48.2912%" y="319.50"></text></g><g><title>revm::instructions::i256::i256_cmp (11 samples, 0.76%)</title><rect x="48.2474%" y="293" width="0.7560%" height="15" fill="rgb(233,0,4)" fg:x="702" fg:w="11"/><text x="48.4974%" y="303.50"></text></g><g><title>revm::instructions::i256::i256_sign (8 samples, 0.55%)</title><rect x="48.4536%" y="277" width="0.5498%" height="15" fill="rgb(235,30,7)" fg:x="705" fg:w="8"/><text x="48.7036%" y="287.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::bit (3 samples, 0.21%)</title><rect x="48.7973%" y="261" width="0.2062%" height="15" fill="rgb(250,79,13)" fg:x="710" fg:w="3"/><text x="49.0473%" y="271.50"></text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (6 samples, 0.41%)</title><rect x="50.0344%" y="293" width="0.4124%" height="15" fill="rgb(211,146,34)" fg:x="728" fg:w="6"/><text x="50.2844%" y="303.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (6 samples, 0.41%)</title><rect x="50.0344%" y="277" width="0.4124%" height="15" fill="rgb(228,22,38)" fg:x="728" fg:w="6"/><text x="50.2844%" y="287.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump (4 samples, 0.27%)</title><rect x="50.1718%" y="261" width="0.2749%" height="15" fill="rgb(235,168,5)" fg:x="730" fg:w="4"/><text x="50.4218%" y="271.50"></text></g><g><title>revm::interpreter::stack::Stack::len (3 samples, 0.21%)</title><rect x="50.4467%" y="293" width="0.2062%" height="15" fill="rgb(221,155,16)" fg:x="734" fg:w="3"/><text x="50.6967%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.21%)</title><rect x="50.4467%" y="277" width="0.2062%" height="15" fill="rgb(215,215,53)" fg:x="734" fg:w="3"/><text x="50.6967%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (5 samples, 0.34%)</title><rect x="50.6529%" y="293" width="0.3436%" height="15" fill="rgb(223,4,10)" fg:x="737" fg:w="5"/><text x="50.9029%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.14%)</title><rect x="50.8591%" y="277" width="0.1375%" height="15" fill="rgb(234,103,6)" fg:x="740" fg:w="2"/><text x="51.1091%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (8 samples, 0.55%)</title><rect x="50.9966%" y="229" width="0.5498%" height="15" fill="rgb(227,97,0)" fg:x="742" fg:w="8"/><text x="51.2466%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.55%)</title><rect x="50.9966%" y="213" width="0.5498%" height="15" fill="rgb(234,150,53)" fg:x="742" fg:w="8"/><text x="51.2466%" y="223.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (8 samples, 0.55%)</title><rect x="50.9966%" y="197" width="0.5498%" height="15" fill="rgb(228,201,54)" fg:x="742" fg:w="8"/><text x="51.2466%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position::check::{{closure}} (4 samples, 0.27%)</title><rect x="51.2715%" y="181" width="0.2749%" height="15" fill="rgb(222,22,37)" fg:x="746" fg:w="4"/><text x="51.5215%" y="191.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::leading_zeros::{{closure}} (4 samples, 0.27%)</title><rect x="51.2715%" y="165" width="0.2749%" height="15" fill="rgb(237,53,32)" fg:x="746" fg:w="4"/><text x="51.5215%" y="175.50"></text></g><g><title>revm::instructions::control::jump (41 samples, 2.82%)</title><rect x="49.0034%" y="309" width="2.8179%" height="15" fill="rgb(233,25,53)" fg:x="713" fg:w="41"/><text x="49.2534%" y="319.50">re..</text></g><g><title>ruint::from::&lt;impl core::convert::TryFrom&lt;ruint::Uint&lt;_,_&gt;&gt; for usize&gt;::try_from (12 samples, 0.82%)</title><rect x="50.9966%" y="293" width="0.8247%" height="15" fill="rgb(210,40,34)" fg:x="742" fg:w="12"/><text x="51.2466%" y="303.50"></text></g><g><title>ruint::from::&lt;impl core::convert::TryFrom&lt;&amp;ruint::Uint&lt;_,_&gt;&gt; for usize&gt;::try_from (12 samples, 0.82%)</title><rect x="50.9966%" y="277" width="0.8247%" height="15" fill="rgb(241,220,44)" fg:x="742" fg:w="12"/><text x="51.2466%" y="287.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::bit_len (12 samples, 0.82%)</title><rect x="50.9966%" y="261" width="0.8247%" height="15" fill="rgb(235,28,35)" fg:x="742" fg:w="12"/><text x="51.2466%" y="271.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::leading_zeros (12 samples, 0.82%)</title><rect x="50.9966%" y="245" width="0.8247%" height="15" fill="rgb(210,56,17)" fg:x="742" fg:w="12"/><text x="51.2466%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (4 samples, 0.27%)</title><rect x="51.5464%" y="229" width="0.2749%" height="15" fill="rgb(224,130,29)" fg:x="750" fg:w="4"/><text x="51.7964%" y="239.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::leading_zeros::{{closure}} (4 samples, 0.27%)</title><rect x="51.5464%" y="213" width="0.2749%" height="15" fill="rgb(235,212,8)" fg:x="750" fg:w="4"/><text x="51.7964%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (4 samples, 0.27%)</title><rect x="51.5464%" y="197" width="0.2749%" height="15" fill="rgb(223,33,50)" fg:x="750" fg:w="4"/><text x="51.7964%" y="207.50"></text></g><g><title>revm::gas::Gas::record_cost (13 samples, 0.89%)</title><rect x="52.1649%" y="293" width="0.8935%" height="15" fill="rgb(219,149,13)" fg:x="759" fg:w="13"/><text x="52.4149%" y="303.50"></text></g><g><title>revm::gas::Gas::record_cost (3 samples, 0.21%)</title><rect x="53.0584%" y="277" width="0.2062%" height="15" fill="rgb(250,156,29)" fg:x="772" fg:w="3"/><text x="53.3084%" y="287.50"></text></g><g><title>revm::instructions::control::jumpdest (28 samples, 1.92%)</title><rect x="51.8213%" y="309" width="1.9244%" height="15" fill="rgb(216,193,19)" fg:x="754" fg:w="28"/><text x="52.0713%" y="319.50">r..</text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (10 samples, 0.69%)</title><rect x="53.0584%" y="293" width="0.6873%" height="15" fill="rgb(216,135,14)" fg:x="772" fg:w="10"/><text x="53.3084%" y="303.50"></text></g><g><title>revm::interpreter::contract::Contract::gas_block (7 samples, 0.48%)</title><rect x="53.2646%" y="277" width="0.4811%" height="15" fill="rgb(241,47,5)" fg:x="775" fg:w="7"/><text x="53.5146%" y="287.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::gas_block (7 samples, 0.48%)</title><rect x="53.2646%" y="261" width="0.4811%" height="15" fill="rgb(233,42,35)" fg:x="775" fg:w="7"/><text x="53.5146%" y="271.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::gas_block (7 samples, 0.48%)</title><rect x="53.2646%" y="245" width="0.4811%" height="15" fill="rgb(231,13,6)" fg:x="775" fg:w="7"/><text x="53.5146%" y="255.50"></text></g><g><title>core::cmp::PartialEq::ne (14 samples, 0.96%)</title><rect x="55.6701%" y="293" width="0.9622%" height="15" fill="rgb(207,181,40)" fg:x="810" fg:w="14"/><text x="55.9201%" y="303.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (14 samples, 0.96%)</title><rect x="55.6701%" y="277" width="0.9622%" height="15" fill="rgb(254,173,49)" fg:x="810" fg:w="14"/><text x="55.9201%" y="287.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (14 samples, 0.96%)</title><rect x="55.6701%" y="261" width="0.9622%" height="15" fill="rgb(221,1,38)" fg:x="810" fg:w="14"/><text x="55.9201%" y="271.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (14 samples, 0.96%)</title><rect x="55.6701%" y="245" width="0.9622%" height="15" fill="rgb(206,124,46)" fg:x="810" fg:w="14"/><text x="55.9201%" y="255.50"></text></g><g><title>revm::gas::Gas::record_cost (2 samples, 0.14%)</title><rect x="56.6323%" y="277" width="0.1375%" height="15" fill="rgb(249,21,11)" fg:x="824" fg:w="2"/><text x="56.8823%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.07%)</title><rect x="56.7010%" y="261" width="0.0687%" height="15" fill="rgb(222,201,40)" fg:x="825" fg:w="1"/><text x="56.9510%" y="271.50"></text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (4 samples, 0.27%)</title><rect x="56.6323%" y="293" width="0.2749%" height="15" fill="rgb(235,61,29)" fg:x="824" fg:w="4"/><text x="56.8823%" y="303.50"></text></g><g><title>revm::interpreter::contract::Contract::gas_block (2 samples, 0.14%)</title><rect x="56.7698%" y="277" width="0.1375%" height="15" fill="rgb(219,207,3)" fg:x="826" fg:w="2"/><text x="57.0198%" y="287.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::gas_block (2 samples, 0.14%)</title><rect x="56.7698%" y="261" width="0.1375%" height="15" fill="rgb(222,56,46)" fg:x="826" fg:w="2"/><text x="57.0198%" y="271.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::gas_block (2 samples, 0.14%)</title><rect x="56.7698%" y="245" width="0.1375%" height="15" fill="rgb(239,76,54)" fg:x="826" fg:w="2"/><text x="57.0198%" y="255.50"></text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (6 samples, 0.41%)</title><rect x="56.9072%" y="293" width="0.4124%" height="15" fill="rgb(231,124,27)" fg:x="828" fg:w="6"/><text x="57.1572%" y="303.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (6 samples, 0.41%)</title><rect x="56.9072%" y="277" width="0.4124%" height="15" fill="rgb(249,195,6)" fg:x="828" fg:w="6"/><text x="57.1572%" y="287.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump (4 samples, 0.27%)</title><rect x="57.0447%" y="261" width="0.2749%" height="15" fill="rgb(237,174,47)" fg:x="830" fg:w="4"/><text x="57.2947%" y="271.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.07%)</title><rect x="57.3196%" y="293" width="0.0687%" height="15" fill="rgb(206,201,31)" fg:x="834" fg:w="1"/><text x="57.5696%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.07%)</title><rect x="57.3196%" y="277" width="0.0687%" height="15" fill="rgb(231,57,52)" fg:x="834" fg:w="1"/><text x="57.5696%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (4 samples, 0.27%)</title><rect x="57.3883%" y="293" width="0.2749%" height="15" fill="rgb(248,177,22)" fg:x="835" fg:w="4"/><text x="57.6383%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (14 samples, 0.96%)</title><rect x="57.8007%" y="229" width="0.9622%" height="15" fill="rgb(215,211,37)" fg:x="841" fg:w="14"/><text x="58.0507%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 0.96%)</title><rect x="57.8007%" y="213" width="0.9622%" height="15" fill="rgb(241,128,51)" fg:x="841" fg:w="14"/><text x="58.0507%" y="223.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (14 samples, 0.96%)</title><rect x="57.8007%" y="197" width="0.9622%" height="15" fill="rgb(227,165,31)" fg:x="841" fg:w="14"/><text x="58.0507%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position::check::{{closure}} (12 samples, 0.82%)</title><rect x="57.9381%" y="181" width="0.8247%" height="15" fill="rgb(228,167,24)" fg:x="843" fg:w="12"/><text x="58.1881%" y="191.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::leading_zeros::{{closure}} (12 samples, 0.82%)</title><rect x="57.9381%" y="165" width="0.8247%" height="15" fill="rgb(228,143,12)" fg:x="843" fg:w="12"/><text x="58.1881%" y="175.50"></text></g><g><title>revm::instructions::control::jumpi (85 samples, 5.84%)</title><rect x="53.7457%" y="309" width="5.8419%" height="15" fill="rgb(249,149,8)" fg:x="782" fg:w="85"/><text x="53.9957%" y="319.50">revm::i..</text></g><g><title>ruint::from::&lt;impl core::convert::TryFrom&lt;ruint::Uint&lt;_,_&gt;&gt; for usize&gt;::try_from (28 samples, 1.92%)</title><rect x="57.6632%" y="293" width="1.9244%" height="15" fill="rgb(243,35,44)" fg:x="839" fg:w="28"/><text x="57.9132%" y="303.50">r..</text></g><g><title>ruint::from::&lt;impl core::convert::TryFrom&lt;&amp;ruint::Uint&lt;_,_&gt;&gt; for usize&gt;::try_from (28 samples, 1.92%)</title><rect x="57.6632%" y="277" width="1.9244%" height="15" fill="rgb(246,89,9)" fg:x="839" fg:w="28"/><text x="57.9132%" y="287.50">r..</text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::bit_len (26 samples, 1.79%)</title><rect x="57.8007%" y="261" width="1.7869%" height="15" fill="rgb(233,213,13)" fg:x="841" fg:w="26"/><text x="58.0507%" y="271.50">r..</text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::leading_zeros (26 samples, 1.79%)</title><rect x="57.8007%" y="245" width="1.7869%" height="15" fill="rgb(233,141,41)" fg:x="841" fg:w="26"/><text x="58.0507%" y="255.50">r..</text></g><g><title>core::option::Option&lt;T&gt;::map_or (12 samples, 0.82%)</title><rect x="58.7629%" y="229" width="0.8247%" height="15" fill="rgb(239,167,4)" fg:x="855" fg:w="12"/><text x="59.0129%" y="239.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::leading_zeros::{{closure}} (12 samples, 0.82%)</title><rect x="58.7629%" y="213" width="0.8247%" height="15" fill="rgb(209,217,16)" fg:x="855" fg:w="12"/><text x="59.0129%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (10 samples, 0.69%)</title><rect x="58.9003%" y="197" width="0.6873%" height="15" fill="rgb(219,88,35)" fg:x="857" fg:w="10"/><text x="59.1503%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.14%)</title><rect x="59.9313%" y="277" width="0.1375%" height="15" fill="rgb(220,193,23)" fg:x="872" fg:w="2"/><text x="60.1813%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (1 samples, 0.07%)</title><rect x="60.0687%" y="277" width="0.0687%" height="15" fill="rgb(230,90,52)" fg:x="874" fg:w="1"/><text x="60.3187%" y="287.50"></text></g><g><title>ahash::operations::folded_multiply (3 samples, 0.21%)</title><rect x="60.4124%" y="213" width="0.2062%" height="15" fill="rgb(252,106,19)" fg:x="879" fg:w="3"/><text x="60.6624%" y="223.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.07%)</title><rect x="60.5498%" y="197" width="0.0687%" height="15" fill="rgb(206,74,20)" fg:x="881" fg:w="1"/><text x="60.7998%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (5 samples, 0.34%)</title><rect x="60.4124%" y="229" width="0.3436%" height="15" fill="rgb(230,138,44)" fg:x="879" fg:w="5"/><text x="60.6624%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.14%)</title><rect x="60.6186%" y="213" width="0.1375%" height="15" fill="rgb(235,182,43)" fg:x="882" fg:w="2"/><text x="60.8686%" y="223.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (4 samples, 0.27%)</title><rect x="60.7560%" y="149" width="0.2749%" height="15" fill="rgb(242,16,51)" fg:x="884" fg:w="4"/><text x="61.0060%" y="159.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 0.14%)</title><rect x="60.8935%" y="133" width="0.1375%" height="15" fill="rgb(248,9,4)" fg:x="886" fg:w="2"/><text x="61.1435%" y="143.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.07%)</title><rect x="60.9622%" y="117" width="0.0687%" height="15" fill="rgb(210,31,22)" fg:x="887" fg:w="1"/><text x="61.2122%" y="127.50"></text></g><g><title>hashbrown::map::make_insert_hash (10 samples, 0.69%)</title><rect x="60.4124%" y="245" width="0.6873%" height="15" fill="rgb(239,54,39)" fg:x="879" fg:w="10"/><text x="60.6624%" y="255.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (5 samples, 0.34%)</title><rect x="60.7560%" y="229" width="0.3436%" height="15" fill="rgb(230,99,41)" fg:x="884" fg:w="5"/><text x="61.0060%" y="239.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (5 samples, 0.34%)</title><rect x="60.7560%" y="213" width="0.3436%" height="15" fill="rgb(253,106,12)" fg:x="884" fg:w="5"/><text x="61.0060%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (5 samples, 0.34%)</title><rect x="60.7560%" y="197" width="0.3436%" height="15" fill="rgb(213,46,41)" fg:x="884" fg:w="5"/><text x="61.0060%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (5 samples, 0.34%)</title><rect x="60.7560%" y="181" width="0.3436%" height="15" fill="rgb(215,133,35)" fg:x="884" fg:w="5"/><text x="61.0060%" y="191.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (5 samples, 0.34%)</title><rect x="60.7560%" y="165" width="0.3436%" height="15" fill="rgb(213,28,5)" fg:x="884" fg:w="5"/><text x="61.0060%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.07%)</title><rect x="61.0309%" y="149" width="0.0687%" height="15" fill="rgb(215,77,49)" fg:x="888" fg:w="1"/><text x="61.2809%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="61.1684%" y="213" width="0.1375%" height="15" fill="rgb(248,100,22)" fg:x="890" fg:w="2"/><text x="61.4184%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.14%)</title><rect x="61.1684%" y="197" width="0.1375%" height="15" fill="rgb(208,67,9)" fg:x="890" fg:w="2"/><text x="61.4184%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (22 samples, 1.51%)</title><rect x="61.3058%" y="213" width="1.5120%" height="15" fill="rgb(219,133,21)" fg:x="892" fg:w="22"/><text x="61.5558%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (22 samples, 1.51%)</title><rect x="61.3058%" y="197" width="1.5120%" height="15" fill="rgb(246,46,29)" fg:x="892" fg:w="22"/><text x="61.5558%" y="207.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (22 samples, 1.51%)</title><rect x="61.3058%" y="181" width="1.5120%" height="15" fill="rgb(246,185,52)" fg:x="892" fg:w="22"/><text x="61.5558%" y="191.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (22 samples, 1.51%)</title><rect x="61.3058%" y="165" width="1.5120%" height="15" fill="rgb(252,136,11)" fg:x="892" fg:w="22"/><text x="61.5558%" y="175.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (22 samples, 1.51%)</title><rect x="61.3058%" y="149" width="1.5120%" height="15" fill="rgb(219,138,53)" fg:x="892" fg:w="22"/><text x="61.5558%" y="159.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.21%)</title><rect x="62.8179%" y="213" width="0.2062%" height="15" fill="rgb(211,51,23)" fg:x="914" fg:w="3"/><text x="63.0679%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.07%)</title><rect x="63.0241%" y="213" width="0.0687%" height="15" fill="rgb(247,221,28)" fg:x="917" fg:w="1"/><text x="63.2741%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.07%)</title><rect x="63.0241%" y="197" width="0.0687%" height="15" fill="rgb(251,222,45)" fg:x="917" fg:w="1"/><text x="63.2741%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.07%)</title><rect x="63.0241%" y="181" width="0.0687%" height="15" fill="rgb(217,162,53)" fg:x="917" fg:w="1"/><text x="63.2741%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (40 samples, 2.75%)</title><rect x="60.4124%" y="261" width="2.7491%" height="15" fill="rgb(229,93,14)" fg:x="879" fg:w="40"/><text x="60.6624%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (30 samples, 2.06%)</title><rect x="61.0997%" y="245" width="2.0619%" height="15" fill="rgb(209,67,49)" fg:x="889" fg:w="30"/><text x="61.3497%" y="255.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (30 samples, 2.06%)</title><rect x="61.0997%" y="229" width="2.0619%" height="15" fill="rgb(213,87,29)" fg:x="889" fg:w="30"/><text x="61.3497%" y="239.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.07%)</title><rect x="63.0928%" y="213" width="0.0687%" height="15" fill="rgb(205,151,52)" fg:x="918" fg:w="1"/><text x="63.3428%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.07%)</title><rect x="63.0928%" y="197" width="0.0687%" height="15" fill="rgb(253,215,39)" fg:x="918" fg:w="1"/><text x="63.3428%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (8 samples, 0.55%)</title><rect x="63.2990%" y="213" width="0.5498%" height="15" fill="rgb(221,220,41)" fg:x="921" fg:w="8"/><text x="63.5490%" y="223.50"></text></g><g><title>ahash::operations::folded_multiply (8 samples, 0.55%)</title><rect x="63.2990%" y="197" width="0.5498%" height="15" fill="rgb(218,133,21)" fg:x="921" fg:w="8"/><text x="63.5490%" y="207.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (7 samples, 0.48%)</title><rect x="63.3677%" y="181" width="0.4811%" height="15" fill="rgb(221,193,43)" fg:x="922" fg:w="7"/><text x="63.6177%" y="191.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.07%)</title><rect x="63.8488%" y="213" width="0.0687%" height="15" fill="rgb(240,128,52)" fg:x="929" fg:w="1"/><text x="64.0988%" y="223.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (1 samples, 0.07%)</title><rect x="63.8488%" y="197" width="0.0687%" height="15" fill="rgb(253,114,12)" fg:x="929" fg:w="1"/><text x="64.0988%" y="207.50"></text></g><g><title>ahash::operations::folded_multiply (7 samples, 0.48%)</title><rect x="64.1237%" y="165" width="0.4811%" height="15" fill="rgb(215,223,47)" fg:x="933" fg:w="7"/><text x="64.3737%" y="175.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.07%)</title><rect x="64.5361%" y="149" width="0.0687%" height="15" fill="rgb(248,225,23)" fg:x="939" fg:w="1"/><text x="64.7861%" y="159.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (14 samples, 0.96%)</title><rect x="63.9175%" y="181" width="0.9622%" height="15" fill="rgb(250,108,0)" fg:x="930" fg:w="14"/><text x="64.1675%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.27%)</title><rect x="64.6048%" y="165" width="0.2749%" height="15" fill="rgb(228,208,7)" fg:x="940" fg:w="4"/><text x="64.8548%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (24 samples, 1.65%)</title><rect x="63.2990%" y="229" width="1.6495%" height="15" fill="rgb(244,45,10)" fg:x="921" fg:w="24"/><text x="63.5490%" y="239.50"></text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (15 samples, 1.03%)</title><rect x="63.9175%" y="213" width="1.0309%" height="15" fill="rgb(207,125,25)" fg:x="930" fg:w="15"/><text x="64.1675%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (15 samples, 1.03%)</title><rect x="63.9175%" y="197" width="1.0309%" height="15" fill="rgb(210,195,18)" fg:x="930" fg:w="15"/><text x="64.1675%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.07%)</title><rect x="64.8797%" y="181" width="0.0687%" height="15" fill="rgb(249,80,12)" fg:x="944" fg:w="1"/><text x="65.1297%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.27%)</title><rect x="64.9485%" y="181" width="0.2749%" height="15" fill="rgb(221,65,9)" fg:x="945" fg:w="4"/><text x="65.1985%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.27%)</title><rect x="64.9485%" y="165" width="0.2749%" height="15" fill="rgb(235,49,36)" fg:x="945" fg:w="4"/><text x="65.1985%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (10 samples, 0.69%)</title><rect x="65.2234%" y="181" width="0.6873%" height="15" fill="rgb(225,32,20)" fg:x="949" fg:w="10"/><text x="65.4734%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (10 samples, 0.69%)</title><rect x="65.2234%" y="165" width="0.6873%" height="15" fill="rgb(215,141,46)" fg:x="949" fg:w="10"/><text x="65.4734%" y="175.50"></text></g><g><title>&lt;primitive_types::H160 as core::cmp::PartialEq&gt;::eq (10 samples, 0.69%)</title><rect x="65.2234%" y="149" width="0.6873%" height="15" fill="rgb(250,160,47)" fg:x="949" fg:w="10"/><text x="65.4734%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 0.69%)</title><rect x="65.2234%" y="133" width="0.6873%" height="15" fill="rgb(216,222,40)" fg:x="949" fg:w="10"/><text x="65.4734%" y="143.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (10 samples, 0.69%)</title><rect x="65.2234%" y="117" width="0.6873%" height="15" fill="rgb(234,217,39)" fg:x="949" fg:w="10"/><text x="65.4734%" y="127.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (10 samples, 0.69%)</title><rect x="65.2234%" y="101" width="0.6873%" height="15" fill="rgb(207,178,40)" fg:x="949" fg:w="10"/><text x="65.4734%" y="111.50"></text></g><g><title>hashbrown::raw::h2 (5 samples, 0.34%)</title><rect x="65.9107%" y="181" width="0.3436%" height="15" fill="rgb(221,136,13)" fg:x="959" fg:w="5"/><text x="66.1607%" y="191.50"></text></g><g><title>hashbrown::raw::likely (1 samples, 0.07%)</title><rect x="66.2543%" y="181" width="0.0687%" height="15" fill="rgb(249,199,10)" fg:x="964" fg:w="1"/><text x="66.5043%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.07%)</title><rect x="66.3230%" y="181" width="0.0687%" height="15" fill="rgb(249,222,13)" fg:x="965" fg:w="1"/><text x="66.5730%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.07%)</title><rect x="66.3230%" y="165" width="0.0687%" height="15" fill="rgb(244,185,38)" fg:x="965" fg:w="1"/><text x="66.5730%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.07%)</title><rect x="66.3230%" y="149" width="0.0687%" height="15" fill="rgb(236,202,9)" fg:x="965" fg:w="1"/><text x="66.5730%" y="159.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (102 samples, 7.01%)</title><rect x="59.5876%" y="293" width="7.0103%" height="15" fill="rgb(250,229,37)" fg:x="867" fg:w="102"/><text x="59.8376%" y="303.50">&lt;revm::ev..</text></g><g><title>revm::journaled_state::JournaledState::sload (94 samples, 6.46%)</title><rect x="60.1375%" y="277" width="6.4605%" height="15" fill="rgb(206,174,23)" fg:x="875" fg:w="94"/><text x="60.3875%" y="287.50">revm::jo..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (50 samples, 3.44%)</title><rect x="63.1615%" y="261" width="3.4364%" height="15" fill="rgb(211,33,43)" fg:x="919" fg:w="50"/><text x="63.4115%" y="271.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (49 samples, 3.37%)</title><rect x="63.2302%" y="245" width="3.3677%" height="15" fill="rgb(245,58,50)" fg:x="920" fg:w="49"/><text x="63.4802%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (24 samples, 1.65%)</title><rect x="64.9485%" y="229" width="1.6495%" height="15" fill="rgb(244,68,36)" fg:x="945" fg:w="24"/><text x="65.1985%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (24 samples, 1.65%)</title><rect x="64.9485%" y="213" width="1.6495%" height="15" fill="rgb(232,229,15)" fg:x="945" fg:w="24"/><text x="65.1985%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (24 samples, 1.65%)</title><rect x="64.9485%" y="197" width="1.6495%" height="15" fill="rgb(254,30,23)" fg:x="945" fg:w="24"/><text x="65.1985%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.21%)</title><rect x="66.3918%" y="181" width="0.2062%" height="15" fill="rgb(235,160,14)" fg:x="966" fg:w="3"/><text x="66.6418%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.21%)</title><rect x="66.3918%" y="165" width="0.2062%" height="15" fill="rgb(212,155,44)" fg:x="966" fg:w="3"/><text x="66.6418%" y="175.50"></text></g><g><title>revm::gas::Gas::record_cost (1 samples, 0.07%)</title><rect x="66.5979%" y="293" width="0.0687%" height="15" fill="rgb(226,2,50)" fg:x="969" fg:w="1"/><text x="66.8479%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.07%)</title><rect x="66.5979%" y="277" width="0.0687%" height="15" fill="rgb(234,177,6)" fg:x="969" fg:w="1"/><text x="66.8479%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (1 samples, 0.07%)</title><rect x="66.6667%" y="293" width="0.0687%" height="15" fill="rgb(217,24,9)" fg:x="970" fg:w="1"/><text x="66.9167%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.07%)</title><rect x="66.6667%" y="277" width="0.0687%" height="15" fill="rgb(220,13,46)" fg:x="970" fg:w="1"/><text x="66.9167%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.07%)</title><rect x="66.6667%" y="261" width="0.0687%" height="15" fill="rgb(239,221,27)" fg:x="970" fg:w="1"/><text x="66.9167%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.07%)</title><rect x="66.6667%" y="245" width="0.0687%" height="15" fill="rgb(222,198,25)" fg:x="970" fg:w="1"/><text x="66.9167%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.07%)</title><rect x="66.6667%" y="229" width="0.0687%" height="15" fill="rgb(211,99,13)" fg:x="970" fg:w="1"/><text x="66.9167%" y="239.50"></text></g><g><title>revm::instructions::host::sload (105 samples, 7.22%)</title><rect x="59.5876%" y="309" width="7.2165%" height="15" fill="rgb(232,111,31)" fg:x="867" fg:w="105"/><text x="59.8376%" y="319.50">revm::inst..</text></g><g><title>revm::interpreter::stack::Stack::push (1 samples, 0.07%)</title><rect x="66.7354%" y="293" width="0.0687%" height="15" fill="rgb(245,82,37)" fg:x="971" fg:w="1"/><text x="66.9854%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.07%)</title><rect x="66.8041%" y="261" width="0.0687%" height="15" fill="rgb(227,149,46)" fg:x="972" fg:w="1"/><text x="67.0541%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.07%)</title><rect x="66.8041%" y="245" width="0.0687%" height="15" fill="rgb(218,36,50)" fg:x="972" fg:w="1"/><text x="67.0541%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.07%)</title><rect x="66.8729%" y="261" width="0.0687%" height="15" fill="rgb(226,80,48)" fg:x="973" fg:w="1"/><text x="67.1229%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.07%)</title><rect x="66.8729%" y="245" width="0.0687%" height="15" fill="rgb(238,224,15)" fg:x="973" fg:w="1"/><text x="67.1229%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.07%)</title><rect x="66.8729%" y="229" width="0.0687%" height="15" fill="rgb(241,136,10)" fg:x="973" fg:w="1"/><text x="67.1229%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.07%)</title><rect x="66.8729%" y="213" width="0.0687%" height="15" fill="rgb(208,32,45)" fg:x="973" fg:w="1"/><text x="67.1229%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.07%)</title><rect x="66.8729%" y="197" width="0.0687%" height="15" fill="rgb(207,135,9)" fg:x="973" fg:w="1"/><text x="67.1229%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.07%)</title><rect x="66.8729%" y="181" width="0.0687%" height="15" fill="rgb(206,86,44)" fg:x="973" fg:w="1"/><text x="67.1229%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.07%)</title><rect x="66.8729%" y="165" width="0.0687%" height="15" fill="rgb(245,177,15)" fg:x="973" fg:w="1"/><text x="67.1229%" y="175.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.07%)</title><rect x="66.8729%" y="149" width="0.0687%" height="15" fill="rgb(206,64,50)" fg:x="973" fg:w="1"/><text x="67.1229%" y="159.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.07%)</title><rect x="66.8729%" y="133" width="0.0687%" height="15" fill="rgb(234,36,40)" fg:x="973" fg:w="1"/><text x="67.1229%" y="143.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.07%)</title><rect x="66.8729%" y="117" width="0.0687%" height="15" fill="rgb(213,64,8)" fg:x="973" fg:w="1"/><text x="67.1229%" y="127.50"></text></g><g><title>revm::instructions::host::sstore (3 samples, 0.21%)</title><rect x="66.8041%" y="309" width="0.2062%" height="15" fill="rgb(210,75,36)" fg:x="972" fg:w="3"/><text x="67.0541%" y="319.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sstore (3 samples, 0.21%)</title><rect x="66.8041%" y="293" width="0.2062%" height="15" fill="rgb(229,88,21)" fg:x="972" fg:w="3"/><text x="67.0541%" y="303.50"></text></g><g><title>revm::journaled_state::JournaledState::sstore (3 samples, 0.21%)</title><rect x="66.8041%" y="277" width="0.2062%" height="15" fill="rgb(252,204,47)" fg:x="972" fg:w="3"/><text x="67.0541%" y="287.50"></text></g><g><title>revm::journaled_state::JournaledState::sload (1 samples, 0.07%)</title><rect x="66.9416%" y="261" width="0.0687%" height="15" fill="rgb(208,77,27)" fg:x="974" fg:w="1"/><text x="67.1916%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (1 samples, 0.07%)</title><rect x="66.9416%" y="245" width="0.0687%" height="15" fill="rgb(221,76,26)" fg:x="974" fg:w="1"/><text x="67.1916%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.07%)</title><rect x="66.9416%" y="229" width="0.0687%" height="15" fill="rgb(225,139,18)" fg:x="974" fg:w="1"/><text x="67.1916%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.07%)</title><rect x="66.9416%" y="213" width="0.0687%" height="15" fill="rgb(230,137,11)" fg:x="974" fg:w="1"/><text x="67.1916%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.07%)</title><rect x="66.9416%" y="197" width="0.0687%" height="15" fill="rgb(212,28,1)" fg:x="974" fg:w="1"/><text x="67.1916%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.07%)</title><rect x="66.9416%" y="181" width="0.0687%" height="15" fill="rgb(248,164,17)" fg:x="974" fg:w="1"/><text x="67.1916%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (2 samples, 0.14%)</title><rect x="69.3471%" y="293" width="0.1375%" height="15" fill="rgb(222,171,42)" fg:x="1009" fg:w="2"/><text x="69.5971%" y="303.50"></text></g><g><title>revm::interpreter::memory::Memory::get_slice (1 samples, 0.07%)</title><rect x="69.4845%" y="293" width="0.0687%" height="15" fill="rgb(243,84,45)" fg:x="1011" fg:w="1"/><text x="69.7345%" y="303.50"></text></g><g><title>&lt;usize as core::ops::bit::BitAnd&gt;::bitand (2 samples, 0.14%)</title><rect x="69.5533%" y="277" width="0.1375%" height="15" fill="rgb(252,49,23)" fg:x="1012" fg:w="2"/><text x="69.8033%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (4 samples, 0.27%)</title><rect x="69.6907%" y="277" width="0.2749%" height="15" fill="rgb(215,19,7)" fg:x="1014" fg:w="4"/><text x="69.9407%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (4 samples, 0.27%)</title><rect x="69.6907%" y="261" width="0.2749%" height="15" fill="rgb(238,81,41)" fg:x="1014" fg:w="4"/><text x="69.9407%" y="271.50"></text></g><g><title>revm::interpreter::memory::next_multiple_of_32 (7 samples, 0.48%)</title><rect x="69.5533%" y="293" width="0.4811%" height="15" fill="rgb(210,199,37)" fg:x="1012" fg:w="7"/><text x="69.8033%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (1 samples, 0.07%)</title><rect x="69.9656%" y="277" width="0.0687%" height="15" fill="rgb(244,192,49)" fg:x="1018" fg:w="1"/><text x="70.2156%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (1 samples, 0.07%)</title><rect x="70.0344%" y="293" width="0.0687%" height="15" fill="rgb(226,211,11)" fg:x="1019" fg:w="1"/><text x="70.2844%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.07%)</title><rect x="70.0344%" y="277" width="0.0687%" height="15" fill="rgb(236,162,54)" fg:x="1019" fg:w="1"/><text x="70.2844%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.07%)</title><rect x="70.0344%" y="261" width="0.0687%" height="15" fill="rgb(220,229,9)" fg:x="1019" fg:w="1"/><text x="70.2844%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.07%)</title><rect x="70.0344%" y="245" width="0.0687%" height="15" fill="rgb(250,87,22)" fg:x="1019" fg:w="1"/><text x="70.2844%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.07%)</title><rect x="70.0344%" y="229" width="0.0687%" height="15" fill="rgb(239,43,17)" fg:x="1019" fg:w="1"/><text x="70.2844%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.14%)</title><rect x="70.1718%" y="277" width="0.1375%" height="15" fill="rgb(231,177,25)" fg:x="1021" fg:w="2"/><text x="70.4218%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.07%)</title><rect x="70.5155%" y="261" width="0.0687%" height="15" fill="rgb(219,179,1)" fg:x="1026" fg:w="1"/><text x="70.7655%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.07%)</title><rect x="70.5155%" y="245" width="0.0687%" height="15" fill="rgb(238,219,53)" fg:x="1026" fg:w="1"/><text x="70.7655%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::push (8 samples, 0.55%)</title><rect x="70.1031%" y="293" width="0.5498%" height="15" fill="rgb(232,167,36)" fg:x="1020" fg:w="8"/><text x="70.3531%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.34%)</title><rect x="70.3093%" y="277" width="0.3436%" height="15" fill="rgb(244,19,51)" fg:x="1023" fg:w="5"/><text x="70.5593%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.07%)</title><rect x="70.5842%" y="261" width="0.0687%" height="15" fill="rgb(224,6,22)" fg:x="1027" fg:w="1"/><text x="70.8342%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (16 samples, 1.10%)</title><rect x="70.7216%" y="229" width="1.0997%" height="15" fill="rgb(224,145,5)" fg:x="1029" fg:w="16"/><text x="70.9716%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 1.10%)</title><rect x="70.7216%" y="213" width="1.0997%" height="15" fill="rgb(234,130,49)" fg:x="1029" fg:w="16"/><text x="70.9716%" y="223.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (16 samples, 1.10%)</title><rect x="70.7216%" y="197" width="1.0997%" height="15" fill="rgb(254,6,2)" fg:x="1029" fg:w="16"/><text x="70.9716%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position::check::{{closure}} (7 samples, 0.48%)</title><rect x="71.3402%" y="181" width="0.4811%" height="15" fill="rgb(208,96,46)" fg:x="1038" fg:w="7"/><text x="71.5902%" y="191.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::leading_zeros::{{closure}} (7 samples, 0.48%)</title><rect x="71.3402%" y="165" width="0.4811%" height="15" fill="rgb(239,3,39)" fg:x="1038" fg:w="7"/><text x="71.5902%" y="175.50"></text></g><g><title>revm::instructions::memory::mload (78 samples, 5.36%)</title><rect x="67.0103%" y="309" width="5.3608%" height="15" fill="rgb(233,210,1)" fg:x="975" fg:w="78"/><text x="67.2603%" y="319.50">revm::i..</text></g><g><title>ruint::from::&lt;impl core::convert::TryFrom&lt;ruint::Uint&lt;_,_&gt;&gt; for usize&gt;::try_from (25 samples, 1.72%)</title><rect x="70.6529%" y="293" width="1.7182%" height="15" fill="rgb(244,137,37)" fg:x="1028" fg:w="25"/><text x="70.9029%" y="303.50"></text></g><g><title>ruint::from::&lt;impl core::convert::TryFrom&lt;&amp;ruint::Uint&lt;_,_&gt;&gt; for usize&gt;::try_from (25 samples, 1.72%)</title><rect x="70.6529%" y="277" width="1.7182%" height="15" fill="rgb(240,136,2)" fg:x="1028" fg:w="25"/><text x="70.9029%" y="287.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::bit_len (24 samples, 1.65%)</title><rect x="70.7216%" y="261" width="1.6495%" height="15" fill="rgb(239,18,37)" fg:x="1029" fg:w="24"/><text x="70.9716%" y="271.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::leading_zeros (24 samples, 1.65%)</title><rect x="70.7216%" y="245" width="1.6495%" height="15" fill="rgb(218,185,22)" fg:x="1029" fg:w="24"/><text x="70.9716%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (8 samples, 0.55%)</title><rect x="71.8213%" y="229" width="0.5498%" height="15" fill="rgb(225,218,4)" fg:x="1045" fg:w="8"/><text x="72.0713%" y="239.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::leading_zeros::{{closure}} (5 samples, 0.34%)</title><rect x="72.0275%" y="213" width="0.3436%" height="15" fill="rgb(230,182,32)" fg:x="1048" fg:w="5"/><text x="72.2775%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (3 samples, 0.21%)</title><rect x="72.1649%" y="197" width="0.2062%" height="15" fill="rgb(242,56,43)" fg:x="1050" fg:w="3"/><text x="72.4149%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (4 samples, 0.27%)</title><rect x="73.1959%" y="293" width="0.2749%" height="15" fill="rgb(233,99,24)" fg:x="1065" fg:w="4"/><text x="73.4459%" y="303.50"></text></g><g><title>revm::gas::Gas::record_memory (3 samples, 0.21%)</title><rect x="73.4708%" y="293" width="0.2062%" height="15" fill="rgb(234,209,42)" fg:x="1069" fg:w="3"/><text x="73.7208%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::saturating_add (2 samples, 0.14%)</title><rect x="73.6770%" y="277" width="0.1375%" height="15" fill="rgb(227,7,12)" fg:x="1072" fg:w="2"/><text x="73.9270%" y="287.50"></text></g><g><title>revm::gas::calc::memory_gas (6 samples, 0.41%)</title><rect x="73.6770%" y="293" width="0.4124%" height="15" fill="rgb(245,203,43)" fg:x="1072" fg:w="6"/><text x="73.9270%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::saturating_mul (4 samples, 0.27%)</title><rect x="73.8144%" y="277" width="0.2749%" height="15" fill="rgb(238,205,33)" fg:x="1074" fg:w="4"/><text x="74.0644%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_mul (1 samples, 0.07%)</title><rect x="74.0206%" y="261" width="0.0687%" height="15" fill="rgb(231,56,7)" fg:x="1077" fg:w="1"/><text x="74.2706%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_mul (1 samples, 0.07%)</title><rect x="74.0206%" y="245" width="0.0687%" height="15" fill="rgb(244,186,29)" fg:x="1077" fg:w="1"/><text x="74.2706%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.14%)</title><rect x="74.1581%" y="245" width="0.1375%" height="15" fill="rgb(234,111,31)" fg:x="1079" fg:w="2"/><text x="74.4081%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.14%)</title><rect x="74.1581%" y="229" width="0.1375%" height="15" fill="rgb(241,149,10)" fg:x="1079" fg:w="2"/><text x="74.4081%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2 samples, 0.14%)</title><rect x="74.1581%" y="213" width="0.1375%" height="15" fill="rgb(249,206,44)" fg:x="1079" fg:w="2"/><text x="74.4081%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.14%)</title><rect x="74.1581%" y="197" width="0.1375%" height="15" fill="rgb(251,153,30)" fg:x="1079" fg:w="2"/><text x="74.4081%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.27%)</title><rect x="74.2955%" y="245" width="0.2749%" height="15" fill="rgb(239,152,38)" fg:x="1081" fg:w="4"/><text x="74.5455%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.27%)</title><rect x="74.2955%" y="229" width="0.2749%" height="15" fill="rgb(249,139,47)" fg:x="1081" fg:w="4"/><text x="74.5455%" y="239.50"></text></g><g><title>revm::interpreter::memory::Memory::resize (22 samples, 1.51%)</title><rect x="74.0893%" y="293" width="1.5120%" height="15" fill="rgb(244,64,35)" fg:x="1078" fg:w="22"/><text x="74.3393%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (22 samples, 1.51%)</title><rect x="74.0893%" y="277" width="1.5120%" height="15" fill="rgb(216,46,15)" fg:x="1078" fg:w="22"/><text x="74.3393%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (21 samples, 1.44%)</title><rect x="74.1581%" y="261" width="1.4433%" height="15" fill="rgb(250,74,19)" fg:x="1079" fg:w="21"/><text x="74.4081%" y="271.50"></text></g><g><title>core::ptr::write (15 samples, 1.03%)</title><rect x="74.5704%" y="245" width="1.0309%" height="15" fill="rgb(249,42,33)" fg:x="1085" fg:w="15"/><text x="74.8204%" y="255.50"></text></g><g><title>[libc-2.31.so] (10 samples, 0.69%)</title><rect x="74.9141%" y="229" width="0.6873%" height="15" fill="rgb(242,149,17)" fg:x="1090" fg:w="10"/><text x="75.1641%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="75.5326%" y="213" width="0.0687%" height="15" fill="rgb(244,29,21)" fg:x="1099" fg:w="1"/><text x="75.7826%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="75.5326%" y="197" width="0.0687%" height="15" fill="rgb(220,130,37)" fg:x="1099" fg:w="1"/><text x="75.7826%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="75.5326%" y="181" width="0.0687%" height="15" fill="rgb(211,67,2)" fg:x="1099" fg:w="1"/><text x="75.7826%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="75.5326%" y="165" width="0.0687%" height="15" fill="rgb(235,68,52)" fg:x="1099" fg:w="1"/><text x="75.7826%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="75.5326%" y="149" width="0.0687%" height="15" fill="rgb(246,142,3)" fg:x="1099" fg:w="1"/><text x="75.7826%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="75.5326%" y="133" width="0.0687%" height="15" fill="rgb(241,25,7)" fg:x="1099" fg:w="1"/><text x="75.7826%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="75.5326%" y="117" width="0.0687%" height="15" fill="rgb(242,119,39)" fg:x="1099" fg:w="1"/><text x="75.7826%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="75.5326%" y="101" width="0.0687%" height="15" fill="rgb(241,98,45)" fg:x="1099" fg:w="1"/><text x="75.7826%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="75.5326%" y="85" width="0.0687%" height="15" fill="rgb(254,28,30)" fg:x="1099" fg:w="1"/><text x="75.7826%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="75.5326%" y="69" width="0.0687%" height="15" fill="rgb(241,142,54)" fg:x="1099" fg:w="1"/><text x="75.7826%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.07%)</title><rect x="75.6014%" y="277" width="0.0687%" height="15" fill="rgb(222,85,15)" fg:x="1100" fg:w="1"/><text x="75.8514%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.07%)</title><rect x="75.6014%" y="261" width="0.0687%" height="15" fill="rgb(210,85,47)" fg:x="1100" fg:w="1"/><text x="75.8514%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.07%)</title><rect x="75.6014%" y="245" width="0.0687%" height="15" fill="rgb(224,206,25)" fg:x="1100" fg:w="1"/><text x="75.8514%" y="255.50"></text></g><g><title>revm::interpreter::memory::Memory::set_u256 (15 samples, 1.03%)</title><rect x="75.6014%" y="293" width="1.0309%" height="15" fill="rgb(243,201,19)" fg:x="1100" fg:w="15"/><text x="75.8514%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (14 samples, 0.96%)</title><rect x="75.6701%" y="277" width="0.9622%" height="15" fill="rgb(236,59,4)" fg:x="1101" fg:w="14"/><text x="75.9201%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.96%)</title><rect x="75.6701%" y="261" width="0.9622%" height="15" fill="rgb(254,179,45)" fg:x="1101" fg:w="14"/><text x="75.9201%" y="271.50"></text></g><g><title>&lt;usize as core::ops::bit::BitAnd&gt;::bitand (4 samples, 0.27%)</title><rect x="76.6323%" y="277" width="0.2749%" height="15" fill="rgb(226,14,10)" fg:x="1115" fg:w="4"/><text x="76.8823%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.07%)</title><rect x="76.9072%" y="277" width="0.0687%" height="15" fill="rgb(244,27,41)" fg:x="1119" fg:w="1"/><text x="77.1572%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.07%)</title><rect x="76.9072%" y="261" width="0.0687%" height="15" fill="rgb(235,35,32)" fg:x="1119" fg:w="1"/><text x="77.1572%" y="271.50"></text></g><g><title>revm::interpreter::memory::next_multiple_of_32 (6 samples, 0.41%)</title><rect x="76.6323%" y="293" width="0.4124%" height="15" fill="rgb(218,68,31)" fg:x="1115" fg:w="6"/><text x="76.8823%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (1 samples, 0.07%)</title><rect x="76.9759%" y="277" width="0.0687%" height="15" fill="rgb(207,120,37)" fg:x="1120" fg:w="1"/><text x="77.2259%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::len (6 samples, 0.41%)</title><rect x="77.0447%" y="293" width="0.4124%" height="15" fill="rgb(227,98,0)" fg:x="1121" fg:w="6"/><text x="77.2947%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.41%)</title><rect x="77.0447%" y="277" width="0.4124%" height="15" fill="rgb(207,7,3)" fg:x="1121" fg:w="6"/><text x="77.2947%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="261" width="0.3436%" height="15" fill="rgb(206,98,19)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="245" width="0.3436%" height="15" fill="rgb(217,5,26)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="229" width="0.3436%" height="15" fill="rgb(235,190,38)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="213" width="0.3436%" height="15" fill="rgb(247,86,24)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="197" width="0.3436%" height="15" fill="rgb(205,101,16)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="181" width="0.3436%" height="15" fill="rgb(246,168,33)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="165" width="0.3436%" height="15" fill="rgb(231,114,1)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="149" width="0.3436%" height="15" fill="rgb(207,184,53)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="133" width="0.3436%" height="15" fill="rgb(224,95,51)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="117" width="0.3436%" height="15" fill="rgb(212,188,45)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="101" width="0.3436%" height="15" fill="rgb(223,154,38)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="85" width="0.3436%" height="15" fill="rgb(251,22,52)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.34%)</title><rect x="77.1134%" y="69" width="0.3436%" height="15" fill="rgb(229,209,22)" fg:x="1122" fg:w="5"/><text x="77.3634%" y="79.50"></text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (2 samples, 0.14%)</title><rect x="77.4570%" y="293" width="0.1375%" height="15" fill="rgb(234,138,34)" fg:x="1127" fg:w="2"/><text x="77.7070%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.07%)</title><rect x="77.5258%" y="277" width="0.0687%" height="15" fill="rgb(212,95,11)" fg:x="1128" fg:w="1"/><text x="77.7758%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (17 samples, 1.17%)</title><rect x="77.6632%" y="229" width="1.1684%" height="15" fill="rgb(240,179,47)" fg:x="1130" fg:w="17"/><text x="77.9132%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 1.17%)</title><rect x="77.6632%" y="213" width="1.1684%" height="15" fill="rgb(240,163,11)" fg:x="1130" fg:w="17"/><text x="77.9132%" y="223.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (17 samples, 1.17%)</title><rect x="77.6632%" y="197" width="1.1684%" height="15" fill="rgb(236,37,12)" fg:x="1130" fg:w="17"/><text x="77.9132%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position::check::{{closure}} (11 samples, 0.76%)</title><rect x="78.0756%" y="181" width="0.7560%" height="15" fill="rgb(232,164,16)" fg:x="1136" fg:w="11"/><text x="78.3256%" y="191.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::leading_zeros::{{closure}} (11 samples, 0.76%)</title><rect x="78.0756%" y="165" width="0.7560%" height="15" fill="rgb(244,205,15)" fg:x="1136" fg:w="11"/><text x="78.3256%" y="175.50"></text></g><g><title>revm::instructions::memory::mstore (104 samples, 7.15%)</title><rect x="72.3711%" y="309" width="7.1478%" height="15" fill="rgb(223,117,47)" fg:x="1053" fg:w="104"/><text x="72.6211%" y="319.50">revm::inst..</text></g><g><title>ruint::from::&lt;impl core::convert::TryFrom&lt;ruint::Uint&lt;_,_&gt;&gt; for usize&gt;::try_from (28 samples, 1.92%)</title><rect x="77.5945%" y="293" width="1.9244%" height="15" fill="rgb(244,107,35)" fg:x="1129" fg:w="28"/><text x="77.8445%" y="303.50">r..</text></g><g><title>ruint::from::&lt;impl core::convert::TryFrom&lt;&amp;ruint::Uint&lt;_,_&gt;&gt; for usize&gt;::try_from (28 samples, 1.92%)</title><rect x="77.5945%" y="277" width="1.9244%" height="15" fill="rgb(205,140,8)" fg:x="1129" fg:w="28"/><text x="77.8445%" y="287.50">r..</text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::bit_len (27 samples, 1.86%)</title><rect x="77.6632%" y="261" width="1.8557%" height="15" fill="rgb(228,84,46)" fg:x="1130" fg:w="27"/><text x="77.9132%" y="271.50">r..</text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::leading_zeros (27 samples, 1.86%)</title><rect x="77.6632%" y="245" width="1.8557%" height="15" fill="rgb(254,188,9)" fg:x="1130" fg:w="27"/><text x="77.9132%" y="255.50">r..</text></g><g><title>core::option::Option&lt;T&gt;::map_or (10 samples, 0.69%)</title><rect x="78.8316%" y="229" width="0.6873%" height="15" fill="rgb(206,112,54)" fg:x="1147" fg:w="10"/><text x="79.0816%" y="239.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::leading_zeros::{{closure}} (4 samples, 0.27%)</title><rect x="79.2440%" y="213" width="0.2749%" height="15" fill="rgb(216,84,49)" fg:x="1153" fg:w="4"/><text x="79.4940%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (2 samples, 0.14%)</title><rect x="79.3814%" y="197" width="0.1375%" height="15" fill="rgb(214,194,35)" fg:x="1155" fg:w="2"/><text x="79.6314%" y="207.50"></text></g><g><title>revm::instructions::stack::dup (47 samples, 3.23%)</title><rect x="79.5189%" y="309" width="3.2302%" height="15" fill="rgb(249,28,3)" fg:x="1157" fg:w="47"/><text x="79.7689%" y="319.50">rev..</text></g><g><title>revm::interpreter::stack::Stack::dup (47 samples, 3.23%)</title><rect x="79.5189%" y="293" width="3.2302%" height="15" fill="rgb(222,56,52)" fg:x="1157" fg:w="47"/><text x="79.7689%" y="303.50">rev..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (10 samples, 0.69%)</title><rect x="82.0619%" y="277" width="0.6873%" height="15" fill="rgb(245,217,50)" fg:x="1194" fg:w="10"/><text x="82.3119%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.21%)</title><rect x="83.0928%" y="277" width="0.2062%" height="15" fill="rgb(213,201,24)" fg:x="1209" fg:w="3"/><text x="83.3428%" y="287.50"></text></g><g><title>revm::instructions::stack::pop (9 samples, 0.62%)</title><rect x="82.7491%" y="309" width="0.6186%" height="15" fill="rgb(248,116,28)" fg:x="1204" fg:w="9"/><text x="82.9991%" y="319.50"></text></g><g><title>revm::interpreter::stack::Stack::reduce_one (9 samples, 0.62%)</title><rect x="82.7491%" y="293" width="0.6186%" height="15" fill="rgb(219,72,43)" fg:x="1204" fg:w="9"/><text x="82.9991%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.07%)</title><rect x="83.2990%" y="277" width="0.0687%" height="15" fill="rgb(209,138,14)" fg:x="1212" fg:w="1"/><text x="83.5490%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.14%)</title><rect x="83.9863%" y="293" width="0.1375%" height="15" fill="rgb(222,18,33)" fg:x="1222" fg:w="2"/><text x="84.2363%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.14%)</title><rect x="83.9863%" y="277" width="0.1375%" height="15" fill="rgb(213,199,7)" fg:x="1222" fg:w="2"/><text x="84.2363%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (10 samples, 0.69%)</title><rect x="87.2165%" y="277" width="0.6873%" height="15" fill="rgb(250,110,10)" fg:x="1269" fg:w="10"/><text x="87.4665%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.14%)</title><rect x="87.9038%" y="277" width="0.1375%" height="15" fill="rgb(248,123,6)" fg:x="1279" fg:w="2"/><text x="88.1538%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (1 samples, 0.07%)</title><rect x="88.0412%" y="277" width="0.0687%" height="15" fill="rgb(206,91,31)" fg:x="1281" fg:w="1"/><text x="88.2912%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (1 samples, 0.07%)</title><rect x="88.0412%" y="261" width="0.0687%" height="15" fill="rgb(211,154,13)" fg:x="1281" fg:w="1"/><text x="88.2912%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (1 samples, 0.07%)</title><rect x="88.0412%" y="245" width="0.0687%" height="15" fill="rgb(225,148,7)" fg:x="1281" fg:w="1"/><text x="88.2912%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.07%)</title><rect x="88.1100%" y="277" width="0.0687%" height="15" fill="rgb(220,160,43)" fg:x="1282" fg:w="1"/><text x="88.3600%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.07%)</title><rect x="88.1100%" y="261" width="0.0687%" height="15" fill="rgb(213,52,39)" fg:x="1282" fg:w="1"/><text x="88.3600%" y="271.50"></text></g><g><title>revm::instructions::stack::push (72 samples, 4.95%)</title><rect x="83.3677%" y="309" width="4.9485%" height="15" fill="rgb(243,137,7)" fg:x="1213" fg:w="72"/><text x="83.6177%" y="319.50">revm::..</text></g><g><title>revm::interpreter::stack::Stack::push_slice (61 samples, 4.19%)</title><rect x="84.1237%" y="293" width="4.1924%" height="15" fill="rgb(230,79,13)" fg:x="1224" fg:w="61"/><text x="84.3737%" y="303.50">revm:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (2 samples, 0.14%)</title><rect x="88.1787%" y="277" width="0.1375%" height="15" fill="rgb(247,105,23)" fg:x="1283" fg:w="2"/><text x="88.4287%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (2 samples, 0.14%)</title><rect x="88.1787%" y="261" width="0.1375%" height="15" fill="rgb(223,179,41)" fg:x="1283" fg:w="2"/><text x="88.4287%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.14%)</title><rect x="88.1787%" y="245" width="0.1375%" height="15" fill="rgb(218,9,34)" fg:x="1283" fg:w="2"/><text x="88.4287%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.14%)</title><rect x="88.1787%" y="229" width="0.1375%" height="15" fill="rgb(222,106,8)" fg:x="1283" fg:w="2"/><text x="88.4287%" y="239.50"></text></g><g><title>core::intrinsics::copy (7 samples, 0.48%)</title><rect x="88.4536%" y="261" width="0.4811%" height="15" fill="rgb(211,220,0)" fg:x="1287" fg:w="7"/><text x="88.7036%" y="271.50"></text></g><g><title>revm::instructions::stack::swap (46 samples, 3.16%)</title><rect x="88.3162%" y="309" width="3.1615%" height="15" fill="rgb(229,52,16)" fg:x="1285" fg:w="46"/><text x="88.5662%" y="319.50">rev..</text></g><g><title>revm::interpreter::stack::Stack::swap (46 samples, 3.16%)</title><rect x="88.3162%" y="293" width="3.1615%" height="15" fill="rgb(212,155,18)" fg:x="1285" fg:w="46"/><text x="88.5662%" y="303.50">rev..</text></g><g><title>core::ptr::swap (44 samples, 3.02%)</title><rect x="88.4536%" y="277" width="3.0241%" height="15" fill="rgb(242,21,14)" fg:x="1287" fg:w="44"/><text x="88.7036%" y="287.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 2.54%)</title><rect x="88.9347%" y="261" width="2.5430%" height="15" fill="rgb(222,19,48)" fg:x="1294" fg:w="37"/><text x="89.1847%" y="271.50">co..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::get_pos (1 samples, 0.07%)</title><rect x="91.5464%" y="197" width="0.0687%" height="15" fill="rgb(232,45,27)" fg:x="1332" fg:w="1"/><text x="91.7964%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (3 samples, 0.21%)</title><rect x="92.1649%" y="149" width="0.2062%" height="15" fill="rgb(249,103,42)" fg:x="1341" fg:w="3"/><text x="92.4149%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (10 samples, 0.69%)</title><rect x="92.3711%" y="149" width="0.6873%" height="15" fill="rgb(246,81,33)" fg:x="1344" fg:w="10"/><text x="92.6211%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (25 samples, 1.72%)</title><rect x="93.0584%" y="149" width="1.7182%" height="15" fill="rgb(252,33,42)" fg:x="1354" fg:w="25"/><text x="93.3084%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (9 samples, 0.62%)</title><rect x="94.7766%" y="149" width="0.6186%" height="15" fill="rgb(209,212,41)" fg:x="1379" fg:w="9"/><text x="95.0266%" y="159.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (71 samples, 4.88%)</title><rect x="91.5464%" y="229" width="4.8797%" height="15" fill="rgb(207,154,6)" fg:x="1332" fg:w="71"/><text x="91.7964%" y="239.50">&lt;diges..</text></g><g><title>&lt;sha3::Keccak256Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (71 samples, 4.88%)</title><rect x="91.5464%" y="213" width="4.8797%" height="15" fill="rgb(223,64,47)" fg:x="1332" fg:w="71"/><text x="91.7964%" y="223.50">&lt;sha3:..</text></g><g><title>sha3::state::Sha3State::absorb_block (70 samples, 4.81%)</title><rect x="91.6151%" y="197" width="4.8110%" height="15" fill="rgb(211,161,38)" fg:x="1333" fg:w="70"/><text x="91.8651%" y="207.50">sha3::..</text></g><g><title>keccak::f1600 (69 samples, 4.74%)</title><rect x="91.6838%" y="181" width="4.7423%" height="15" fill="rgb(219,138,40)" fg:x="1334" fg:w="69"/><text x="91.9338%" y="191.50">keccak..</text></g><g><title>keccak::keccak_p (62 samples, 4.26%)</title><rect x="92.1649%" y="165" width="4.2612%" height="15" fill="rgb(241,228,46)" fg:x="1341" fg:w="62"/><text x="92.4149%" y="175.50">kecca..</text></g><g><title>&lt;u64 as keccak::LaneSize&gt;::rotate_left (15 samples, 1.03%)</title><rect x="95.3952%" y="149" width="1.0309%" height="15" fill="rgb(223,209,38)" fg:x="1388" fg:w="15"/><text x="95.6452%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (15 samples, 1.03%)</title><rect x="95.3952%" y="133" width="1.0309%" height="15" fill="rgb(236,164,45)" fg:x="1388" fg:w="15"/><text x="95.6452%" y="143.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (74 samples, 5.09%)</title><rect x="91.5464%" y="261" width="5.0859%" height="15" fill="rgb(231,15,5)" fg:x="1332" fg:w="74"/><text x="91.7964%" y="271.50">&lt;D as ..</text></g><g><title>digest::FixedOutput::finalize_fixed (74 samples, 5.09%)</title><rect x="91.5464%" y="245" width="5.0859%" height="15" fill="rgb(252,35,15)" fg:x="1332" fg:w="74"/><text x="91.7964%" y="255.50">digest..</text></g><g><title>[libc-2.31.so] (3 samples, 0.21%)</title><rect x="96.4261%" y="229" width="0.2062%" height="15" fill="rgb(248,181,18)" fg:x="1403" fg:w="3"/><text x="96.6761%" y="239.50"></text></g><g><title>revm::instructions::system::sha3 (78 samples, 5.36%)</title><rect x="91.4777%" y="309" width="5.3608%" height="15" fill="rgb(233,39,42)" fg:x="1331" fg:w="78"/><text x="91.7277%" y="319.50">revm::i..</text></g><g><title>revm::common::keccak256 (77 samples, 5.29%)</title><rect x="91.5464%" y="293" width="5.2921%" height="15" fill="rgb(238,110,33)" fg:x="1332" fg:w="77"/><text x="91.7964%" y="303.50">revm::..</text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (77 samples, 5.29%)</title><rect x="91.5464%" y="277" width="5.2921%" height="15" fill="rgb(233,195,10)" fg:x="1332" fg:w="77"/><text x="91.7964%" y="287.50">&lt;D as ..</text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::default::Default&gt;::default (3 samples, 0.21%)</title><rect x="96.6323%" y="261" width="0.2062%" height="15" fill="rgb(254,105,3)" fg:x="1406" fg:w="3"/><text x="96.8823%" y="271.50"></text></g><g><title>&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::default::Default&gt;::default (3 samples, 0.21%)</title><rect x="96.6323%" y="245" width="0.2062%" height="15" fill="rgb(221,225,9)" fg:x="1406" fg:w="3"/><text x="96.8823%" y="255.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.21%)</title><rect x="96.6323%" y="229" width="0.2062%" height="15" fill="rgb(224,227,45)" fg:x="1406" fg:w="3"/><text x="96.8823%" y="239.50"></text></g><g><title>revm::interpreter::stack::Stack::len (2 samples, 0.14%)</title><rect x="96.8385%" y="309" width="0.1375%" height="15" fill="rgb(229,198,43)" fg:x="1409" fg:w="2"/><text x="97.0885%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.14%)</title><rect x="96.8385%" y="293" width="0.1375%" height="15" fill="rgb(206,209,35)" fg:x="1409" fg:w="2"/><text x="97.0885%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (6 samples, 0.41%)</title><rect x="98.4192%" y="293" width="0.4124%" height="15" fill="rgb(245,195,53)" fg:x="1432" fg:w="6"/><text x="98.6692%" y="303.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (31 samples, 2.13%)</title><rect x="96.9759%" y="309" width="2.1306%" height="15" fill="rgb(240,92,26)" fg:x="1411" fg:w="31"/><text x="97.2259%" y="319.50">r..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (4 samples, 0.27%)</title><rect x="98.8316%" y="293" width="0.2749%" height="15" fill="rgb(207,40,23)" fg:x="1438" fg:w="4"/><text x="99.0816%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4 samples, 0.27%)</title><rect x="98.8316%" y="277" width="0.2749%" height="15" fill="rgb(223,111,35)" fg:x="1438" fg:w="4"/><text x="99.0816%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.27%)</title><rect x="98.8316%" y="261" width="0.2749%" height="15" fill="rgb(229,147,28)" fg:x="1438" fg:w="4"/><text x="99.0816%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (4 samples, 0.27%)</title><rect x="98.8316%" y="245" width="0.2749%" height="15" fill="rgb(211,29,28)" fg:x="1438" fg:w="4"/><text x="99.0816%" y="255.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_sub (2 samples, 0.14%)</title><rect x="99.1065%" y="309" width="0.1375%" height="15" fill="rgb(228,72,33)" fg:x="1442" fg:w="2"/><text x="99.3565%" y="319.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_sub (2 samples, 0.14%)</title><rect x="99.1065%" y="293" width="0.1375%" height="15" fill="rgb(205,214,31)" fg:x="1442" fg:w="2"/><text x="99.3565%" y="303.50"></text></g><g><title>revm::interpreter::Interpreter::run (1,374 samples, 94.43%)</title><rect x="5.4296%" y="341" width="94.4330%" height="15" fill="rgb(224,111,15)" fg:x="79" fg:w="1374"/><text x="5.6796%" y="351.50">revm::interpreter::Interpreter::run</text></g><g><title>revm::instructions::eval (1,279 samples, 87.90%)</title><rect x="11.9588%" y="325" width="87.9038%" height="15" fill="rgb(253,21,26)" fg:x="174" fg:w="1279"/><text x="12.2088%" y="335.50">revm::instructions::eval</text></g><g><title>ruint::mul::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_mul (9 samples, 0.62%)</title><rect x="99.2440%" y="309" width="0.6186%" height="15" fill="rgb(245,139,43)" fg:x="1444" fg:w="9"/><text x="99.4940%" y="319.50"></text></g><g><title>ruint::algorithms::mul::addmul_n (9 samples, 0.62%)</title><rect x="99.2440%" y="293" width="0.6186%" height="15" fill="rgb(252,170,7)" fg:x="1444" fg:w="9"/><text x="99.4940%" y="303.50"></text></g><g><title>ruint::algorithms::mul::addmul_4 (9 samples, 0.62%)</title><rect x="99.2440%" y="277" width="0.6186%" height="15" fill="rgb(231,118,14)" fg:x="1444" fg:w="9"/><text x="99.4940%" y="287.50"></text></g><g><title>ruint::algorithms::mul::mac (9 samples, 0.62%)</title><rect x="99.2440%" y="261" width="0.6186%" height="15" fill="rgb(238,83,0)" fg:x="1444" fg:w="9"/><text x="99.4940%" y="271.50"></text></g><g><title>&lt;u128 as ruint::algorithms::DoubleWord&lt;u64&gt;&gt;::muladd2 (9 samples, 0.62%)</title><rect x="99.2440%" y="245" width="0.6186%" height="15" fill="rgb(221,39,39)" fg:x="1444" fg:w="9"/><text x="99.4940%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (1 samples, 0.07%)</title><rect x="99.8625%" y="261" width="0.0687%" height="15" fill="rgb(222,119,46)" fg:x="1453" fg:w="1"/><text x="100.1125%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (1 samples, 0.07%)</title><rect x="99.8625%" y="245" width="0.0687%" height="15" fill="rgb(222,165,49)" fg:x="1453" fg:w="1"/><text x="100.1125%" y="255.50"></text></g><g><title>all (1,455 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(219,113,52)" fg:x="0" fg:w="1455"/><text x="0.2500%" y="543.50"></text></g><g><title>snailtracer (1,450 samples, 99.66%)</title><rect x="0.3436%" y="517" width="99.6564%" height="15" fill="rgb(214,7,15)" fg:x="5" fg:w="1450"/><text x="0.5936%" y="527.50">snailtracer</text></g><g><title>_start (1,377 samples, 94.64%)</title><rect x="5.3608%" y="501" width="94.6392%" height="15" fill="rgb(235,32,4)" fg:x="78" fg:w="1377"/><text x="5.6108%" y="511.50">_start</text></g><g><title>__libc_start_main (1,377 samples, 94.64%)</title><rect x="5.3608%" y="485" width="94.6392%" height="15" fill="rgb(238,90,54)" fg:x="78" fg:w="1377"/><text x="5.6108%" y="495.50">__libc_start_main</text></g><g><title>main (1,377 samples, 94.64%)</title><rect x="5.3608%" y="469" width="94.6392%" height="15" fill="rgb(213,208,19)" fg:x="78" fg:w="1377"/><text x="5.6108%" y="479.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,377 samples, 94.64%)</title><rect x="5.3608%" y="453" width="94.6392%" height="15" fill="rgb(233,156,4)" fg:x="78" fg:w="1377"/><text x="5.6108%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,377 samples, 94.64%)</title><rect x="5.3608%" y="437" width="94.6392%" height="15" fill="rgb(207,194,5)" fg:x="78" fg:w="1377"/><text x="5.6108%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>snailtracer::main (1,377 samples, 94.64%)</title><rect x="5.3608%" y="421" width="94.6392%" height="15" fill="rgb(206,111,30)" fg:x="78" fg:w="1377"/><text x="5.6108%" y="431.50">snailtracer::main</text></g><g><title>snailtracer::simple_example (1,377 samples, 94.64%)</title><rect x="5.3608%" y="405" width="94.6392%" height="15" fill="rgb(243,70,54)" fg:x="78" fg:w="1377"/><text x="5.6108%" y="415.50">snailtracer::simple_example</text></g><g><title>revm::evm::EVM&lt;DB&gt;::transact (1,377 samples, 94.64%)</title><rect x="5.3608%" y="389" width="94.6392%" height="15" fill="rgb(242,28,8)" fg:x="78" fg:w="1377"/><text x="5.6108%" y="399.50">revm::evm::EVM&lt;DB&gt;::transact</text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact (1,377 samples, 94.64%)</title><rect x="5.3608%" y="373" width="94.6392%" height="15" fill="rgb(219,106,18)" fg:x="78" fg:w="1377"/><text x="5.6108%" y="383.50">&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact</text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (1,377 samples, 94.64%)</title><rect x="5.3608%" y="357" width="94.6392%" height="15" fill="rgb(244,222,10)" fg:x="78" fg:w="1377"/><text x="5.6108%" y="367.50">revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner</text></g><g><title>revm::interpreter::contract::Contract::new_with_context (2 samples, 0.14%)</title><rect x="99.8625%" y="341" width="0.1375%" height="15" fill="rgb(236,179,52)" fg:x="1453" fg:w="2"/><text x="100.1125%" y="351.50"></text></g><g><title>revm::interpreter::contract::Contract::new (2 samples, 0.14%)</title><rect x="99.8625%" y="325" width="0.1375%" height="15" fill="rgb(213,23,39)" fg:x="1453" fg:w="2"/><text x="100.1125%" y="335.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::lock (2 samples, 0.14%)</title><rect x="99.8625%" y="309" width="0.1375%" height="15" fill="rgb(238,48,10)" fg:x="1453" fg:w="2"/><text x="100.1125%" y="319.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::to_analysed (2 samples, 0.14%)</title><rect x="99.8625%" y="293" width="0.1375%" height="15" fill="rgb(251,196,23)" fg:x="1453" fg:w="2"/><text x="100.1125%" y="303.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::analyze (2 samples, 0.14%)</title><rect x="99.8625%" y="277" width="0.1375%" height="15" fill="rgb(250,152,24)" fg:x="1453" fg:w="2"/><text x="100.1125%" y="287.50"></text></g><g><title>revm::instructions::opcode::OpInfo::get_gas (1 samples, 0.07%)</title><rect x="99.9313%" y="261" width="0.0687%" height="15" fill="rgb(209,150,17)" fg:x="1454" fg:w="1"/><text x="100.1813%" y="271.50"></text></g></svg></svg>